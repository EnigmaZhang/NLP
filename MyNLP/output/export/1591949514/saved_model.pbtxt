saved_model_schema_version: 1
meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "Abs"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Add"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_STRING
            }
          }
        }
      }
      op {
        name: "All"
        input_arg {
          name: "input"
          type: DT_BOOL
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type: DT_BOOL
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Any"
        input_arg {
          name: "input"
          type: DT_BOOL
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type: DT_BOOL
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Assign"
        input_arg {
          name: "ref"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output_ref"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "validate_shape"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: true
          }
        }
        allows_uninitialized_input: true
      }
      op {
        name: "BatchMatMulV2"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        attr {
          name: "adj_x"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "adj_y"
          type: "bool"
          default_value {
            b: false
          }
        }
      }
      op {
        name: "BiasAdd"
        input_arg {
          name: "value"
          type_attr: "T"
        }
        input_arg {
          name: "bias"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "data_format"
          type: "string"
          default_value {
            s: "NHWC"
          }
          allowed_values {
            list {
              s: "NHWC"
              s: "NCHW"
            }
          }
        }
      }
      op {
        name: "Cast"
        input_arg {
          name: "x"
          type_attr: "SrcT"
        }
        output_arg {
          name: "y"
          type_attr: "DstT"
        }
        attr {
          name: "SrcT"
          type: "type"
        }
        attr {
          name: "DstT"
          type: "type"
        }
        attr {
          name: "Truncate"
          type: "bool"
          default_value {
            b: false
          }
        }
      }
      op {
        name: "ConcatV2"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        input_arg {
          name: "axis"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 2
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "Cos"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "DatasetToSingleElement"
        input_arg {
          name: "dataset"
          type: DT_VARIANT
        }
        output_arg {
          name: "components"
          type_list_attr: "output_types"
        }
        attr {
          name: "output_types"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "output_shapes"
          type: "list(shape)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "Enter"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "frame_name"
          type: "string"
        }
        attr {
          name: "is_constant"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "parallel_iterations"
          type: "int"
          default_value {
            i: 10
          }
        }
      }
      op {
        name: "Equal"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_QUINT8
              type: DT_QINT8
              type: DT_QINT32
              type: DT_STRING
              type: DT_BOOL
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Exit"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Exp"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "ExpandDims"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "dim"
          type_attr: "Tdim"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tdim"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Fill"
        input_arg {
          name: "dims"
          type_attr: "index_type"
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "index_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "FloorDiv"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "FloorMod"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "GatherNd"
        input_arg {
          name: "params"
          type_attr: "Tparams"
        }
        input_arg {
          name: "indices"
          type_attr: "Tindices"
        }
        output_arg {
          name: "output"
          type_attr: "Tparams"
        }
        attr {
          name: "Tparams"
          type: "type"
        }
        attr {
          name: "Tindices"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "GatherV2"
        input_arg {
          name: "params"
          type_attr: "Tparams"
        }
        input_arg {
          name: "indices"
          type_attr: "Tindices"
        }
        input_arg {
          name: "axis"
          type_attr: "Taxis"
        }
        output_arg {
          name: "output"
          type_attr: "Tparams"
        }
        attr {
          name: "batch_dims"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "Tparams"
          type: "type"
        }
        attr {
          name: "Tindices"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        attr {
          name: "Taxis"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Greater"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
      }
      op {
        name: "Identity"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "ImageSummary"
        input_arg {
          name: "tag"
          type: DT_STRING
        }
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        output_arg {
          name: "summary"
          type: DT_STRING
        }
        attr {
          name: "max_images"
          type: "int"
          default_value {
            i: 3
          }
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_FLOAT
          }
          allowed_values {
            list {
              type: DT_UINT8
              type: DT_FLOAT
              type: DT_HALF
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "bad_color"
          type: "tensor"
          default_value {
            tensor {
              dtype: DT_UINT8
              tensor_shape {
                dim {
                  size: 4
                }
              }
              int_val: 255
              int_val: 0
              int_val: 0
              int_val: 255
            }
          }
        }
      }
      op {
        name: "IsFinite"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "Less"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
      }
      op {
        name: "Log"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "LogicalAnd"
        input_arg {
          name: "x"
          type: DT_BOOL
        }
        input_arg {
          name: "y"
          type: DT_BOOL
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        is_commutative: true
      }
      op {
        name: "LogicalNot"
        input_arg {
          name: "x"
          type: DT_BOOL
        }
        output_arg {
          name: "y"
          type: DT_BOOL
        }
      }
      op {
        name: "LoopCond"
        input_arg {
          name: "input"
          type: DT_BOOL
        }
        output_arg {
          name: "output"
          type: DT_BOOL
        }
      }
      op {
        name: "MapDataset"
        input_arg {
          name: "input_dataset"
          type: DT_VARIANT
        }
        input_arg {
          name: "other_arguments"
          type_list_attr: "Targuments"
        }
        output_arg {
          name: "handle"
          type: DT_VARIANT
        }
        attr {
          name: "f"
          type: "func"
        }
        attr {
          name: "Targuments"
          type: "list(type)"
          has_minimum: true
        }
        attr {
          name: "output_types"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "output_shapes"
          type: "list(shape)"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "use_inter_op_parallelism"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "preserve_cardinality"
          type: "bool"
          default_value {
            b: false
          }
        }
      }
      op {
        name: "MatMul"
        input_arg {
          name: "a"
          type_attr: "T"
        }
        input_arg {
          name: "b"
          type_attr: "T"
        }
        output_arg {
          name: "product"
          type_attr: "T"
        }
        attr {
          name: "transpose_a"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "transpose_b"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "MatrixBandPart"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "num_lower"
          type_attr: "Tindex"
        }
        input_arg {
          name: "num_upper"
          type_attr: "Tindex"
        }
        output_arg {
          name: "band"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tindex"
          type: "type"
          default_value {
            type: DT_INT64
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Max"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Maximum"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Mean"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Merge"
        input_arg {
          name: "inputs"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        output_arg {
          name: "value_index"
          type: DT_INT32
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "MergeV2Checkpoints"
        input_arg {
          name: "checkpoint_prefixes"
          type: DT_STRING
        }
        input_arg {
          name: "destination_prefix"
          type: DT_STRING
        }
        attr {
          name: "delete_old_dirs"
          type: "bool"
          default_value {
            b: true
          }
        }
        is_stateful: true
      }
      op {
        name: "Mul"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Neg"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "NextIteration"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "NoOp"
      }
      op {
        name: "NotEqual"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_QUINT8
              type: DT_QINT8
              type: DT_QINT32
              type: DT_STRING
              type: DT_BOOL
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Pack"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "axis"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "Pad"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "paddings"
          type_attr: "Tpaddings"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tpaddings"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "PaddedBatchDatasetV2"
        input_arg {
          name: "input_dataset"
          type: DT_VARIANT
        }
        input_arg {
          name: "batch_size"
          type: DT_INT64
        }
        input_arg {
          name: "padded_shapes"
          type: DT_INT64
          number_attr: "N"
        }
        input_arg {
          name: "padding_values"
          type_list_attr: "Toutput_types"
        }
        input_arg {
          name: "drop_remainder"
          type: DT_BOOL
        }
        output_arg {
          name: "handle"
          type: DT_VARIANT
        }
        attr {
          name: "parallel_copy"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "Toutput_types"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "output_shapes"
          type: "list(shape)"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "PlaceholderWithDefault"
        input_arg {
          name: "input"
          type_attr: "dtype"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
        }
      }
      op {
        name: "Pow"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_HALF
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Prod"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RandomStandardNormal"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "RandomUniform"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "Range"
        input_arg {
          name: "start"
          type_attr: "Tidx"
        }
        input_arg {
          name: "limit"
          type_attr: "Tidx"
        }
        input_arg {
          name: "delta"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "Tidx"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RealDiv"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "RefEnter"
        input_arg {
          name: "data"
          type_attr: "T"
          is_ref: true
        }
        output_arg {
          name: "output"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "frame_name"
          type: "string"
        }
        attr {
          name: "is_constant"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "parallel_iterations"
          type: "int"
          default_value {
            i: 10
          }
        }
      }
      op {
        name: "Relu"
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "activations"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_QINT8
            }
          }
        }
      }
      op {
        name: "Reshape"
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tshape"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tshape"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RestoreV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        output_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "Rsqrt"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "SaveV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        input_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "ScatterNd"
        input_arg {
          name: "indices"
          type_attr: "Tindices"
        }
        input_arg {
          name: "updates"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tindices"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tindices"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Select"
        input_arg {
          name: "condition"
          type: DT_BOOL
        }
        input_arg {
          name: "t"
          type_attr: "T"
        }
        input_arg {
          name: "e"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Shape"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShardedFilename"
        input_arg {
          name: "basename"
          type: DT_STRING
        }
        input_arg {
          name: "shard"
          type: DT_INT32
        }
        input_arg {
          name: "num_shards"
          type: DT_INT32
        }
        output_arg {
          name: "filename"
          type: DT_STRING
        }
      }
      op {
        name: "Sin"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Softmax"
        input_arg {
          name: "logits"
          type_attr: "T"
        }
        output_arg {
          name: "softmax"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "Split"
        input_arg {
          name: "split_dim"
          type: DT_INT32
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
          number_attr: "num_split"
        }
        attr {
          name: "num_split"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "SquaredDifference"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Squeeze"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "squeeze_dims"
          type: "list(int)"
          default_value {
            list {
            }
          }
          has_minimum: true
        }
      }
      op {
        name: "StopGradient"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "StridedSlice"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "begin"
          type_attr: "Index"
        }
        input_arg {
          name: "end"
          type_attr: "Index"
        }
        input_arg {
          name: "strides"
          type_attr: "Index"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Index"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        attr {
          name: "begin_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "end_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "ellipsis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "new_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "shrink_axis_mask"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "StringJoin"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "separator"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Sub"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Sum"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Switch"
        input_arg {
          name: "data"
          type_attr: "T"
        }
        input_arg {
          name: "pred"
          type: DT_BOOL
        }
        output_arg {
          name: "output_false"
          type_attr: "T"
        }
        output_arg {
          name: "output_true"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "TensorSliceDataset"
        input_arg {
          name: "components"
          type_list_attr: "Toutput_types"
        }
        output_arg {
          name: "handle"
          type: DT_VARIANT
        }
        attr {
          name: "Toutput_types"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "output_shapes"
          type: "list(shape)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "TensorSummaryV2"
        input_arg {
          name: "tag"
          type: DT_STRING
        }
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        input_arg {
          name: "serialized_summary_metadata"
          type: DT_STRING
        }
        output_arg {
          name: "summary"
          type: DT_STRING
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Tile"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "multiples"
          type_attr: "Tmultiples"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tmultiples"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "TopKV2"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "k"
          type: DT_INT32
        }
        output_arg {
          name: "values"
          type_attr: "T"
        }
        output_arg {
          name: "indices"
          type: DT_INT32
        }
        attr {
          name: "sorted"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
      }
      op {
        name: "Transpose"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "perm"
          type_attr: "Tperm"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tperm"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "VariableV2"
        output_arg {
          name: "ref"
          type_attr: "dtype"
          is_ref: true
        }
        attr {
          name: "shape"
          type: "shape"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        is_stateful: true
      }
      op {
        name: "Where"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "index"
          type: DT_INT64
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_BOOL
          }
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_BOOL
            }
          }
        }
      }
      op {
        name: "ZerosLike"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
    }
    tags: "serve"
    tensorflow_version: "1.14.0"
    tensorflow_git_version: "unknown"
    stripped_default_attrs: true
  }
  graph_def {
    node {
      name: "global_step/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node {
      name: "global_step"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
    }
    node {
      name: "global_step/Assign"
      op: "Assign"
      input: "global_step"
      input: "global_step/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "global_step/read"
      op: "Identity"
      input: "global_step"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "serialized_example"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
    node {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "serialized_example"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "MapDataset"
      op: "MapDataset"
      input: "TensorSliceDataset"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_map_TranslateUp2down.decode_example_29"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
    }
    node {
      name: "MapDataset_1"
      op: "MapDataset"
      input: "MapDataset"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_map_<lambda>_38"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
          }
        }
      }
    }
    node {
      name: "MapDataset_2"
      op: "MapDataset"
      input: "MapDataset_1"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_map_cast_ints_to_int32_50"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
    }
    node {
      name: "Shape"
      op: "Shape"
      input: "serialized_example"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT64
        }
      }
    }
    node {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Shape"
      input: "strided_slice/stack"
      input: "strided_slice/stack_1"
      input: "strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: 1
          }
        }
      }
    }
    node {
      name: "Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: -1
          }
        }
      }
    }
    node {
      name: "Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
                size: 1
              }
            }
            int64_val: -1
          }
        }
      }
    }
    node {
      name: "padding_value"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "padding_value_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "padding_value_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "drop_remainder"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node {
      name: "PaddedBatchDatasetV2"
      op: "PaddedBatchDatasetV2"
      input: "MapDataset_2"
      input: "strided_slice"
      input: "Const"
      input: "Const_1"
      input: "Const_2"
      input: "padding_value"
      input: "padding_value_1"
      input: "padding_value_2"
      input: "drop_remainder"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "MapDataset_3"
      op: "MapDataset"
      input: "PaddedBatchDatasetV2"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_map_standardize_shapes_80"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
    }
    node {
      name: "DatasetToSingleElement"
      op: "DatasetToSingleElement"
      input: "MapDataset_3"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_INT32
            type: DT_INT32
          }
        }
      }
    }
    node {
      name: "Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "batch_size"
            string_val: "128"
          }
        }
      }
    }
    node {
      name: "Const_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "batch_shuffle_size"
            string_val: "512"
          }
        }
      }
    }
    node {
      name: "Const_5"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "use_fixed_batch_size"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_6"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "num_hidden_layers"
            string_val: "2"
          }
        }
      }
    }
    node {
      name: "Const_7"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "kernel_height"
            string_val: "3"
          }
        }
      }
    }
    node {
      name: "Const_8"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "kernel_width"
            string_val: "1"
          }
        }
      }
    }
    node {
      name: "Const_9"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "hidden_size"
            string_val: "256"
          }
        }
      }
    }
    node {
      name: "Const_10"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "compress_steps"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_11"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "dropout"
            string_val: "0.0"
          }
        }
      }
    }
    node {
      name: "Const_12"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "clip_grad_norm"
            string_val: "0.0"
          }
        }
      }
    }
    node {
      name: "Const_13"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "grad_noise_scale"
            string_val: "0.0"
          }
        }
      }
    }
    node {
      name: "Const_14"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "summarize_grads"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_15"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "mlperf_mode"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_16"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "summarize_vars"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_17"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "initializer"
            string_val: "uniform_unit_scaling"
          }
        }
      }
    }
    node {
      name: "Const_18"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "initializer_gain"
            string_val: "1.0"
          }
        }
      }
    }
    node {
      name: "Const_19"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "label_smoothing"
            string_val: "0.0"
          }
        }
      }
    }
    node {
      name: "Const_20"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "optimizer"
            string_val: "adam"
          }
        }
      }
    }
    node {
      name: "Const_21"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "optimizer_adam_epsilon"
            string_val: "1e-09"
          }
        }
      }
    }
    node {
      name: "Const_22"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "optimizer_adam_beta1"
            string_val: "0.9"
          }
        }
      }
    }
    node {
      name: "Const_23"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "optimizer_adam_beta2"
            string_val: "0.997"
          }
        }
      }
    }
    node {
      name: "Const_24"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "optimizer_momentum_momentum"
            string_val: "0.9"
          }
        }
      }
    }
    node {
      name: "Const_25"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "optimizer_momentum_nesterov"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_26"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "optimizer_adafactor_beta1"
            string_val: "0.0"
          }
        }
      }
    }
    node {
      name: "Const_27"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "optimizer_adafactor_beta2"
            string_val: "0.999"
          }
        }
      }
    }
    node {
      name: "Const_28"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "optimizer_adafactor_factored"
            string_val: "True"
          }
        }
      }
    }
    node {
      name: "Const_29"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "optimizer_adafactor_decay_type"
            string_val: "pow"
          }
        }
      }
    }
    node {
      name: "Const_30"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "optimizer_adafactor_memory_exponent"
            string_val: "0.8"
          }
        }
      }
    }
    node {
      name: "Const_31"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "optimizer_adafactor_clipping_threshold"
            string_val: "1.0"
          }
        }
      }
    }
    node {
      name: "Const_32"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "optimizer_adafactor_multiply_by_parameter_scale"
            string_val: "True"
          }
        }
      }
    }
    node {
      name: "Const_33"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "optimizer_multistep_accumulate_steps"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_34"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "mixed_precision_optimizer_loss_scaler"
            string_val: "exponential"
          }
        }
      }
    }
    node {
      name: "Const_35"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "mixed_precision_optimizer_init_loss_scale"
            string_val: "32768"
          }
        }
      }
    }
    node {
      name: "Const_36"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "optimizer_zero_grads"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_37"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "weight_decay"
            string_val: "0.0"
          }
        }
      }
    }
    node {
      name: "Const_38"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "weight_noise"
            string_val: "0.0"
          }
        }
      }
    }
    node {
      name: "Const_39"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "learning_rate_schedule"
            string_val: "constant*linear_warmup*rsqrt_decay*rsqrt_hidden_size"
          }
        }
      }
    }
    node {
      name: "Const_40"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "learning_rate_constant"
            string_val: "2.0"
          }
        }
      }
    }
    node {
      name: "Const_41"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "learning_rate_decay_scheme"
            string_val: "noam"
          }
        }
      }
    }
    node {
      name: "Const_42"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "learning_rate_decay_steps"
            string_val: "5000"
          }
        }
      }
    }
    node {
      name: "Const_43"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "learning_rate_decay_staircase"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_44"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "learning_rate_minimum"
            string_val: "None"
          }
        }
      }
    }
    node {
      name: "Const_45"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "learning_rate_decay_rate"
            string_val: "1.0"
          }
        }
      }
    }
    node {
      name: "Const_46"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "learning_rate_warmup_steps"
            string_val: "8000"
          }
        }
      }
    }
    node {
      name: "Const_47"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "learning_rate_cosine_cycle_steps"
            string_val: "250000"
          }
        }
      }
    }
    node {
      name: "Const_48"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "learning_rate"
            string_val: "0.2"
          }
        }
      }
    }
    node {
      name: "Const_49"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "sampling_method"
            string_val: "argmax"
          }
        }
      }
    }
    node {
      name: "Const_50"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "sampling_temp"
            string_val: "1.0"
          }
        }
      }
    }
    node {
      name: "Const_51"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "sampling_keep_top_k"
            string_val: "-1"
          }
        }
      }
    }
    node {
      name: "Const_52"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "factored_logits"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_53"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "multiply_embedding_mode"
            string_val: "sqrt_depth"
          }
        }
      }
    }
    node {
      name: "Const_54"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "moe_hidden_sizes"
            string_val: "2048"
          }
        }
      }
    }
    node {
      name: "Const_55"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "moe_num_experts"
            string_val: "16"
          }
        }
      }
    }
    node {
      name: "Const_56"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "moe_k"
            string_val: "2"
          }
        }
      }
    }
    node {
      name: "Const_57"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "moe_loss_coef"
            string_val: "0.001"
          }
        }
      }
    }
    node {
      name: "Const_58"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "layer_preprocess_sequence"
            string_val: "n"
          }
        }
      }
    }
    node {
      name: "Const_59"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "layer_postprocess_sequence"
            string_val: "da"
          }
        }
      }
    }
    node {
      name: "Const_60"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "layer_prepostprocess_dropout"
            string_val: "0.0"
          }
        }
      }
    }
    node {
      name: "Const_61"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "layer_prepostprocess_dropout_broadcast_dims"
            string_val: ""
          }
        }
      }
    }
    node {
      name: "Const_62"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "symbol_dropout"
            string_val: "0.0"
          }
        }
      }
    }
    node {
      name: "Const_63"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "norm_type"
            string_val: "layer"
          }
        }
      }
    }
    node {
      name: "Const_64"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "norm_epsilon"
            string_val: "1e-06"
          }
        }
      }
    }
    node {
      name: "Const_65"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "vocab_divisor"
            string_val: "1"
          }
        }
      }
    }
    node {
      name: "Const_66"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "min_length"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_67"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "max_length"
            string_val: "256"
          }
        }
      }
    }
    node {
      name: "Const_68"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "pack_dataset"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_69"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "use_custom_ops"
            string_val: "True"
          }
        }
      }
    }
    node {
      name: "Const_70"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "split_targets_chunk_length"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_71"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "split_targets_max_chunks"
            string_val: "100"
          }
        }
      }
    }
    node {
      name: "Const_72"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "split_targets_strided_training"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_73"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "min_length_bucket"
            string_val: "8"
          }
        }
      }
    }
    node {
      name: "Const_74"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "length_bucket_step"
            string_val: "1.1"
          }
        }
      }
    }
    node {
      name: "Const_75"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "eval_drop_long_sequences"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_76"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "eval_run_autoregressive"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_77"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "shared_embedding_and_softmax_weights"
            string_val: "True"
          }
        }
      }
    }
    node {
      name: "Const_78"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "shared_embedding"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_79"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "symbol_modality_num_shards"
            string_val: "16"
          }
        }
      }
    }
    node {
      name: "Const_80"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "bottom"
            string_val: "{}"
          }
        }
      }
    }
    node {
      name: "Const_81"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "loss"
            string_val: "{}"
          }
        }
      }
    }
    node {
      name: "Const_82"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "name"
            string_val: "{}"
          }
        }
      }
    }
    node {
      name: "Const_83"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "top"
            string_val: "{}"
          }
        }
      }
    }
    node {
      name: "Const_84"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "weights_fn"
            string_val: "{}"
          }
        }
      }
    }
    node {
      name: "Const_85"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "max_input_seq_length"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_86"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "max_target_seq_length"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_87"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "split_to_length"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_88"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "video_num_input_frames"
            string_val: "1"
          }
        }
      }
    }
    node {
      name: "Const_89"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "video_num_target_frames"
            string_val: "1"
          }
        }
      }
    }
    node {
      name: "Const_90"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "prepend_mode"
            string_val: "none"
          }
        }
      }
    }
    node {
      name: "Const_91"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "scheduled_sampling_prob"
            string_val: "0.0"
          }
        }
      }
    }
    node {
      name: "Const_92"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "scheduled_sampling_method"
            string_val: "parallel"
          }
        }
      }
    }
    node {
      name: "Const_93"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "scheduled_sampling_warmup_steps"
            string_val: "50000"
          }
        }
      }
    }
    node {
      name: "Const_94"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "scheduled_sampling_gold_mixin_prob"
            string_val: "0.5"
          }
        }
      }
    }
    node {
      name: "Const_95"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "scheduled_sampling_num_passes"
            string_val: "1"
          }
        }
      }
    }
    node {
      name: "Const_96"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "scheduled_sampling_warmup_schedule"
            string_val: "exp"
          }
        }
      }
    }
    node {
      name: "Const_97"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "daisy_chain_variables"
            string_val: "True"
          }
        }
      }
    }
    node {
      name: "Const_98"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "force_full_predict"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_99"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "no_data_parallelism"
            string_val: "True"
          }
        }
      }
    }
    node {
      name: "Const_100"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "activation_dtype"
            string_val: "float32"
          }
        }
      }
    }
    node {
      name: "Const_101"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "weight_dtype"
            string_val: "float32"
          }
        }
      }
    }
    node {
      name: "Const_102"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "pretrained_model_dir"
            string_val: ""
          }
        }
      }
    }
    node {
      name: "Const_103"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "multiproblem_schedule_threshold"
            string_val: "0.5"
          }
        }
      }
    }
    node {
      name: "Const_104"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "multiproblem_per_task_threshold"
            string_val: ""
          }
        }
      }
    }
    node {
      name: "Const_105"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "multiproblem_schedule_max_examples"
            string_val: "10000000.0"
          }
        }
      }
    }
    node {
      name: "Const_106"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "multiproblem_mixing_schedule"
            string_val: "constant"
          }
        }
      }
    }
    node {
      name: "Const_107"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "multiproblem_reweight_label_loss"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_108"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "multiproblem_label_weight"
            string_val: "0.5"
          }
        }
      }
    }
    node {
      name: "Const_109"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "max_relative_position"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_110"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "heads_share_relative_embedding"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_111"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "add_relative_to_values"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_112"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "tpu_enable_host_call"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_113"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "pad_batch"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_114"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "multiproblem_target_eval_only"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_115"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "multiproblem_vocab_size"
            string_val: "-1"
          }
        }
      }
    }
    node {
      name: "Const_116"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "multiproblem_max_input_length"
            string_val: "-1"
          }
        }
      }
    }
    node {
      name: "Const_117"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "multiproblem_max_target_length"
            string_val: "-1"
          }
        }
      }
    }
    node {
      name: "Const_118"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "multiproblem_fixed_train_length"
            string_val: "-1"
          }
        }
      }
    }
    node {
      name: "Const_119"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "warm_start_from_second"
            string_val: ""
          }
        }
      }
    }
    node {
      name: "Const_120"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "area_value_mode"
            string_val: "none"
          }
        }
      }
    }
    node {
      name: "Const_121"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "area_key_mode"
            string_val: "none"
          }
        }
      }
    }
    node {
      name: "Const_122"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "num_area_layers"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_123"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "max_area_width"
            string_val: "1"
          }
        }
      }
    }
    node {
      name: "Const_124"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "max_area_height"
            string_val: "1"
          }
        }
      }
    }
    node {
      name: "Const_125"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "memory_height"
            string_val: "1"
          }
        }
      }
    }
    node {
      name: "Const_126"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "gpu_automatic_mixed_precision"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_127"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "filter_size"
            string_val: "1024"
          }
        }
      }
    }
    node {
      name: "Const_128"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "num_encoder_layers"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_129"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "num_decoder_layers"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_130"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "num_heads"
            string_val: "4"
          }
        }
      }
    }
    node {
      name: "Const_131"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "attention_key_channels"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_132"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "attention_value_channels"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_133"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "ffn_layer"
            string_val: "dense_relu_dense"
          }
        }
      }
    }
    node {
      name: "Const_134"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "parameter_attention_key_channels"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_135"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "parameter_attention_value_channels"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_136"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "attention_dropout"
            string_val: "0.0"
          }
        }
      }
    }
    node {
      name: "Const_137"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "attention_dropout_broadcast_dims"
            string_val: ""
          }
        }
      }
    }
    node {
      name: "Const_138"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "relu_dropout"
            string_val: "0.0"
          }
        }
      }
    }
    node {
      name: "Const_139"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "relu_dropout_broadcast_dims"
            string_val: ""
          }
        }
      }
    }
    node {
      name: "Const_140"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "pos"
            string_val: "timing"
          }
        }
      }
    }
    node {
      name: "Const_141"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "position_features"
            string_val: ""
          }
        }
      }
    }
    node {
      name: "Const_142"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "nbr_decoder_problems"
            string_val: "1"
          }
        }
      }
    }
    node {
      name: "Const_143"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "proximity_bias"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_144"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "causal_decoder_self_attention"
            string_val: "True"
          }
        }
      }
    }
    node {
      name: "Const_145"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "use_pad_remover"
            string_val: "True"
          }
        }
      }
    }
    node {
      name: "Const_146"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "self_attention_type"
            string_val: "dot_product"
          }
        }
      }
    }
    node {
      name: "Const_147"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "conv_first_kernel"
            string_val: "3"
          }
        }
      }
    }
    node {
      name: "Const_148"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "attention_variables_3d"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_149"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "use_target_space_embedding"
            string_val: "True"
          }
        }
      }
    }
    node {
      name: "Const_150"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "moe_overhead_train"
            string_val: "1.0"
          }
        }
      }
    }
    node {
      name: "Const_151"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "moe_overhead_eval"
            string_val: "2.0"
          }
        }
      }
    }
    node {
      name: "Const_152"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "overload_eval_metric_name"
            string_val: ""
          }
        }
      }
    }
    node {
      name: "Const_153"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "unidirectional_encoder"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_154"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "hard_attention_k"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_155"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "gumbel_noise_weight"
            string_val: "0.0"
          }
        }
      }
    }
    node {
      name: "Const_156"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "data_dir"
            string_val: "./data_dir"
          }
        }
      }
    }
    node {
      name: "Const_157"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "mode"
            string_val: "infer"
          }
        }
      }
    }
    node {
      name: "stack"
      op: "Pack"
      input: "Const_3"
      input: "Const_4"
      input: "Const_5"
      input: "Const_6"
      input: "Const_7"
      input: "Const_8"
      input: "Const_9"
      input: "Const_10"
      input: "Const_11"
      input: "Const_12"
      input: "Const_13"
      input: "Const_14"
      input: "Const_15"
      input: "Const_16"
      input: "Const_17"
      input: "Const_18"
      input: "Const_19"
      input: "Const_20"
      input: "Const_21"
      input: "Const_22"
      input: "Const_23"
      input: "Const_24"
      input: "Const_25"
      input: "Const_26"
      input: "Const_27"
      input: "Const_28"
      input: "Const_29"
      input: "Const_30"
      input: "Const_31"
      input: "Const_32"
      input: "Const_33"
      input: "Const_34"
      input: "Const_35"
      input: "Const_36"
      input: "Const_37"
      input: "Const_38"
      input: "Const_39"
      input: "Const_40"
      input: "Const_41"
      input: "Const_42"
      input: "Const_43"
      input: "Const_44"
      input: "Const_45"
      input: "Const_46"
      input: "Const_47"
      input: "Const_48"
      input: "Const_49"
      input: "Const_50"
      input: "Const_51"
      input: "Const_52"
      input: "Const_53"
      input: "Const_54"
      input: "Const_55"
      input: "Const_56"
      input: "Const_57"
      input: "Const_58"
      input: "Const_59"
      input: "Const_60"
      input: "Const_61"
      input: "Const_62"
      input: "Const_63"
      input: "Const_64"
      input: "Const_65"
      input: "Const_66"
      input: "Const_67"
      input: "Const_68"
      input: "Const_69"
      input: "Const_70"
      input: "Const_71"
      input: "Const_72"
      input: "Const_73"
      input: "Const_74"
      input: "Const_75"
      input: "Const_76"
      input: "Const_77"
      input: "Const_78"
      input: "Const_79"
      input: "Const_80"
      input: "Const_81"
      input: "Const_82"
      input: "Const_83"
      input: "Const_84"
      input: "Const_85"
      input: "Const_86"
      input: "Const_87"
      input: "Const_88"
      input: "Const_89"
      input: "Const_90"
      input: "Const_91"
      input: "Const_92"
      input: "Const_93"
      input: "Const_94"
      input: "Const_95"
      input: "Const_96"
      input: "Const_97"
      input: "Const_98"
      input: "Const_99"
      input: "Const_100"
      input: "Const_101"
      input: "Const_102"
      input: "Const_103"
      input: "Const_104"
      input: "Const_105"
      input: "Const_106"
      input: "Const_107"
      input: "Const_108"
      input: "Const_109"
      input: "Const_110"
      input: "Const_111"
      input: "Const_112"
      input: "Const_113"
      input: "Const_114"
      input: "Const_115"
      input: "Const_116"
      input: "Const_117"
      input: "Const_118"
      input: "Const_119"
      input: "Const_120"
      input: "Const_121"
      input: "Const_122"
      input: "Const_123"
      input: "Const_124"
      input: "Const_125"
      input: "Const_126"
      input: "Const_127"
      input: "Const_128"
      input: "Const_129"
      input: "Const_130"
      input: "Const_131"
      input: "Const_132"
      input: "Const_133"
      input: "Const_134"
      input: "Const_135"
      input: "Const_136"
      input: "Const_137"
      input: "Const_138"
      input: "Const_139"
      input: "Const_140"
      input: "Const_141"
      input: "Const_142"
      input: "Const_143"
      input: "Const_144"
      input: "Const_145"
      input: "Const_146"
      input: "Const_147"
      input: "Const_148"
      input: "Const_149"
      input: "Const_150"
      input: "Const_151"
      input: "Const_152"
      input: "Const_153"
      input: "Const_154"
      input: "Const_155"
      input: "Const_156"
      input: "Const_157"
      attr {
        key: "N"
        value {
          i: 155
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 155
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer_hparams/tag"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "transformer_hparams"
          }
        }
      }
    }
    node {
      name: "transformer_hparams/serialized_summary_metadata"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "\n\006\n\004text"
          }
        }
      }
    }
    node {
      name: "transformer_hparams"
      op: "TensorSummaryV2"
      input: "transformer_hparams/tag"
      input: "stack"
      input: "transformer_hparams/serialized_summary_metadata"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "Const_158"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "loss_multiplier"
            string_val: "1.0"
          }
        }
      }
    }
    node {
      name: "Const_159"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "batch_size_multiplier"
            string_val: "1"
          }
        }
      }
    }
    node {
      name: "Const_160"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "stop_at_eos"
            string_val: "1"
          }
        }
      }
    }
    node {
      name: "Const_161"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "modality"
            string_val: "{\'targets\': \'symbol\', \'inputs\': \'symbol\'}"
          }
        }
      }
    }
    node {
      name: "Const_162"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "vocab_size"
            string_val: "{\'targets\': 10069, \'inputs\': 10069}"
          }
        }
      }
    }
    node {
      name: "Const_163"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "input_space_id"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_164"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "target_space_id"
            string_val: "0"
          }
        }
      }
    }
    node {
      name: "Const_165"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "vocabulary"
            string_val: "{\'inputs\': <tensor2tensor.data_generators.text_encoder.TokenTextEncoder object at 0x7fe6b5660ed0>, \'targets\': <tensor2tensor.data_generators.text_encoder.TokenTextEncoder object at 0x7fe6b5660ed0>}"
          }
        }
      }
    }
    node {
      name: "Const_166"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "was_reversed"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "Const_167"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "was_copy"
            string_val: "False"
          }
        }
      }
    }
    node {
      name: "stack_1"
      op: "Pack"
      input: "Const_158"
      input: "Const_159"
      input: "Const_160"
      input: "Const_161"
      input: "Const_162"
      input: "Const_163"
      input: "Const_164"
      input: "Const_165"
      input: "Const_166"
      input: "Const_167"
      attr {
        key: "N"
        value {
          i: 10
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer_problem_hparams/tag"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "transformer_problem_hparams"
          }
        }
      }
    }
    node {
      name: "transformer_problem_hparams/serialized_summary_metadata"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "\n\006\n\004text"
          }
        }
      }
    }
    node {
      name: "transformer_problem_hparams"
      op: "TensorSummaryV2"
      input: "transformer_problem_hparams/tag"
      input: "stack_1"
      input: "transformer_problem_hparams/serialized_summary_metadata"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "input_space_id"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "target_space_id"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/Shape"
      op: "Shape"
      input: "DatasetToSingleElement:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice"
      op: "StridedSlice"
      input: "transformer/Shape"
      input: "transformer/strided_slice/stack"
      input: "transformer/strided_slice/stack_1"
      input: "transformer/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/Shape"
      input: "transformer/strided_slice_1/stack"
      input: "transformer/strided_slice_1/stack_1"
      input: "transformer/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/add/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 100
          }
        }
      }
    }
    node {
      name: "transformer/add"
      op: "Add"
      input: "transformer/strided_slice_1"
      input: "transformer/add/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims"
      op: "ExpandDims"
      input: "DatasetToSingleElement:1"
      input: "transformer/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Shape_1"
      op: "Shape"
      input: "transformer/ExpandDims"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_2"
      op: "StridedSlice"
      input: "transformer/Shape_1"
      input: "transformer/strided_slice_2/stack"
      input: "transformer/strided_slice_2/stack_1"
      input: "transformer/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_3"
      op: "StridedSlice"
      input: "transformer/Shape_1"
      input: "transformer/strided_slice_3/stack"
      input: "transformer/strided_slice_3/stack_1"
      input: "transformer/strided_slice_3/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/mul"
      op: "Mul"
      input: "transformer/strided_slice_2"
      input: "transformer/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/Reshape/shape"
      op: "Pack"
      input: "transformer/mul"
      input: "transformer/strided_slice_3"
      input: "transformer/Reshape/shape/2"
      input: "transformer/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Reshape"
      op: "Reshape"
      input: "transformer/ExpandDims"
      input: "transformer/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Shape_2"
      op: "Shape"
      input: "transformer/Reshape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_4/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_4"
      op: "StridedSlice"
      input: "transformer/Shape_2"
      input: "transformer/strided_slice_4/stack"
      input: "transformer/strided_slice_4/stack_1"
      input: "transformer/strided_slice_4/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/strided_slice_5/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_5"
      op: "StridedSlice"
      input: "transformer/Shape_2"
      input: "transformer/strided_slice_5/stack"
      input: "transformer/strided_slice_5/stack_1"
      input: "transformer/strided_slice_5/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/split/split_dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/split"
      op: "Split"
      input: "transformer/split/split_dim"
      input: "transformer/Reshape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "num_split"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/parallel_0/transformer/Identity"
      op: "Identity"
      input: "transformer/split"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/Squeeze"
      op: "Squeeze"
      input: "transformer/parallel_0/transformer/Identity"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 3
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_0/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "v\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_0/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_0/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_0/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_0/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_0/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_0/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_0/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_0/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_10069_256/shared/weights_0/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_0/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_0"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 630
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_0/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_0"
      input: "transformer/symbol_modality_10069_256/shared/weights_0/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_0/read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_1/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "v\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_1/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_1/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_1/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_1/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_1/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_1/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_1/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_1/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_10069_256/shared/weights_1/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_1/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_1"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 630
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_1/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_1"
      input: "transformer/symbol_modality_10069_256/shared/weights_1/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_1/read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_1"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_2/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "v\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_2/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_2/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_2/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_2/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_2/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_2/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_2/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_2/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_10069_256/shared/weights_2/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_2/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_2"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 630
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_2/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_2"
      input: "transformer/symbol_modality_10069_256/shared/weights_2/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_2/read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_2"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_3/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "v\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_3/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_3/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_3/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_3/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_3/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_3/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_3/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_3/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_10069_256/shared/weights_3/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_3/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_3"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 630
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_3/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_3"
      input: "transformer/symbol_modality_10069_256/shared/weights_3/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_3/read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_3"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_4/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "v\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_4/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_4/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_4/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_4/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_4/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_4/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_4/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_4/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_10069_256/shared/weights_4/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_4/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_4"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 630
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_4/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_4"
      input: "transformer/symbol_modality_10069_256/shared/weights_4/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_4/read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_4"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_5/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "u\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_5/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_5/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_5/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_5/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_5/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_5/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_5/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_5/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_10069_256/shared/weights_5/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_5/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_5"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 629
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_5/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_5"
      input: "transformer/symbol_modality_10069_256/shared/weights_5/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_5/read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_5"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_6/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "u\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_6/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_6/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_6/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_6/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_6/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_6/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_6/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_6/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_10069_256/shared/weights_6/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_6/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_6"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 629
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_6/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_6"
      input: "transformer/symbol_modality_10069_256/shared/weights_6/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_6/read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_6"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_7/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "u\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_7/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_7/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_7/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_7/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_7/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_7/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_7/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_7/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_10069_256/shared/weights_7/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_7/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_7"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 629
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_7/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_7"
      input: "transformer/symbol_modality_10069_256/shared/weights_7/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_7/read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_7"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_8/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "u\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_8/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_8/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_8/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_8/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_8/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_8/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_8/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_8/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_10069_256/shared/weights_8/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_8/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_8"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 629
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_8/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_8"
      input: "transformer/symbol_modality_10069_256/shared/weights_8/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_8/read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_8"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_9/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "u\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_9/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_9/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_9/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_9/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_9/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_9/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_9/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_9/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_10069_256/shared/weights_9/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_9/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_9"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 629
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_9/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_9"
      input: "transformer/symbol_modality_10069_256/shared/weights_9/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_9/read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_9"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_10/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "u\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_10/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_10/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_10/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_10/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_10/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_10/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_10/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_10/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_10069_256/shared/weights_10/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_10/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_10"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 629
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_10/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_10"
      input: "transformer/symbol_modality_10069_256/shared/weights_10/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_10/read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_10"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_11/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "u\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_11/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_11/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_11/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_11/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_11/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_11/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_11/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_11/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_10069_256/shared/weights_11/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_11/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_11"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 629
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_11/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_11"
      input: "transformer/symbol_modality_10069_256/shared/weights_11/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_11/read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_11"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_12/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "u\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_12/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_12/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_12/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_12/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_12/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_12/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_12/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_12/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_10069_256/shared/weights_12/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_12/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_12"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 629
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_12/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_12"
      input: "transformer/symbol_modality_10069_256/shared/weights_12/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_12/read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_12"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_13/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "u\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_13/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_13/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_13/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_13/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_13/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_13/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_13/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_13/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_10069_256/shared/weights_13/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_13/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_13"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 629
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_13/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_13"
      input: "transformer/symbol_modality_10069_256/shared/weights_13/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_13/read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_13"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_14/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "u\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_14/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_14/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_14/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_14/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_14/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_14/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_14/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_14/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_10069_256/shared/weights_14/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_14/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_14"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 629
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_14/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_14"
      input: "transformer/symbol_modality_10069_256/shared/weights_14/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_14/read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_14"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_15/Initializer/random_normal/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "u\002\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_15/Initializer/random_normal/mean"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_15/Initializer/random_normal/stddev"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0625
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_15/Initializer/random_normal/RandomStandardNormal"
      op: "RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_15/Initializer/random_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_15/Initializer/random_normal/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_15/Initializer/random_normal/RandomStandardNormal"
      input: "transformer/symbol_modality_10069_256/shared/weights_15/Initializer/random_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_15/Initializer/random_normal"
      op: "Add"
      input: "transformer/symbol_modality_10069_256/shared/weights_15/Initializer/random_normal/mul"
      input: "transformer/symbol_modality_10069_256/shared/weights_15/Initializer/random_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_15"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 629
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_15/Assign"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_15"
      input: "transformer/symbol_modality_10069_256/shared/weights_15/Initializer/random_normal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/shared/weights_15/read"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_15"
      op: "Identity"
      input: "transformer/symbol_modality_10069_256/shared/weights_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/concat"
      op: "ConcatV2"
      input: "read"
      input: "read_1"
      input: "read_2"
      input: "read_3"
      input: "read_4"
      input: "read_5"
      input: "read_6"
      input: "read_7"
      input: "read_8"
      input: "read_9"
      input: "read_10"
      input: "read_11"
      input: "read_12"
      input: "read_13"
      input: "read_14"
      input: "read_15"
      input: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/concat/axis"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10069
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/convert_gradient_to_tensor_HBc3xYw22Mw"
      op: "convert_gradient_to_tensor_HBc3xYw22Mw"
      input: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/concat"
      attr {
        key: "_disable_call_shape_inference"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10069
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/GatherV2"
      op: "GatherV2"
      input: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/convert_gradient_to_tensor_HBc3xYw22Mw"
      input: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/Squeeze"
      input: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 16.0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/GatherV2"
      input: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/NotEqual/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/NotEqual"
      op: "NotEqual"
      input: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/Squeeze"
      input: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/NotEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/Cast"
      op: "Cast"
      input: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/NotEqual"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/ExpandDims"
      op: "ExpandDims"
      input: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/Cast"
      input: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul_1"
      op: "Mul"
      input: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul"
      input: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/ExpandDims"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/Shape"
      op: "Shape"
      input: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/Shape"
      input: "transformer/body/parallel_0/body/strided_slice/stack"
      input: "transformer/body/parallel_0/body/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/Shape"
      input: "transformer/body/parallel_0/body/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/strided_slice_1"
      input: "transformer/body/parallel_0/body/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/strided_slice"
      input: "transformer/body/parallel_0/body/mul"
      input: "transformer/body/parallel_0/body/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/Reshape"
      op: "Reshape"
      input: "transformer/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul_1"
      input: "transformer/body/parallel_0/body/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/embedding_to_padding/Abs"
      op: "Abs"
      input: "transformer/body/parallel_0/body/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/embedding_to_padding/Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/embedding_to_padding/Sum"
      op: "Sum"
      input: "transformer/body/parallel_0/body/embedding_to_padding/Abs"
      input: "transformer/body/parallel_0/body/embedding_to_padding/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/embedding_to_padding/Equal/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/embedding_to_padding/Equal"
      op: "Equal"
      input: "transformer/body/parallel_0/body/embedding_to_padding/Sum"
      input: "transformer/body/parallel_0/body/embedding_to_padding/Equal/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/embedding_to_padding/ToFloat"
      op: "Cast"
      input: "transformer/body/parallel_0/body/embedding_to_padding/Equal"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/attention_bias_ignore_padding/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -1000000000.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/attention_bias_ignore_padding/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/embedding_to_padding/ToFloat"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims"
      op: "ExpandDims"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/mul"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims_1"
      op: "ExpandDims"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: " \000\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.14433756470680237
          }
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.14433756470680237
          }
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/max"
      input: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 32
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/Assign"
      op: "Assign"
      input: "transformer/body/target_space_embedding/kernel"
      input: "transformer/body/target_space_embedding/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/target_space_embedding/kernel/read"
      op: "Identity"
      input: "transformer/body/target_space_embedding/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_16"
      op: "Identity"
      input: "transformer/body/target_space_embedding/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/target_space_embedding/convert_gradient_to_tensor_HBc3xYw22Mw"
      op: "convert_gradient_to_tensor_HBc3xYw22Mw"
      input: "read_16"
      attr {
        key: "_disable_call_shape_inference"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/target_space_embedding/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/target_space_embedding/GatherV2"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/target_space_embedding/convert_gradient_to_tensor_HBc3xYw22Mw"
      input: "target_space_id"
      input: "transformer/body/parallel_0/body/target_space_embedding/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000\377\377\377\377"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/target_space_embedding/GatherV2"
      input: "transformer/body/parallel_0/body/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/Reshape"
      input: "transformer/body/parallel_0/body/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/Shape"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice/stack"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/Shape"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/Shape_1"
      op: "Shape"
      input: "transformer/body/parallel_0/body/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_2"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/Shape_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_2/stack"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_2/stack_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_3/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_3"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/Shape_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_3/stack"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_3/stack_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_3/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range"
      op: "Range"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range/start"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range/delta"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/add/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/add/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ToFloat"
      op: "Cast"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/add"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ToFloat_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 128
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ToFloat_1"
      op: "Cast"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ToFloat_1/x"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/sub/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/sub"
      op: "Sub"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ToFloat_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/sub/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Maximum/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Maximum"
      op: "Maximum"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/sub"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Maximum/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/truediv/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.21034049987793
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/truediv"
      op: "RealDiv"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/truediv/x"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Maximum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range_1/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range_1/limit"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 128
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range_1/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range_1"
      op: "Range"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range_1/start"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range_1/limit"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range_1/delta"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ToFloat_2"
      op: "Cast"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/range_1"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Neg"
      op: "Neg"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/truediv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ToFloat_2"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Neg"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Exp"
      op: "Exp"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul_1/x"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Exp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ExpandDims"
      op: "ExpandDims"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ToFloat"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ExpandDims_1"
      op: "ExpandDims"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul_2"
      op: "Mul"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ExpandDims"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Sin"
      op: "Sin"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Cos"
      op: "Cos"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/mul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Sin"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Cos"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/FloorMod/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/FloorMod/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/FloorMod"
      op: "FloorMod"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/FloorMod/x"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/FloorMod/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad/paddings/1/0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad/paddings/1"
      op: "Pack"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad/paddings/1/0"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/FloorMod"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad/paddings/0_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad/paddings"
      op: "Pack"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad/paddings/0_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad/paddings/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad"
      op: "Pad"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/concat"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad/paddings"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Reshape/shape/0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Reshape/shape/0"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/strided_slice_1"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Pad"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/add_timing_signal_1d/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/add"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/get_timing_signal_1d/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/Less"
      op: "Less"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims_1"
      input: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/Less/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/Cast"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/Less"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/Squeeze"
      op: "Squeeze"
      input: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/Cast"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 1
            i: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/sub/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/sub"
      op: "Sub"
      input: "transformer/body/parallel_0/body/encoder/sub/x"
      input: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/Squeeze"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/attention_bias_to_padding/Squeeze"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999717180685e-10
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Less"
      op: "Less"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Reshape"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Less/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Where"
      op: "Where"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Less"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/ToInt32"
      op: "Cast"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Where"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/Shape"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_17"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_18"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/SquaredDifference"
      op: "SquaredDifference"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/SquaredDifference"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/sub"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul"
      input: "read_17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul_1"
      input: "read_18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_19"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/free"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_19"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_20"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/free"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_20"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_21"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/free"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_21"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/q/Tensordot"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/k/Tensordot"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/v/Tensordot"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.125
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul"
      op: "BatchMatMulV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "adj_y"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention_weights"
      op: "Softmax"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention_weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_2"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\003\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pow/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pow"
      op: "Pow"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pow/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/FloorMod/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/FloorMod/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/FloorMod"
      op: "FloorMod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/FloorMod/x"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/FloorMod/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/3/0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/3"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/3/0"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/FloorMod"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/0_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/1_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/2_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/0_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/1_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/2_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad"
      op: "Pad"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pow"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad/paddings"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 6
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape/4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape/3"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape/4"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Pad"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Max/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Max"
      op: "Max"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Max/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention/tag"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention"
      op: "ImageSummary"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention/tag"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/Max"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "max_images"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul_1"
      op: "BatchMatMulV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_22"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/free"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_22"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_postprocess/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot"
      input: "transformer/body/parallel_0/body/add_timing_signal_1d/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_23"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_24"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/SquaredDifference"
      op: "SquaredDifference"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/SquaredDifference"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/sub"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/mul"
      input: "read_23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/mul_1"
      input: "read_24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/concat/values_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/concat/values_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/concat/values_0"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/concat/values_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/remove/GatherNd"
      op: "GatherNd"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Reshape"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/ToInt32"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/ExpandDims"
      op: "ExpandDims"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/remove/GatherNd"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\004\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.06846532225608826
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.06846532225608826
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 1024
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "read_25"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/bias/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1024
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/bias/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/bias/Initializer/zeros"
      op: "Fill"
      input: "transformer/body/encoder/layer_0/ffn/conv1/bias/Initializer/zeros/shape_as_tensor"
      input: "transformer/body/encoder/layer_0/ffn/conv1/bias/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1024
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv1/bias"
      input: "transformer/body/encoder/layer_0/ffn/conv1/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv1/bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/conv1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "read_26"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/conv1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/free"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/ExpandDims"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/GatherV2_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/ExpandDims"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_25"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\004\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1024
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/BiasAdd"
      op: "BiasAdd"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Tensordot"
      input: "read_26"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Relu"
      op: "Relu"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\004\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.06846532225608826
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.06846532225608826
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1024
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_27"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv2/bias"
      input: "transformer/body/encoder/layer_0/ffn/conv2/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_0/ffn/conv2/bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/conv2/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_28"
      op: "Identity"
      input: "transformer/body/encoder/layer_0/ffn/conv2/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/free"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/GatherV2_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv1/Relu"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_27"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\004\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/BiasAdd"
      op: "BiasAdd"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/Tensordot"
      input: "read_28"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Squeeze"
      op: "Squeeze"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/conv2/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Squeeze"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/ScatterNd"
      op: "ScatterNd"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/ToInt32"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Squeeze"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Reshape_1/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Reshape_1/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Reshape_1/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/pad_reduce/restore/ScatterNd"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_postprocess/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/Reshape_1"
      input: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_29"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_30"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/SquaredDifference"
      op: "SquaredDifference"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/SquaredDifference"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/sub"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul"
      input: "read_29"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul_1"
      input: "read_30"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_31"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/free"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_31"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_32"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/free"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_32"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_33"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/free"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_33"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/q/Tensordot"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/k/Tensordot"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/v/Tensordot"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.125
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul"
      op: "BatchMatMulV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "adj_y"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention_weights"
      op: "Softmax"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention_weights"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_2"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\003\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pow/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.20000000298023224
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pow"
      op: "Pow"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pow/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/FloorMod/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/FloorMod/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/FloorMod"
      op: "FloorMod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/FloorMod/x"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/FloorMod/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/3/0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/3"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/3/0"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/FloorMod"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/0_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/1_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/2_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/0_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/1_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/2_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad"
      op: "Pad"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pow"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad/paddings"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 6
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape/4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/strided_slice_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape/3"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape/4"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Pad"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Max/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Max"
      op: "Max"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/split_last_dimension/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Max/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention/tag"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention"
      op: "ImageSummary"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention/tag"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/Max"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "max_images"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul_1"
      op: "BatchMatMulV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_34"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/free"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_34"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_postprocess/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot"
      input: "transformer/body/parallel_0/body/encoder/layer_0/ffn/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_35"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_36"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/SquaredDifference"
      op: "SquaredDifference"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/SquaredDifference"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/sub"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/mul"
      input: "read_35"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/mul_1"
      input: "read_36"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/concat/values_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/concat/values_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/concat/values_0"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/concat/values_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/remove/GatherNd"
      op: "GatherNd"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Reshape"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/ToInt32"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/ExpandDims"
      op: "ExpandDims"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/remove/GatherNd"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\004\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.06846532225608826
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.06846532225608826
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 1024
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "read_37"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/bias/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1024
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/bias/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/bias/Initializer/zeros"
      op: "Fill"
      input: "transformer/body/encoder/layer_1/ffn/conv1/bias/Initializer/zeros/shape_as_tensor"
      input: "transformer/body/encoder/layer_1/ffn/conv1/bias/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1024
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv1/bias"
      input: "transformer/body/encoder/layer_1/ffn/conv1/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv1/bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/conv1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "read_38"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/conv1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/free"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/ExpandDims"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/GatherV2_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/ExpandDims"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_37"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\004\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1024
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/BiasAdd"
      op: "BiasAdd"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Tensordot"
      input: "read_38"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Relu"
      op: "Relu"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\004\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.06846532225608826
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.06846532225608826
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/max"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1024
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/kernel/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_39"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv2/bias"
      input: "transformer/body/encoder/layer_1/ffn/conv2/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_1/ffn/conv2/bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/conv2/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_40"
      op: "Identity"
      input: "transformer/body/encoder/layer_1/ffn/conv2/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/free"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/GatherV2_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/free"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/axes"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Prod"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv1/Relu"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_39"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\004\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/transpose_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/GatherV2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/Const_2"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/MatMul"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/BiasAdd"
      op: "BiasAdd"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/Tensordot"
      input: "read_40"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Squeeze"
      op: "Squeeze"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/conv2/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Squeeze"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/concat"
      op: "ConcatV2"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/ScatterNd"
      op: "ScatterNd"
      input: "transformer/body/parallel_0/body/encoder/pad_reduce/get_ids/ToInt32"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Squeeze"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Reshape_1/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Reshape_1/shape"
      op: "Pack"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/strided_slice_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Reshape_1/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Reshape_1"
      op: "Reshape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/pad_reduce/restore/ScatterNd"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_postprocess/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/Reshape_1"
      input: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_41"
      op: "Identity"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_42"
      op: "Identity"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/SquaredDifference"
      op: "SquaredDifference"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/SquaredDifference"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/body/parallel_0/body/encoder/layer_1/ffn/layer_postprocess/add"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/sub"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/mul"
      input: "read_41"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/mul_1"
      input: "read_42"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/add_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/add_1"
      op: "Add"
      input: "transformer/add"
      input: "transformer/add_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/range/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/range/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/range"
      op: "Range"
      input: "transformer/get_timing_signal_1d/range/start"
      input: "transformer/add_1"
      input: "transformer/get_timing_signal_1d/range/delta"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/add/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/add"
      op: "Add"
      input: "transformer/get_timing_signal_1d/range"
      input: "transformer/get_timing_signal_1d/add/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/ToFloat"
      op: "Cast"
      input: "transformer/get_timing_signal_1d/add"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/ToFloat_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 128
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/ToFloat_1"
      op: "Cast"
      input: "transformer/get_timing_signal_1d/ToFloat_1/x"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/sub/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/sub"
      op: "Sub"
      input: "transformer/get_timing_signal_1d/ToFloat_1"
      input: "transformer/get_timing_signal_1d/sub/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Maximum/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Maximum"
      op: "Maximum"
      input: "transformer/get_timing_signal_1d/sub"
      input: "transformer/get_timing_signal_1d/Maximum/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/truediv/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.21034049987793
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/truediv"
      op: "RealDiv"
      input: "transformer/get_timing_signal_1d/truediv/x"
      input: "transformer/get_timing_signal_1d/Maximum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/range_1/start"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/range_1/limit"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 128
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/range_1/delta"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/range_1"
      op: "Range"
      input: "transformer/get_timing_signal_1d/range_1/start"
      input: "transformer/get_timing_signal_1d/range_1/limit"
      input: "transformer/get_timing_signal_1d/range_1/delta"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/ToFloat_2"
      op: "Cast"
      input: "transformer/get_timing_signal_1d/range_1"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Neg"
      op: "Neg"
      input: "transformer/get_timing_signal_1d/truediv"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/mul"
      op: "Mul"
      input: "transformer/get_timing_signal_1d/ToFloat_2"
      input: "transformer/get_timing_signal_1d/Neg"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Exp"
      op: "Exp"
      input: "transformer/get_timing_signal_1d/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/mul_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/mul_1"
      op: "Mul"
      input: "transformer/get_timing_signal_1d/mul_1/x"
      input: "transformer/get_timing_signal_1d/Exp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/ExpandDims"
      op: "ExpandDims"
      input: "transformer/get_timing_signal_1d/ToFloat"
      input: "transformer/get_timing_signal_1d/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/ExpandDims_1"
      op: "ExpandDims"
      input: "transformer/get_timing_signal_1d/mul_1"
      input: "transformer/get_timing_signal_1d/ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/mul_2"
      op: "Mul"
      input: "transformer/get_timing_signal_1d/ExpandDims"
      input: "transformer/get_timing_signal_1d/ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Sin"
      op: "Sin"
      input: "transformer/get_timing_signal_1d/mul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Cos"
      op: "Cos"
      input: "transformer/get_timing_signal_1d/mul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 128
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/concat"
      op: "ConcatV2"
      input: "transformer/get_timing_signal_1d/Sin"
      input: "transformer/get_timing_signal_1d/Cos"
      input: "transformer/get_timing_signal_1d/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/FloorMod/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/FloorMod/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/FloorMod"
      op: "FloorMod"
      input: "transformer/get_timing_signal_1d/FloorMod/x"
      input: "transformer/get_timing_signal_1d/FloorMod/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Pad/paddings/1/0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Pad/paddings/1"
      op: "Pack"
      input: "transformer/get_timing_signal_1d/Pad/paddings/1/0"
      input: "transformer/get_timing_signal_1d/FloorMod"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Pad/paddings/0_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Pad/paddings"
      op: "Pack"
      input: "transformer/get_timing_signal_1d/Pad/paddings/0_1"
      input: "transformer/get_timing_signal_1d/Pad/paddings/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Pad"
      op: "Pad"
      input: "transformer/get_timing_signal_1d/concat"
      input: "transformer/get_timing_signal_1d/Pad/paddings"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Reshape/shape/0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Reshape/shape"
      op: "Pack"
      input: "transformer/get_timing_signal_1d/Reshape/shape/0"
      input: "transformer/add_1"
      input: "transformer/get_timing_signal_1d/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/get_timing_signal_1d/Reshape"
      op: "Reshape"
      input: "transformer/get_timing_signal_1d/Pad"
      input: "transformer/get_timing_signal_1d/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/ones/mul"
      op: "Mul"
      input: "transformer/add"
      input: "transformer/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/ones/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/ones/Less"
      op: "Less"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/ones/mul"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/ones/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/ones/packed"
      op: "Pack"
      input: "transformer/add"
      input: "transformer/add"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/ones/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/ones"
      op: "Fill"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/ones/packed"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/ones/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/Cast/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/Cast"
      op: "Cast"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/Cast/x"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/Cast_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/Cast_1"
      op: "Cast"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/Cast_1/x"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/MatrixBandPart"
      op: "MatrixBandPart"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/ones"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/Cast"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/Cast_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/Reshape/shape/0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/Reshape/shape/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/Reshape/shape"
      op: "Pack"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/Reshape/shape/0"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/Reshape/shape/1"
      input: "transformer/add"
      input: "transformer/add"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/Reshape"
      op: "Reshape"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/MatrixBandPart"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/sub/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/sub"
      op: "Sub"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/sub/x"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/mul/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -1000000000.0
          }
        }
      }
    }
    node {
      name: "transformer/attention_bias_lower_triangle/attention_bias_local/mul"
      op: "Mul"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/mul/x"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Shape_3"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_6/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_6/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_6/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_6"
      op: "StridedSlice"
      input: "transformer/Shape_3"
      input: "transformer/strided_slice_6/stack"
      input: "transformer/strided_slice_6/stack_1"
      input: "transformer/strided_slice_6/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/strided_slice_7/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_7/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_7/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_7"
      op: "StridedSlice"
      input: "transformer/Shape_3"
      input: "transformer/strided_slice_7/stack"
      input: "transformer/strided_slice_7/stack_1"
      input: "transformer/strided_slice_7/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/zeros/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/zeros/mul"
      op: "Mul"
      input: "transformer/strided_slice_6"
      input: "transformer/zeros/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros/mul_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros/mul_1"
      op: "Mul"
      input: "transformer/zeros/mul"
      input: "transformer/zeros/mul_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros/mul_2"
      op: "Mul"
      input: "transformer/zeros/mul_1"
      input: "transformer/strided_slice_7"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node {
      name: "transformer/zeros/Less"
      op: "Less"
      input: "transformer/zeros/mul_2"
      input: "transformer/zeros/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros/packed/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/zeros/packed/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros/packed"
      op: "Pack"
      input: "transformer/strided_slice_6"
      input: "transformer/zeros/packed/1"
      input: "transformer/zeros/packed/2"
      input: "transformer/strided_slice_7"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/zeros"
      op: "Fill"
      input: "transformer/zeros/packed"
      input: "transformer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_1/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/zeros_1/mul"
      op: "Mul"
      input: "transformer/strided_slice_6"
      input: "transformer/zeros_1/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_1/mul_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_1/mul_1"
      op: "Mul"
      input: "transformer/zeros_1/mul"
      input: "transformer/zeros_1/mul_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_1/mul_2"
      op: "Mul"
      input: "transformer/zeros_1/mul_1"
      input: "transformer/strided_slice_7"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_1/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node {
      name: "transformer/zeros_1/Less"
      op: "Less"
      input: "transformer/zeros_1/mul_2"
      input: "transformer/zeros_1/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_1/packed/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/zeros_1/packed/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_1/packed"
      op: "Pack"
      input: "transformer/strided_slice_6"
      input: "transformer/zeros_1/packed/1"
      input: "transformer/zeros_1/packed/2"
      input: "transformer/strided_slice_7"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_1"
      op: "Fill"
      input: "transformer/zeros_1/packed"
      input: "transformer/zeros_1/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Shape_4"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_8/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_8/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_8/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_8"
      op: "StridedSlice"
      input: "transformer/Shape_4"
      input: "transformer/strided_slice_8/stack"
      input: "transformer/strided_slice_8/stack_1"
      input: "transformer/strided_slice_8/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/strided_slice_9/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_9/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_9/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_9"
      op: "StridedSlice"
      input: "transformer/Shape_4"
      input: "transformer/strided_slice_9/stack"
      input: "transformer/strided_slice_9/stack_1"
      input: "transformer/strided_slice_9/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/zeros_2/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_2/mul"
      op: "Mul"
      input: "transformer/strided_slice_8"
      input: "transformer/zeros_2/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_2/mul_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/zeros_2/mul_1"
      op: "Mul"
      input: "transformer/zeros_2/mul"
      input: "transformer/zeros_2/mul_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_2/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node {
      name: "transformer/zeros_2/Less"
      op: "Less"
      input: "transformer/zeros_2/mul_1"
      input: "transformer/zeros_2/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_2/packed/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_2/packed/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/zeros_2/packed"
      op: "Pack"
      input: "transformer/strided_slice_8"
      input: "transformer/zeros_2/packed/1"
      input: "transformer/zeros_2/packed/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_2/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_2"
      op: "Fill"
      input: "transformer/zeros_2/packed"
      input: "transformer/zeros_2/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/split_heads/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/zeros_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/split_heads/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/split_heads/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/split_heads/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/split_heads/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/split_heads/split_last_dimension/Shape"
      input: "transformer/split_heads/split_last_dimension/strided_slice/stack"
      input: "transformer/split_heads/split_last_dimension/strided_slice/stack_1"
      input: "transformer/split_heads/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/split_heads/split_last_dimension/Reshape/shape/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/split_heads/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/split_heads/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/split_heads/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/split_heads/split_last_dimension/strided_slice"
      input: "transformer/split_heads/split_last_dimension/Reshape/shape/1"
      input: "transformer/split_heads/split_last_dimension/Reshape/shape/2"
      input: "transformer/split_heads/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/split_heads/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/zeros_2"
      input: "transformer/split_heads/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/split_heads/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/split_heads/transpose"
      op: "Transpose"
      input: "transformer/split_heads/split_last_dimension/Reshape"
      input: "transformer/split_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_3/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_3/mul"
      op: "Mul"
      input: "transformer/strided_slice_8"
      input: "transformer/zeros_3/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_3/mul_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/zeros_3/mul_1"
      op: "Mul"
      input: "transformer/zeros_3/mul"
      input: "transformer/zeros_3/mul_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_3/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node {
      name: "transformer/zeros_3/Less"
      op: "Less"
      input: "transformer/zeros_3/mul_1"
      input: "transformer/zeros_3/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_3/packed/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_3/packed/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/zeros_3/packed"
      op: "Pack"
      input: "transformer/strided_slice_8"
      input: "transformer/zeros_3/packed/1"
      input: "transformer/zeros_3/packed/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_3/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_3"
      op: "Fill"
      input: "transformer/zeros_3/packed"
      input: "transformer/zeros_3/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_1/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/zeros_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_1/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_1/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_1/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_1/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/split_heads_1/split_last_dimension/Shape"
      input: "transformer/split_heads_1/split_last_dimension/strided_slice/stack"
      input: "transformer/split_heads_1/split_last_dimension/strided_slice/stack_1"
      input: "transformer/split_heads_1/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/split_heads_1/split_last_dimension/Reshape/shape/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_1/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_1/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_1/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/split_heads_1/split_last_dimension/strided_slice"
      input: "transformer/split_heads_1/split_last_dimension/Reshape/shape/1"
      input: "transformer/split_heads_1/split_last_dimension/Reshape/shape/2"
      input: "transformer/split_heads_1/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_1/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/zeros_3"
      input: "transformer/split_heads_1/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_1/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_1/transpose"
      op: "Transpose"
      input: "transformer/split_heads_1/split_last_dimension/Reshape"
      input: "transformer/split_heads_1/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_4/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_4/mul"
      op: "Mul"
      input: "transformer/strided_slice_8"
      input: "transformer/zeros_4/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_4/mul_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/zeros_4/mul_1"
      op: "Mul"
      input: "transformer/zeros_4/mul"
      input: "transformer/zeros_4/mul_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_4/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node {
      name: "transformer/zeros_4/Less"
      op: "Less"
      input: "transformer/zeros_4/mul_1"
      input: "transformer/zeros_4/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_4/packed/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_4/packed/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/zeros_4/packed"
      op: "Pack"
      input: "transformer/strided_slice_8"
      input: "transformer/zeros_4/packed/1"
      input: "transformer/zeros_4/packed/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_4/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_4"
      op: "Fill"
      input: "transformer/zeros_4/packed"
      input: "transformer/zeros_4/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_2/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/zeros_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_2/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_2/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_2/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_2/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/split_heads_2/split_last_dimension/Shape"
      input: "transformer/split_heads_2/split_last_dimension/strided_slice/stack"
      input: "transformer/split_heads_2/split_last_dimension/strided_slice/stack_1"
      input: "transformer/split_heads_2/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/split_heads_2/split_last_dimension/Reshape/shape/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_2/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_2/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_2/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/split_heads_2/split_last_dimension/strided_slice"
      input: "transformer/split_heads_2/split_last_dimension/Reshape/shape/1"
      input: "transformer/split_heads_2/split_last_dimension/Reshape/shape/2"
      input: "transformer/split_heads_2/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_2/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/zeros_4"
      input: "transformer/split_heads_2/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_2/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_2/transpose"
      op: "Transpose"
      input: "transformer/split_heads_2/split_last_dimension/Reshape"
      input: "transformer/split_heads_2/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_5/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_5/mul"
      op: "Mul"
      input: "transformer/strided_slice_8"
      input: "transformer/zeros_5/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_5/mul_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/zeros_5/mul_1"
      op: "Mul"
      input: "transformer/zeros_5/mul"
      input: "transformer/zeros_5/mul_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_5/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node {
      name: "transformer/zeros_5/Less"
      op: "Less"
      input: "transformer/zeros_5/mul_1"
      input: "transformer/zeros_5/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_5/packed/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_5/packed/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/zeros_5/packed"
      op: "Pack"
      input: "transformer/strided_slice_8"
      input: "transformer/zeros_5/packed/1"
      input: "transformer/zeros_5/packed/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_5/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_5"
      op: "Fill"
      input: "transformer/zeros_5/packed"
      input: "transformer/zeros_5/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_3/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/zeros_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_3/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_3/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_3/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_3/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/split_heads_3/split_last_dimension/Shape"
      input: "transformer/split_heads_3/split_last_dimension/strided_slice/stack"
      input: "transformer/split_heads_3/split_last_dimension/strided_slice/stack_1"
      input: "transformer/split_heads_3/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/split_heads_3/split_last_dimension/Reshape/shape/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_3/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_3/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_3/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/split_heads_3/split_last_dimension/strided_slice"
      input: "transformer/split_heads_3/split_last_dimension/Reshape/shape/1"
      input: "transformer/split_heads_3/split_last_dimension/Reshape/shape/2"
      input: "transformer/split_heads_3/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_3/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/zeros_5"
      input: "transformer/split_heads_3/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_3/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/split_heads_3/transpose"
      op: "Transpose"
      input: "transformer/split_heads_3/split_last_dimension/Reshape"
      input: "transformer/split_heads_3/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/free"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/free"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/GatherV2"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/GatherV2_1"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/free"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Prod"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/transpose"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/transpose_1"
      op: "Transpose"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/read"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/transpose_1"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Reshape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/GatherV2"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/Const_2"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot"
      op: "Reshape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/MatMul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/Tensordot"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/transpose"
      op: "Transpose"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/free"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/free"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/GatherV2"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/GatherV2_1"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/free"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Prod"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/transpose"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/transpose_1"
      op: "Transpose"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/read"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/transpose_1"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Reshape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/GatherV2"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/Const_2"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot"
      op: "Reshape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/MatMul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/Tensordot"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/transpose"
      op: "Transpose"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/free"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/free"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/GatherV2"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/GatherV2_1"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/free"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Prod"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/transpose"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/transpose_1"
      op: "Transpose"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/read"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/transpose_1"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Reshape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/GatherV2"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/Const_2"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot"
      op: "Reshape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/MatMul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/Tensordot"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/transpose"
      op: "Transpose"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/axes"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/free"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Shape"
      op: "Shape"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/GatherV2/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/free"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/GatherV2_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Prod"
      op: "Prod"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/GatherV2"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/GatherV2_1"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/free"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/stack"
      op: "Pack"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Prod"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/transpose"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/transpose_1"
      op: "Transpose"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/read"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/transpose_1"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Reshape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat_1/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/GatherV2"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/Const_2"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot"
      op: "Reshape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/MatMul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/Tensordot"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/transpose/perm"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/transpose"
      op: "Transpose"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ones/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node {
      name: "transformer/ones/Less"
      op: "Less"
      input: "transformer/strided_slice_8"
      input: "transformer/ones/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/ones/packed"
      op: "Pack"
      input: "transformer/strided_slice_8"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ones/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ones"
      op: "Fill"
      input: "transformer/ones/packed"
      input: "transformer/ones/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/mul_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/mul_1"
      op: "Mul"
      input: "transformer/mul_1/x"
      input: "transformer/ones"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Shape_5"
      op: "Shape"
      input: "transformer/mul_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_10/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_10/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_10/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_10"
      op: "StridedSlice"
      input: "transformer/Shape_5"
      input: "transformer/strided_slice_10/stack"
      input: "transformer/strided_slice_10/stack_1"
      input: "transformer/strided_slice_10/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1
              }
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\200\226\030\313\200\226\030\313\200\226\030\313"
          }
        }
      }
    }
    node {
      name: "transformer/Tile/multiples/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/Tile/multiples"
      op: "Pack"
      input: "transformer/strided_slice_10"
      input: "transformer/Tile/multiples/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile"
      op: "Tile"
      input: "transformer/Const_1"
      input: "transformer/Tile/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_1"
      op: "ExpandDims"
      input: "transformer/mul_1"
      input: "transformer/ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_1/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_1"
      op: "Tile"
      input: "transformer/ExpandDims_1"
      input: "transformer/Tile_1/multiples"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_2/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_2"
      op: "ExpandDims"
      input: "transformer/Tile_1"
      input: "transformer/ExpandDims_2/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_3/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_3"
      op: "ExpandDims"
      input: "transformer/zeros"
      input: "transformer/ExpandDims_3/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_2/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 5
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_2"
      op: "Tile"
      input: "transformer/ExpandDims_3"
      input: "transformer/Tile_2/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_4/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_4"
      op: "ExpandDims"
      input: "transformer/zeros_1"
      input: "transformer/ExpandDims_4/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_3/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 5
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_3"
      op: "Tile"
      input: "transformer/ExpandDims_4"
      input: "transformer/Tile_3/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_5/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_5"
      op: "ExpandDims"
      input: "transformer/body/parallel_0/body/attention_bias_ignore_padding/ExpandDims_1"
      input: "transformer/ExpandDims_5/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_4/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 5
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_4"
      op: "Tile"
      input: "transformer/ExpandDims_5"
      input: "transformer/Tile_4/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_6/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_6"
      op: "ExpandDims"
      input: "transformer/body/parallel_0/body/encoder/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/ExpandDims_6/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_5/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_5"
      op: "Tile"
      input: "transformer/ExpandDims_6"
      input: "transformer/Tile_5/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_7/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_7"
      op: "ExpandDims"
      input: "transformer/split_heads/transpose"
      input: "transformer/ExpandDims_7/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_6/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 5
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_6"
      op: "Tile"
      input: "transformer/ExpandDims_7"
      input: "transformer/Tile_6/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_8/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_8"
      op: "ExpandDims"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/transpose"
      input: "transformer/ExpandDims_8/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_7/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 5
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_7"
      op: "Tile"
      input: "transformer/ExpandDims_8"
      input: "transformer/Tile_7/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_9/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_9"
      op: "ExpandDims"
      input: "transformer/split_heads_1/transpose"
      input: "transformer/ExpandDims_9/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_8/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 5
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_8"
      op: "Tile"
      input: "transformer/ExpandDims_9"
      input: "transformer/Tile_8/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_10/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_10"
      op: "ExpandDims"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads_1/transpose"
      input: "transformer/ExpandDims_10/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_9/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 5
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_9"
      op: "Tile"
      input: "transformer/ExpandDims_10"
      input: "transformer/Tile_9/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_11/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_11"
      op: "ExpandDims"
      input: "transformer/split_heads_2/transpose"
      input: "transformer/ExpandDims_11/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_10/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 5
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_10"
      op: "Tile"
      input: "transformer/ExpandDims_11"
      input: "transformer/Tile_10/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_12/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_12"
      op: "ExpandDims"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/transpose"
      input: "transformer/ExpandDims_12/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_11/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 5
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_11"
      op: "Tile"
      input: "transformer/ExpandDims_12"
      input: "transformer/Tile_11/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_13/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_13"
      op: "ExpandDims"
      input: "transformer/split_heads_3/transpose"
      input: "transformer/ExpandDims_13/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_12/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 5
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_12"
      op: "Tile"
      input: "transformer/ExpandDims_13"
      input: "transformer/Tile_12/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_14/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/ExpandDims_14"
      op: "ExpandDims"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads_1/transpose"
      input: "transformer/ExpandDims_14/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Tile_13/multiples"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 5
              }
            }
            tensor_content: "\001\000\000\000\004\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/Tile_13"
      op: "Tile"
      input: "transformer/ExpandDims_14"
      input: "transformer/Tile_13/multiples"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Shape_6"
      op: "Shape"
      input: "transformer/ExpandDims_2"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_11/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_11/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_11/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_11"
      op: "StridedSlice"
      input: "transformer/Shape_6"
      input: "transformer/strided_slice_11/stack"
      input: "transformer/strided_slice_11/stack_1"
      input: "transformer/strided_slice_11/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/zeros_6/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/zeros_6/mul"
      op: "Mul"
      input: "transformer/strided_slice_11"
      input: "transformer/zeros_6/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_6/mul_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/zeros_6/mul_1"
      op: "Mul"
      input: "transformer/zeros_6/mul"
      input: "transformer/zeros_6/mul_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_6/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node {
      name: "transformer/zeros_6/Less"
      op: "Less"
      input: "transformer/zeros_6/mul_1"
      input: "transformer/zeros_6/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_6/packed/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/zeros_6/packed/2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/zeros_6/packed"
      op: "Pack"
      input: "transformer/strided_slice_11"
      input: "transformer/zeros_6/packed/1"
      input: "transformer/zeros_6/packed/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_6/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/zeros_6"
      op: "Fill"
      input: "transformer/zeros_6/packed"
      input: "transformer/zeros_6/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ones_1/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/ones_1/mul"
      op: "Mul"
      input: "transformer/strided_slice_10"
      input: "transformer/ones_1/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/ones_1/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node {
      name: "transformer/ones_1/Less"
      op: "Less"
      input: "transformer/ones_1/mul"
      input: "transformer/ones_1/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/ones_1/packed/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/ones_1/packed"
      op: "Pack"
      input: "transformer/strided_slice_10"
      input: "transformer/ones_1/packed/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/ones_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/ones_1"
      op: "Fill"
      input: "transformer/ones_1/packed"
      input: "transformer/ones_1/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/mul_2/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -10000000.0
          }
        }
      }
    }
    node {
      name: "transformer/mul_2"
      op: "Mul"
      input: "transformer/ones_1"
      input: "transformer/mul_2/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_7/mul/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/zeros_7/mul"
      op: "Mul"
      input: "transformer/strided_slice_10"
      input: "transformer/zeros_7/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_7/Less/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node {
      name: "transformer/zeros_7/Less"
      op: "Less"
      input: "transformer/zeros_7/mul"
      input: "transformer/zeros_7/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_7/packed/1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/zeros_7/packed"
      op: "Pack"
      input: "transformer/strided_slice_10"
      input: "transformer/zeros_7/packed/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/zeros_7/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_BOOL
            tensor_shape {
            }
            bool_val: false
          }
        }
      }
    }
    node {
      name: "transformer/zeros_7"
      op: "Fill"
      input: "transformer/zeros_7/packed"
      input: "transformer/zeros_7/Const"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/Enter"
      op: "Enter"
      input: "transformer/Const_2"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_1"
      op: "Enter"
      input: "transformer/ExpandDims_2"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_2"
      op: "Enter"
      input: "transformer/Tile"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_3"
      op: "Enter"
      input: "transformer/zeros_6"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_4"
      op: "Enter"
      input: "transformer/mul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_5"
      op: "Enter"
      input: "transformer/zeros_7"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_6"
      op: "Enter"
      input: "transformer/Tile_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_7"
      op: "Enter"
      input: "transformer/Tile_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_8"
      op: "Enter"
      input: "transformer/Tile_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_9"
      op: "Enter"
      input: "transformer/Tile_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_10"
      op: "Enter"
      input: "transformer/Tile_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_11"
      op: "Enter"
      input: "transformer/Tile_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_12"
      op: "Enter"
      input: "transformer/Tile_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_13"
      op: "Enter"
      input: "transformer/Tile_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_14"
      op: "Enter"
      input: "transformer/Tile_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_15"
      op: "Enter"
      input: "transformer/Tile_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_16"
      op: "Enter"
      input: "transformer/Tile_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Enter_17"
      op: "Enter"
      input: "transformer/Tile_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Merge"
      op: "Merge"
      input: "transformer/while/Enter"
      input: "transformer/while/NextIteration"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_1"
      op: "Merge"
      input: "transformer/while/Enter_1"
      input: "transformer/while/NextIteration_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_2"
      op: "Merge"
      input: "transformer/while/Enter_2"
      input: "transformer/while/NextIteration_2"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_3"
      op: "Merge"
      input: "transformer/while/Enter_3"
      input: "transformer/while/NextIteration_3"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_4"
      op: "Merge"
      input: "transformer/while/Enter_4"
      input: "transformer/while/NextIteration_4"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_5"
      op: "Merge"
      input: "transformer/while/Enter_5"
      input: "transformer/while/NextIteration_5"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_6"
      op: "Merge"
      input: "transformer/while/Enter_6"
      input: "transformer/while/NextIteration_6"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_7"
      op: "Merge"
      input: "transformer/while/Enter_7"
      input: "transformer/while/NextIteration_7"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_8"
      op: "Merge"
      input: "transformer/while/Enter_8"
      input: "transformer/while/NextIteration_8"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_9"
      op: "Merge"
      input: "transformer/while/Enter_9"
      input: "transformer/while/NextIteration_9"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_10"
      op: "Merge"
      input: "transformer/while/Enter_10"
      input: "transformer/while/NextIteration_10"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_11"
      op: "Merge"
      input: "transformer/while/Enter_11"
      input: "transformer/while/NextIteration_11"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_12"
      op: "Merge"
      input: "transformer/while/Enter_12"
      input: "transformer/while/NextIteration_12"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_13"
      op: "Merge"
      input: "transformer/while/Enter_13"
      input: "transformer/while/NextIteration_13"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_14"
      op: "Merge"
      input: "transformer/while/Enter_14"
      input: "transformer/while/NextIteration_14"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_15"
      op: "Merge"
      input: "transformer/while/Enter_15"
      input: "transformer/while/NextIteration_15"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_16"
      op: "Merge"
      input: "transformer/while/Enter_16"
      input: "transformer/while/NextIteration_16"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Merge_17"
      op: "Merge"
      input: "transformer/while/Enter_17"
      input: "transformer/while/NextIteration_17"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ToFloat"
      op: "Cast"
      input: "transformer/while/ToFloat/Enter"
      input: "^transformer/while/Merge"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ToFloat/Enter"
      op: "Enter"
      input: "transformer/add"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/add/x"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 5.0
          }
        }
      }
    }
    node {
      name: "transformer/while/add"
      op: "Add"
      input: "transformer/while/add/x"
      input: "transformer/while/ToFloat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/truediv/y"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 6.0
          }
        }
      }
    }
    node {
      name: "transformer/while/truediv"
      op: "RealDiv"
      input: "transformer/while/add"
      input: "transformer/while/truediv/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Pow/y"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.6000000238418579
          }
        }
      }
    }
    node {
      name: "transformer/while/Pow"
      op: "Pow"
      input: "transformer/while/truediv"
      input: "transformer/while/Pow/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/Merge_2"
      input: "transformer/while/strided_slice/stack"
      input: "transformer/while/strided_slice/stack_1"
      input: "transformer/while/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 2
        }
      }
    }
    node {
      name: "transformer/while/truediv_1"
      op: "RealDiv"
      input: "transformer/while/strided_slice"
      input: "transformer/while/Pow"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Max/reduction_indices"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/Max"
      op: "Max"
      input: "transformer/while/Merge_4"
      input: "transformer/while/Max/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Greater"
      op: "Greater"
      input: "transformer/while/Max"
      input: "transformer/while/truediv_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Const"
      op: "Const"
      input: "^transformer/while/Merge"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/All"
      op: "All"
      input: "transformer/while/Greater"
      input: "transformer/while/Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Less"
      op: "Less"
      input: "transformer/while/Merge"
      input: "transformer/while/ToFloat/Enter"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/LogicalNot"
      op: "LogicalNot"
      input: "transformer/while/All"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/LogicalAnd"
      op: "LogicalAnd"
      input: "transformer/while/Less"
      input: "transformer/while/LogicalNot"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/LoopCond"
      op: "LoopCond"
      input: "transformer/while/LogicalAnd"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch"
      op: "Switch"
      input: "transformer/while/Merge"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_1"
      op: "Switch"
      input: "transformer/while/Merge_1"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_2"
      op: "Switch"
      input: "transformer/while/Merge_2"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_3"
      op: "Switch"
      input: "transformer/while/Merge_3"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_4"
      op: "Switch"
      input: "transformer/while/Merge_4"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_5"
      op: "Switch"
      input: "transformer/while/Merge_5"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_6"
      op: "Switch"
      input: "transformer/while/Merge_6"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_7"
      op: "Switch"
      input: "transformer/while/Merge_7"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_8"
      op: "Switch"
      input: "transformer/while/Merge_8"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_9"
      op: "Switch"
      input: "transformer/while/Merge_9"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_10"
      op: "Switch"
      input: "transformer/while/Merge_10"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_11"
      op: "Switch"
      input: "transformer/while/Merge_11"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_12"
      op: "Switch"
      input: "transformer/while/Merge_12"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_13"
      op: "Switch"
      input: "transformer/while/Merge_13"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_14"
      op: "Switch"
      input: "transformer/while/Merge_14"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_15"
      op: "Switch"
      input: "transformer/while/Merge_15"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_16"
      op: "Switch"
      input: "transformer/while/Merge_16"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_16"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Switch_17"
      op: "Switch"
      input: "transformer/while/Merge_17"
      input: "transformer/while/LoopCond"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Merge_17"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity"
      op: "Identity"
      input: "transformer/while/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_1"
      op: "Identity"
      input: "transformer/while/Switch_1:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_2"
      op: "Identity"
      input: "transformer/while/Switch_2:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_3"
      op: "Identity"
      input: "transformer/while/Switch_3:1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_4"
      op: "Identity"
      input: "transformer/while/Switch_4:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_5"
      op: "Identity"
      input: "transformer/while/Switch_5:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_6"
      op: "Identity"
      input: "transformer/while/Switch_6:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_7"
      op: "Identity"
      input: "transformer/while/Switch_7:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_8"
      op: "Identity"
      input: "transformer/while/Switch_8:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_9"
      op: "Identity"
      input: "transformer/while/Switch_9:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_10"
      op: "Identity"
      input: "transformer/while/Switch_10:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_11"
      op: "Identity"
      input: "transformer/while/Switch_11:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_12"
      op: "Identity"
      input: "transformer/while/Switch_12:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_13"
      op: "Identity"
      input: "transformer/while/Switch_13:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_14"
      op: "Identity"
      input: "transformer/while/Switch_14:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_15"
      op: "Identity"
      input: "transformer/while/Switch_15:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_16"
      op: "Identity"
      input: "transformer/while/Switch_16:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Identity_17"
      op: "Identity"
      input: "transformer/while/Switch_17:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mul/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/mul"
      op: "Mul"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mul/Enter"
      op: "Enter"
      input: "transformer/strided_slice_10"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape/shape"
      op: "Pack"
      input: "transformer/while/mul"
      input: "transformer/while/Reshape/shape/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape"
      op: "Reshape"
      input: "transformer/while/Identity_1"
      input: "transformer/while/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape"
      op: "Shape"
      input: "transformer/while/Identity_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/Shape"
      input: "transformer/while/strided_slice_1/stack"
      input: "transformer/while/strided_slice_1/stack_1"
      input: "transformer/while/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_2/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_2/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_2/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_2"
      op: "StridedSlice"
      input: "transformer/while/Shape"
      input: "transformer/while/strided_slice_2/stack"
      input: "transformer/while/strided_slice_2/stack_1"
      input: "transformer/while/strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_3/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_3/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_3/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_3"
      op: "StridedSlice"
      input: "transformer/while/Shape"
      input: "transformer/while/strided_slice_3/stack"
      input: "transformer/while/strided_slice_3/stack_1"
      input: "transformer/while/strided_slice_3/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_4/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_4/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_4/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_4"
      op: "StridedSlice"
      input: "transformer/while/Shape"
      input: "transformer/while/strided_slice_4/stack"
      input: "transformer/while/strided_slice_4/stack_1"
      input: "transformer/while/strided_slice_4/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_5/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_5/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 5
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_5/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_5"
      op: "StridedSlice"
      input: "transformer/while/Shape"
      input: "transformer/while/strided_slice_5/stack"
      input: "transformer/while/strided_slice_5/stack_1"
      input: "transformer/while/strided_slice_5/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_1"
      op: "Mul"
      input: "transformer/while/strided_slice_1"
      input: "transformer/while/strided_slice_2"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_1/shape"
      op: "Pack"
      input: "transformer/while/mul_1"
      input: "transformer/while/strided_slice_3"
      input: "transformer/while/strided_slice_4"
      input: "transformer/while/strided_slice_5"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_1"
      op: "Reshape"
      input: "transformer/while/Identity_6"
      input: "transformer/while/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_1"
      op: "Shape"
      input: "transformer/while/Identity_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_6/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_6/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_6/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_6"
      op: "StridedSlice"
      input: "transformer/while/Shape_1"
      input: "transformer/while/strided_slice_6/stack"
      input: "transformer/while/strided_slice_6/stack_1"
      input: "transformer/while/strided_slice_6/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_7/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_7/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_7/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_7"
      op: "StridedSlice"
      input: "transformer/while/Shape_1"
      input: "transformer/while/strided_slice_7/stack"
      input: "transformer/while/strided_slice_7/stack_1"
      input: "transformer/while/strided_slice_7/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_8/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_8/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_8/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_8"
      op: "StridedSlice"
      input: "transformer/while/Shape_1"
      input: "transformer/while/strided_slice_8/stack"
      input: "transformer/while/strided_slice_8/stack_1"
      input: "transformer/while/strided_slice_8/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_9/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_9/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_9/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_9"
      op: "StridedSlice"
      input: "transformer/while/Shape_1"
      input: "transformer/while/strided_slice_9/stack"
      input: "transformer/while/strided_slice_9/stack_1"
      input: "transformer/while/strided_slice_9/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_10/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_10/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 5
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_10/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_10"
      op: "StridedSlice"
      input: "transformer/while/Shape_1"
      input: "transformer/while/strided_slice_10/stack"
      input: "transformer/while/strided_slice_10/stack_1"
      input: "transformer/while/strided_slice_10/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_2"
      op: "Mul"
      input: "transformer/while/strided_slice_6"
      input: "transformer/while/strided_slice_7"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_2/shape"
      op: "Pack"
      input: "transformer/while/mul_2"
      input: "transformer/while/strided_slice_8"
      input: "transformer/while/strided_slice_9"
      input: "transformer/while/strided_slice_10"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_2"
      op: "Reshape"
      input: "transformer/while/Identity_7"
      input: "transformer/while/Reshape_2/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_2"
      op: "Shape"
      input: "transformer/while/Identity_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_11/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_11/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_11/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_11"
      op: "StridedSlice"
      input: "transformer/while/Shape_2"
      input: "transformer/while/strided_slice_11/stack"
      input: "transformer/while/strided_slice_11/stack_1"
      input: "transformer/while/strided_slice_11/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_12/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_12/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_12/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_12"
      op: "StridedSlice"
      input: "transformer/while/Shape_2"
      input: "transformer/while/strided_slice_12/stack"
      input: "transformer/while/strided_slice_12/stack_1"
      input: "transformer/while/strided_slice_12/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_13/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_13/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_13/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_13"
      op: "StridedSlice"
      input: "transformer/while/Shape_2"
      input: "transformer/while/strided_slice_13/stack"
      input: "transformer/while/strided_slice_13/stack_1"
      input: "transformer/while/strided_slice_13/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_14/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_14/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_14/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_14"
      op: "StridedSlice"
      input: "transformer/while/Shape_2"
      input: "transformer/while/strided_slice_14/stack"
      input: "transformer/while/strided_slice_14/stack_1"
      input: "transformer/while/strided_slice_14/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_15/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_15/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 5
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_15/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_15"
      op: "StridedSlice"
      input: "transformer/while/Shape_2"
      input: "transformer/while/strided_slice_15/stack"
      input: "transformer/while/strided_slice_15/stack_1"
      input: "transformer/while/strided_slice_15/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_3"
      op: "Mul"
      input: "transformer/while/strided_slice_11"
      input: "transformer/while/strided_slice_12"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_3/shape"
      op: "Pack"
      input: "transformer/while/mul_3"
      input: "transformer/while/strided_slice_13"
      input: "transformer/while/strided_slice_14"
      input: "transformer/while/strided_slice_15"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_3"
      op: "Reshape"
      input: "transformer/while/Identity_8"
      input: "transformer/while/Reshape_3/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_3"
      op: "Shape"
      input: "transformer/while/Identity_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_16/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_16/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_16/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_16"
      op: "StridedSlice"
      input: "transformer/while/Shape_3"
      input: "transformer/while/strided_slice_16/stack"
      input: "transformer/while/strided_slice_16/stack_1"
      input: "transformer/while/strided_slice_16/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_17/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_17/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_17/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_17"
      op: "StridedSlice"
      input: "transformer/while/Shape_3"
      input: "transformer/while/strided_slice_17/stack"
      input: "transformer/while/strided_slice_17/stack_1"
      input: "transformer/while/strided_slice_17/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_18/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_18/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_18/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_18"
      op: "StridedSlice"
      input: "transformer/while/Shape_3"
      input: "transformer/while/strided_slice_18/stack"
      input: "transformer/while/strided_slice_18/stack_1"
      input: "transformer/while/strided_slice_18/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_4"
      op: "Mul"
      input: "transformer/while/strided_slice_16"
      input: "transformer/while/strided_slice_17"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_4/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_4/shape"
      op: "Pack"
      input: "transformer/while/mul_4"
      input: "transformer/while/strided_slice_18"
      input: "transformer/while/Reshape_4/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_4"
      op: "Reshape"
      input: "transformer/while/Identity_9"
      input: "transformer/while/Reshape_4/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_4"
      op: "Shape"
      input: "transformer/while/Identity_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_19/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_19/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_19/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_19"
      op: "StridedSlice"
      input: "transformer/while/Shape_4"
      input: "transformer/while/strided_slice_19/stack"
      input: "transformer/while/strided_slice_19/stack_1"
      input: "transformer/while/strided_slice_19/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_20/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_20/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_20/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_20"
      op: "StridedSlice"
      input: "transformer/while/Shape_4"
      input: "transformer/while/strided_slice_20/stack"
      input: "transformer/while/strided_slice_20/stack_1"
      input: "transformer/while/strided_slice_20/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_21/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_21/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_21/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_21"
      op: "StridedSlice"
      input: "transformer/while/Shape_4"
      input: "transformer/while/strided_slice_21/stack"
      input: "transformer/while/strided_slice_21/stack_1"
      input: "transformer/while/strided_slice_21/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_22/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_22/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_22/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_22"
      op: "StridedSlice"
      input: "transformer/while/Shape_4"
      input: "transformer/while/strided_slice_22/stack"
      input: "transformer/while/strided_slice_22/stack_1"
      input: "transformer/while/strided_slice_22/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_5"
      op: "Mul"
      input: "transformer/while/strided_slice_19"
      input: "transformer/while/strided_slice_20"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_5/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_5/shape"
      op: "Pack"
      input: "transformer/while/mul_5"
      input: "transformer/while/strided_slice_21"
      input: "transformer/while/strided_slice_22"
      input: "transformer/while/Reshape_5/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_5"
      op: "Reshape"
      input: "transformer/while/Identity_10"
      input: "transformer/while/Reshape_5/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_5"
      op: "Shape"
      input: "transformer/while/Identity_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_23/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_23/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_23/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_23"
      op: "StridedSlice"
      input: "transformer/while/Shape_5"
      input: "transformer/while/strided_slice_23/stack"
      input: "transformer/while/strided_slice_23/stack_1"
      input: "transformer/while/strided_slice_23/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_24/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_24/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_24/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_24"
      op: "StridedSlice"
      input: "transformer/while/Shape_5"
      input: "transformer/while/strided_slice_24/stack"
      input: "transformer/while/strided_slice_24/stack_1"
      input: "transformer/while/strided_slice_24/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_25/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_25/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_25/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_25"
      op: "StridedSlice"
      input: "transformer/while/Shape_5"
      input: "transformer/while/strided_slice_25/stack"
      input: "transformer/while/strided_slice_25/stack_1"
      input: "transformer/while/strided_slice_25/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_26/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_26/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_26/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_26"
      op: "StridedSlice"
      input: "transformer/while/Shape_5"
      input: "transformer/while/strided_slice_26/stack"
      input: "transformer/while/strided_slice_26/stack_1"
      input: "transformer/while/strided_slice_26/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_6"
      op: "Mul"
      input: "transformer/while/strided_slice_23"
      input: "transformer/while/strided_slice_24"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_6/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_6/shape"
      op: "Pack"
      input: "transformer/while/mul_6"
      input: "transformer/while/strided_slice_25"
      input: "transformer/while/strided_slice_26"
      input: "transformer/while/Reshape_6/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_6"
      op: "Reshape"
      input: "transformer/while/Identity_11"
      input: "transformer/while/Reshape_6/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_6"
      op: "Shape"
      input: "transformer/while/Identity_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_27/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_27/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_27/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_27"
      op: "StridedSlice"
      input: "transformer/while/Shape_6"
      input: "transformer/while/strided_slice_27/stack"
      input: "transformer/while/strided_slice_27/stack_1"
      input: "transformer/while/strided_slice_27/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_28/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_28/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_28/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_28"
      op: "StridedSlice"
      input: "transformer/while/Shape_6"
      input: "transformer/while/strided_slice_28/stack"
      input: "transformer/while/strided_slice_28/stack_1"
      input: "transformer/while/strided_slice_28/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_29/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_29/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_29/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_29"
      op: "StridedSlice"
      input: "transformer/while/Shape_6"
      input: "transformer/while/strided_slice_29/stack"
      input: "transformer/while/strided_slice_29/stack_1"
      input: "transformer/while/strided_slice_29/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_30/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_30/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_30/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_30"
      op: "StridedSlice"
      input: "transformer/while/Shape_6"
      input: "transformer/while/strided_slice_30/stack"
      input: "transformer/while/strided_slice_30/stack_1"
      input: "transformer/while/strided_slice_30/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_7"
      op: "Mul"
      input: "transformer/while/strided_slice_27"
      input: "transformer/while/strided_slice_28"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_7/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_7/shape"
      op: "Pack"
      input: "transformer/while/mul_7"
      input: "transformer/while/strided_slice_29"
      input: "transformer/while/strided_slice_30"
      input: "transformer/while/Reshape_7/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_7"
      op: "Reshape"
      input: "transformer/while/Identity_12"
      input: "transformer/while/Reshape_7/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_7"
      op: "Shape"
      input: "transformer/while/Identity_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_31/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_31/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_31/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_31"
      op: "StridedSlice"
      input: "transformer/while/Shape_7"
      input: "transformer/while/strided_slice_31/stack"
      input: "transformer/while/strided_slice_31/stack_1"
      input: "transformer/while/strided_slice_31/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_32/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_32/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_32/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_32"
      op: "StridedSlice"
      input: "transformer/while/Shape_7"
      input: "transformer/while/strided_slice_32/stack"
      input: "transformer/while/strided_slice_32/stack_1"
      input: "transformer/while/strided_slice_32/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_33/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_33/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_33/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_33"
      op: "StridedSlice"
      input: "transformer/while/Shape_7"
      input: "transformer/while/strided_slice_33/stack"
      input: "transformer/while/strided_slice_33/stack_1"
      input: "transformer/while/strided_slice_33/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_34/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_34/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_34/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_34"
      op: "StridedSlice"
      input: "transformer/while/Shape_7"
      input: "transformer/while/strided_slice_34/stack"
      input: "transformer/while/strided_slice_34/stack_1"
      input: "transformer/while/strided_slice_34/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_8"
      op: "Mul"
      input: "transformer/while/strided_slice_31"
      input: "transformer/while/strided_slice_32"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_8/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_8/shape"
      op: "Pack"
      input: "transformer/while/mul_8"
      input: "transformer/while/strided_slice_33"
      input: "transformer/while/strided_slice_34"
      input: "transformer/while/Reshape_8/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_8"
      op: "Reshape"
      input: "transformer/while/Identity_13"
      input: "transformer/while/Reshape_8/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_8"
      op: "Shape"
      input: "transformer/while/Identity_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_35/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_35/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_35/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_35"
      op: "StridedSlice"
      input: "transformer/while/Shape_8"
      input: "transformer/while/strided_slice_35/stack"
      input: "transformer/while/strided_slice_35/stack_1"
      input: "transformer/while/strided_slice_35/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_36/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_36/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_36/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_36"
      op: "StridedSlice"
      input: "transformer/while/Shape_8"
      input: "transformer/while/strided_slice_36/stack"
      input: "transformer/while/strided_slice_36/stack_1"
      input: "transformer/while/strided_slice_36/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_37/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_37/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_37/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_37"
      op: "StridedSlice"
      input: "transformer/while/Shape_8"
      input: "transformer/while/strided_slice_37/stack"
      input: "transformer/while/strided_slice_37/stack_1"
      input: "transformer/while/strided_slice_37/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_38/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_38/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_38/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_38"
      op: "StridedSlice"
      input: "transformer/while/Shape_8"
      input: "transformer/while/strided_slice_38/stack"
      input: "transformer/while/strided_slice_38/stack_1"
      input: "transformer/while/strided_slice_38/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_9"
      op: "Mul"
      input: "transformer/while/strided_slice_35"
      input: "transformer/while/strided_slice_36"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_9/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_9/shape"
      op: "Pack"
      input: "transformer/while/mul_9"
      input: "transformer/while/strided_slice_37"
      input: "transformer/while/strided_slice_38"
      input: "transformer/while/Reshape_9/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_9"
      op: "Reshape"
      input: "transformer/while/Identity_14"
      input: "transformer/while/Reshape_9/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_9"
      op: "Shape"
      input: "transformer/while/Identity_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_39/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_39/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_39/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_39"
      op: "StridedSlice"
      input: "transformer/while/Shape_9"
      input: "transformer/while/strided_slice_39/stack"
      input: "transformer/while/strided_slice_39/stack_1"
      input: "transformer/while/strided_slice_39/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_40/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_40/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_40/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_40"
      op: "StridedSlice"
      input: "transformer/while/Shape_9"
      input: "transformer/while/strided_slice_40/stack"
      input: "transformer/while/strided_slice_40/stack_1"
      input: "transformer/while/strided_slice_40/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_41/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_41/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_41/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_41"
      op: "StridedSlice"
      input: "transformer/while/Shape_9"
      input: "transformer/while/strided_slice_41/stack"
      input: "transformer/while/strided_slice_41/stack_1"
      input: "transformer/while/strided_slice_41/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_42/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_42/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_42/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_42"
      op: "StridedSlice"
      input: "transformer/while/Shape_9"
      input: "transformer/while/strided_slice_42/stack"
      input: "transformer/while/strided_slice_42/stack_1"
      input: "transformer/while/strided_slice_42/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_10"
      op: "Mul"
      input: "transformer/while/strided_slice_39"
      input: "transformer/while/strided_slice_40"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_10/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_10/shape"
      op: "Pack"
      input: "transformer/while/mul_10"
      input: "transformer/while/strided_slice_41"
      input: "transformer/while/strided_slice_42"
      input: "transformer/while/Reshape_10/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_10"
      op: "Reshape"
      input: "transformer/while/Identity_15"
      input: "transformer/while/Reshape_10/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_10"
      op: "Shape"
      input: "transformer/while/Identity_16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_43/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_43/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_43/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_43"
      op: "StridedSlice"
      input: "transformer/while/Shape_10"
      input: "transformer/while/strided_slice_43/stack"
      input: "transformer/while/strided_slice_43/stack_1"
      input: "transformer/while/strided_slice_43/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_44/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_44/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_44/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_44"
      op: "StridedSlice"
      input: "transformer/while/Shape_10"
      input: "transformer/while/strided_slice_44/stack"
      input: "transformer/while/strided_slice_44/stack_1"
      input: "transformer/while/strided_slice_44/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_45/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_45/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_45/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_45"
      op: "StridedSlice"
      input: "transformer/while/Shape_10"
      input: "transformer/while/strided_slice_45/stack"
      input: "transformer/while/strided_slice_45/stack_1"
      input: "transformer/while/strided_slice_45/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_46/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_46/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_46/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_46"
      op: "StridedSlice"
      input: "transformer/while/Shape_10"
      input: "transformer/while/strided_slice_46/stack"
      input: "transformer/while/strided_slice_46/stack_1"
      input: "transformer/while/strided_slice_46/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_11"
      op: "Mul"
      input: "transformer/while/strided_slice_43"
      input: "transformer/while/strided_slice_44"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_11/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_11/shape"
      op: "Pack"
      input: "transformer/while/mul_11"
      input: "transformer/while/strided_slice_45"
      input: "transformer/while/strided_slice_46"
      input: "transformer/while/Reshape_11/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_11"
      op: "Reshape"
      input: "transformer/while/Identity_16"
      input: "transformer/while/Reshape_11/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_11"
      op: "Shape"
      input: "transformer/while/Identity_17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_47/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_47/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_47/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_47"
      op: "StridedSlice"
      input: "transformer/while/Shape_11"
      input: "transformer/while/strided_slice_47/stack"
      input: "transformer/while/strided_slice_47/stack_1"
      input: "transformer/while/strided_slice_47/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_48/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_48/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_48/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_48"
      op: "StridedSlice"
      input: "transformer/while/Shape_11"
      input: "transformer/while/strided_slice_48/stack"
      input: "transformer/while/strided_slice_48/stack_1"
      input: "transformer/while/strided_slice_48/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_49/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_49/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_49/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_49"
      op: "StridedSlice"
      input: "transformer/while/Shape_11"
      input: "transformer/while/strided_slice_49/stack"
      input: "transformer/while/strided_slice_49/stack_1"
      input: "transformer/while/strided_slice_49/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_50/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_50/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_50/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_50"
      op: "StridedSlice"
      input: "transformer/while/Shape_11"
      input: "transformer/while/strided_slice_50/stack"
      input: "transformer/while/strided_slice_50/stack_1"
      input: "transformer/while/strided_slice_50/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_12"
      op: "Mul"
      input: "transformer/while/strided_slice_47"
      input: "transformer/while/strided_slice_48"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_12/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_12/shape"
      op: "Pack"
      input: "transformer/while/mul_12"
      input: "transformer/while/strided_slice_49"
      input: "transformer/while/strided_slice_50"
      input: "transformer/while/Reshape_12/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_12"
      op: "Reshape"
      input: "transformer/while/Identity_17"
      input: "transformer/while/Reshape_12/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_51/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\377\377\377\377"
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_51/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_51/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_51"
      op: "StridedSlice"
      input: "transformer/while/Reshape"
      input: "transformer/while/strided_slice_51/stack"
      input: "transformer/while/strided_slice_51/stack_1"
      input: "transformer/while/strided_slice_51/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
    }
    node {
      name: "transformer/while/ExpandDims/dim"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/ExpandDims"
      op: "ExpandDims"
      input: "transformer/while/strided_slice_51"
      input: "transformer/while/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ExpandDims_1/dim"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/ExpandDims_1"
      op: "ExpandDims"
      input: "transformer/while/ExpandDims"
      input: "transformer/while/ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_12"
      op: "Shape"
      input: "transformer/while/ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_52/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_52/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_52/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_52"
      op: "StridedSlice"
      input: "transformer/while/Shape_12"
      input: "transformer/while/strided_slice_52/stack"
      input: "transformer/while/strided_slice_52/stack_1"
      input: "transformer/while/strided_slice_52/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_53/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_53/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_53/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_53"
      op: "StridedSlice"
      input: "transformer/while/Shape_12"
      input: "transformer/while/strided_slice_53/stack"
      input: "transformer/while/strided_slice_53/stack_1"
      input: "transformer/while/strided_slice_53/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/split/split_dim"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/split"
      op: "Split"
      input: "transformer/while/split/split_dim"
      input: "transformer/while/ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "num_split"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/parallel_0/transformer/Identity"
      op: "Identity"
      input: "transformer/while/split"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/Squeeze"
      op: "Squeeze"
      input: "transformer/while/parallel_0/transformer/Identity"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 3
          }
        }
      }
    }
    node {
      name: "read_43"
      op: "Identity"
      input: "read_43/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_43/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_10069_256/shared/weights_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "read_44"
      op: "Identity"
      input: "read_44/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_44/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_10069_256/shared/weights_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "read_45"
      op: "Identity"
      input: "read_45/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_45/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_10069_256/shared/weights_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "read_46"
      op: "Identity"
      input: "read_46/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_46/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_10069_256/shared/weights_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "read_47"
      op: "Identity"
      input: "read_47/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_47/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_10069_256/shared/weights_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "read_48"
      op: "Identity"
      input: "read_48/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_48/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_10069_256/shared/weights_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "read_49"
      op: "Identity"
      input: "read_49/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_49/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_10069_256/shared/weights_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "read_50"
      op: "Identity"
      input: "read_50/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_50/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_10069_256/shared/weights_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "read_51"
      op: "Identity"
      input: "read_51/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_51/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_10069_256/shared/weights_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "read_52"
      op: "Identity"
      input: "read_52/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_52/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_10069_256/shared/weights_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "read_53"
      op: "Identity"
      input: "read_53/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_53/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_10069_256/shared/weights_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "read_54"
      op: "Identity"
      input: "read_54/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_54/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_10069_256/shared/weights_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "read_55"
      op: "Identity"
      input: "read_55/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_55/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_10069_256/shared/weights_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "read_56"
      op: "Identity"
      input: "read_56/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_56/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_10069_256/shared/weights_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "read_57"
      op: "Identity"
      input: "read_57/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_57/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_10069_256/shared/weights_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "read_58"
      op: "Identity"
      input: "read_58/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_58/RefEnter"
      op: "RefEnter"
      input: "transformer/symbol_modality_10069_256/shared/weights_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/concat"
      op: "ConcatV2"
      input: "read_43"
      input: "read_44"
      input: "read_45"
      input: "read_46"
      input: "read_47"
      input: "read_48"
      input: "read_49"
      input: "read_50"
      input: "read_51"
      input: "read_52"
      input: "read_53"
      input: "read_54"
      input: "read_55"
      input: "read_56"
      input: "read_57"
      input: "read_58"
      input: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/concat/axis"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10069
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/convert_gradient_to_tensor_HBc3xYw22Mw"
      op: "convert_gradient_to_tensor_HBc3xYw22Mw"
      input: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/concat"
      input: "^transformer/while/Identity"
      attr {
        key: "_disable_call_shape_inference"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10069
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/GatherV2"
      op: "GatherV2"
      input: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/convert_gradient_to_tensor_HBc3xYw22Mw"
      input: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/Squeeze"
      input: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 16.0
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul"
      op: "Mul"
      input: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/GatherV2"
      input: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/NotEqual/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/NotEqual"
      op: "NotEqual"
      input: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/Squeeze"
      input: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/NotEqual/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/Cast"
      op: "Cast"
      input: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/NotEqual"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/ExpandDims/dim"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/ExpandDims"
      op: "ExpandDims"
      input: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/Cast"
      input: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul_1"
      op: "Mul"
      input: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul"
      input: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/ExpandDims"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_13"
      op: "Shape"
      input: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_54/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_54/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_54/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_54"
      op: "StridedSlice"
      input: "transformer/while/Shape_13"
      input: "transformer/while/strided_slice_54/stack"
      input: "transformer/while/strided_slice_54/stack_1"
      input: "transformer/while/strided_slice_54/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_55/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_55/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_55/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_55"
      op: "StridedSlice"
      input: "transformer/while/Shape_13"
      input: "transformer/while/strided_slice_55/stack"
      input: "transformer/while/strided_slice_55/stack_1"
      input: "transformer/while/strided_slice_55/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/mul_13/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_13"
      op: "Mul"
      input: "transformer/while/strided_slice_55"
      input: "transformer/while/mul_13/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_13/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_13/shape"
      op: "Pack"
      input: "transformer/while/strided_slice_54"
      input: "transformer/while/mul_13"
      input: "transformer/while/Reshape_13/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_13"
      op: "Reshape"
      input: "transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul_1"
      input: "transformer/while/Reshape_13/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Equal/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/Equal"
      op: "Equal"
      input: "transformer/while/Identity"
      input: "transformer/while/Equal/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/cond/Switch"
      op: "Switch"
      input: "transformer/while/Equal"
      input: "transformer/while/Equal"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/cond/switch_t"
      op: "Identity"
      input: "transformer/while/cond/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/cond/switch_f"
      op: "Identity"
      input: "transformer/while/cond/Switch"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/cond/pred_id"
      op: "Identity"
      input: "transformer/while/Equal"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/cond/zeros_like"
      op: "ZerosLike"
      input: "transformer/while/cond/zeros_like/Switch:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/cond/zeros_like/Switch"
      op: "Switch"
      input: "transformer/while/Reshape_13"
      input: "transformer/while/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Reshape_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/cond/Switch_1"
      op: "Switch"
      input: "transformer/while/Reshape_13"
      input: "transformer/while/cond/pred_id"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/while/Reshape_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/cond/Merge"
      op: "Merge"
      input: "transformer/while/cond/Switch_1"
      input: "transformer/while/cond/zeros_like"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_1/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/add_1"
      op: "Add"
      input: "transformer/while/Identity"
      input: "transformer/while/add_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_56/stack/0"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_56/stack"
      op: "Pack"
      input: "transformer/while/strided_slice_56/stack/0"
      input: "transformer/while/Identity"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_56/stack_1/0"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_56/stack_1"
      op: "Pack"
      input: "transformer/while/strided_slice_56/stack_1/0"
      input: "transformer/while/add_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_56/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_56"
      op: "StridedSlice"
      input: "transformer/while/strided_slice_56/Enter"
      input: "transformer/while/strided_slice_56/stack"
      input: "transformer/while/strided_slice_56/stack_1"
      input: "transformer/while/strided_slice_56/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_56/Enter"
      op: "Enter"
      input: "transformer/get_timing_signal_1d/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/add_2"
      op: "Add"
      input: "transformer/while/cond/Merge"
      input: "transformer/while/strided_slice_56"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_3/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/add_3"
      op: "Add"
      input: "transformer/while/Identity"
      input: "transformer/while/add_3/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_4/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/add_4"
      op: "Add"
      input: "transformer/while/Identity"
      input: "transformer/while/add_4/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_57/stack/0"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_57/stack/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_57/stack/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_57/stack"
      op: "Pack"
      input: "transformer/while/strided_slice_57/stack/0"
      input: "transformer/while/strided_slice_57/stack/1"
      input: "transformer/while/Identity"
      input: "transformer/while/strided_slice_57/stack/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_57/stack_1/0"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_57/stack_1/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_57/stack_1"
      op: "Pack"
      input: "transformer/while/strided_slice_57/stack_1/0"
      input: "transformer/while/strided_slice_57/stack_1/1"
      input: "transformer/while/add_3"
      input: "transformer/while/add_4"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_57/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_57"
      op: "StridedSlice"
      input: "transformer/while/strided_slice_57/Enter"
      input: "transformer/while/strided_slice_57/stack"
      input: "transformer/while/strided_slice_57/stack_1"
      input: "transformer/while/strided_slice_57/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 11
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 3
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_57/Enter"
      op: "Enter"
      input: "transformer/attention_bias_lower_triangle/attention_bias_local/mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/while/add_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_59"
      op: "Identity"
      input: "read_59/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_59/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_60"
      op: "Identity"
      input: "read_60/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_60/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/while/add_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/SquaredDifference"
      op: "SquaredDifference"
      input: "transformer/while/add_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/SquaredDifference"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/while/add_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul"
      input: "read_59"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul_1"
      input: "read_60"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_61"
      op: "Identity"
      input: "read_61/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_61/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/free"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_61"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_62"
      op: "Identity"
      input: "read_62/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_62/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/free"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_62"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_63"
      op: "Identity"
      input: "read_63/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_63/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/free"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_63"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat"
      op: "ConcatV2"
      input: "transformer/while/Reshape_5"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1"
      op: "ConcatV2"
      input: "transformer/while/Reshape_7"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/mul/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.125
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul"
      op: "BatchMatMulV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "adj_y"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul"
      input: "transformer/while/strided_slice_57"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention_weights"
      op: "Softmax"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul_1"
      op: "BatchMatMulV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_64"
      op: "Identity"
      input: "read_64/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_64/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/free"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_64"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_postprocess/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot"
      input: "transformer/while/add_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_65"
      op: "Identity"
      input: "read_65/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_65/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_66"
      op: "Identity"
      input: "read_66/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_66/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/SquaredDifference"
      op: "SquaredDifference"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/SquaredDifference"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/mul"
      input: "read_65"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/mul_1"
      input: "read_66"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_67"
      op: "Identity"
      input: "read_67/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_67/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/free"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GatherV2_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GatherV2_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_67"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/mul/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.125
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/MatMul"
      op: "BatchMatMulV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/mul"
      input: "transformer/while/Reshape_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "adj_y"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/MatMul"
      input: "transformer/while/Reshape_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/attention_weights"
      op: "Softmax"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/MatMul_1"
      op: "BatchMatMulV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/while/Reshape_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/MatMul_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_68"
      op: "Identity"
      input: "read_68/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_68/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/free"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_68"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_postprocess/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_69"
      op: "Identity"
      input: "read_69/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_69/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_70"
      op: "Identity"
      input: "read_70/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_70/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/SquaredDifference"
      op: "SquaredDifference"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/SquaredDifference"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/mul"
      input: "read_69"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/mul_1"
      input: "read_70"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\004\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.06846532225608826
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.06846532225608826
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 1024
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "read_71"
      op: "Identity"
      input: "read_71/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "read_71/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/bias/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1024
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/bias/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/bias/Initializer/zeros"
      op: "Fill"
      input: "transformer/body/decoder/layer_0/ffn/conv1/bias/Initializer/zeros/shape_as_tensor"
      input: "transformer/body/decoder/layer_0/ffn/conv1/bias/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1024
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv1/bias"
      input: "transformer/body/decoder/layer_0/ffn/conv1/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv1/bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/ffn/conv1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "read_72"
      op: "Identity"
      input: "read_72/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "read_72/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/ffn/conv1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/free"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/GatherV2_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/GatherV2_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_71"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\004\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1024
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/BiasAdd"
      op: "BiasAdd"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot"
      input: "read_72"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Relu"
      op: "Relu"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\004\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.06846532225608826
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.06846532225608826
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1024
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_73"
      op: "Identity"
      input: "read_73/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_73/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv2/bias"
      input: "transformer/body/decoder/layer_0/ffn/conv2/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_0/ffn/conv2/bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_0/ffn/conv2/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_74"
      op: "Identity"
      input: "read_74/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_74/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_0/ffn/conv2/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/free"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/GatherV2_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/GatherV2_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Relu"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_73"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\004\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/BiasAdd"
      op: "BiasAdd"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot"
      input: "read_74"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_postprocess/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/BiasAdd"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_75"
      op: "Identity"
      input: "read_75/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_75/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_76"
      op: "Identity"
      input: "read_76/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_76/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/SquaredDifference"
      op: "SquaredDifference"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/SquaredDifference"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul"
      input: "read_75"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul_1"
      input: "read_76"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_77"
      op: "Identity"
      input: "read_77/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_77/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/free"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_77"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_78"
      op: "Identity"
      input: "read_78/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_78/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/free"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_78"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_79"
      op: "Identity"
      input: "read_79/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_79/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/free"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_79"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat"
      op: "ConcatV2"
      input: "transformer/while/Reshape_9"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1"
      op: "ConcatV2"
      input: "transformer/while/Reshape_11"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/mul/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.125
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul"
      op: "BatchMatMulV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "adj_y"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul"
      input: "transformer/while/strided_slice_57"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention_weights"
      op: "Softmax"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul_1"
      op: "BatchMatMulV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_80"
      op: "Identity"
      input: "read_80/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_80/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/free"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_80"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_postprocess/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_81"
      op: "Identity"
      input: "read_81/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_81/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_82"
      op: "Identity"
      input: "read_82/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_82/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/SquaredDifference"
      op: "SquaredDifference"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/SquaredDifference"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/mul"
      input: "read_81"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/mul_1"
      input: "read_82"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_83"
      op: "Identity"
      input: "read_83/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_83/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/free"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GatherV2_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GatherV2_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_83"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/mul/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.125
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/mul/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/MatMul"
      op: "BatchMatMulV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/mul"
      input: "transformer/while/Reshape_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "adj_y"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/MatMul"
      input: "transformer/while/Reshape_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/attention_weights"
      op: "Softmax"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/MatMul_1"
      op: "BatchMatMulV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/while/Reshape_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/transpose/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/MatMul_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/transpose/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/transpose"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10825317353010178
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_84"
      op: "Identity"
      input: "read_84/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_84/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/free"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_84"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_postprocess/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_85"
      op: "Identity"
      input: "read_85/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_85/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_86"
      op: "Identity"
      input: "read_86/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_86/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/SquaredDifference"
      op: "SquaredDifference"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/SquaredDifference"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/mul"
      input: "read_85"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/mul_1"
      input: "read_86"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\004\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.06846532225608826
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.06846532225608826
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 1024
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "read_87"
      op: "Identity"
      input: "read_87/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "read_87/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/bias/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1024
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/bias/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/bias/Initializer/zeros"
      op: "Fill"
      input: "transformer/body/decoder/layer_1/ffn/conv1/bias/Initializer/zeros/shape_as_tensor"
      input: "transformer/body/decoder/layer_1/ffn/conv1/bias/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1024
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv1/bias"
      input: "transformer/body/decoder/layer_1/ffn/conv1/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv1/bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/ffn/conv1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "read_88"
      op: "Identity"
      input: "read_88/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "read_88/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/ffn/conv1/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/free"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/GatherV2_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/GatherV2_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_87"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\000\004\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1024
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/BiasAdd"
      op: "BiasAdd"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot"
      input: "read_88"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Relu"
      op: "Relu"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/BiasAdd"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/shape"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\004\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/min"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -0.06846532225608826
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/max"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.06846532225608826
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/sub"
      op: "Sub"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/max"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/mul"
      op: "Mul"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/RandomUniform"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform"
      op: "Add"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/mul"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform/min"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1024
            }
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/kernel/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_89"
      op: "Identity"
      input: "read_89/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_89/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv2/bias"
      input: "transformer/body/decoder/layer_1/ffn/conv2/bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_1/ffn/conv2/bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_1/ffn/conv2/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_90"
      op: "Identity"
      input: "read_90/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_90/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_1/ffn/conv2/bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/axes"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/free"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/GatherV2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/GatherV2"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/GatherV2/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/GatherV2_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/GatherV2_1"
      op: "GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/GatherV2_1/axis"
      attr {
        key: "Taxis"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Prod"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Const_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Prod_1"
      op: "Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/GatherV2_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Const_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/concat"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/free"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/axes"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/stack"
      op: "Pack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Prod"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Prod_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/transpose"
      op: "Transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Relu"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/transpose"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/stack"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/transpose_1/perm"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/transpose_1"
      op: "Transpose"
      input: "read_89"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/transpose_1/perm"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Reshape_1/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\004\000\000\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Reshape_1"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/transpose_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/MatMul"
      op: "MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Const_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/concat_1"
      op: "ConcatV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/GatherV2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Const_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/MatMul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/BiasAdd"
      op: "BiasAdd"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot"
      input: "read_90"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_postprocess/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/BiasAdd"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_postprocess/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_91"
      op: "Identity"
      input: "read_91/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_91/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 256
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      op: "VariableV2"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/Assign"
      op: "Assign"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/read"
      op: "Identity"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_92"
      op: "Identity"
      input: "read_92/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_92/RefEnter"
      op: "RefEnter"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      attr {
        key: "frame_name"
        value {
          s: "transformer/while/while_context"
        }
      }
      attr {
        key: "is_constant"
        value {
          b: true
        }
      }
      attr {
        key: "parallel_iterations"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999974752427e-07
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/SquaredDifference"
      op: "SquaredDifference"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean_1"
      op: "Mean"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/SquaredDifference"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/sub"
      op: "Sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_postprocess/add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/add"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Rsqrt"
      op: "Rsqrt"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/mul"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/sub"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Rsqrt"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/mul_1"
      op: "Mul"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/mul"
      input: "read_91"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/add_1"
      op: "Add"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/mul_1"
      input: "read_92"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/ExpandDims/dim"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/body/parallel_0/body/ExpandDims"
      op: "ExpandDims"
      input: "transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/add_1"
      input: "transformer/while/body/parallel_0/body/ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/concat"
      op: "ConcatV2"
      input: "transformer/while/Reshape_1"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/while/concat/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_1/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_1"
      op: "ConcatV2"
      input: "transformer/while/Reshape_2"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/attention_weights"
      input: "transformer/while/concat_1/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Shape"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/ExpandDims"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice"
      op: "StridedSlice"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Shape"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice/stack"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice/stack_1"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice_1/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice_1/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice_1/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice_1"
      op: "StridedSlice"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Shape"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice_1/stack"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice_1/stack_1"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "read_93"
      op: "Identity"
      input: "read_43/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_94"
      op: "Identity"
      input: "read_44/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_95"
      op: "Identity"
      input: "read_45/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_96"
      op: "Identity"
      input: "read_46/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_97"
      op: "Identity"
      input: "read_47/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_98"
      op: "Identity"
      input: "read_48/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_99"
      op: "Identity"
      input: "read_49/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_100"
      op: "Identity"
      input: "read_50/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_101"
      op: "Identity"
      input: "read_51/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_102"
      op: "Identity"
      input: "read_52/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_103"
      op: "Identity"
      input: "read_53/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_104"
      op: "Identity"
      input: "read_54/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_105"
      op: "Identity"
      input: "read_55/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_106"
      op: "Identity"
      input: "read_56/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_107"
      op: "Identity"
      input: "read_57/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "read_108"
      op: "Identity"
      input: "read_58/RefEnter"
      input: "^transformer/while/Identity"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/concat/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/concat"
      op: "ConcatV2"
      input: "read_93"
      input: "read_94"
      input: "read_95"
      input: "read_96"
      input: "read_97"
      input: "read_98"
      input: "read_99"
      input: "read_100"
      input: "read_101"
      input: "read_102"
      input: "read_103"
      input: "read_104"
      input: "read_105"
      input: "read_106"
      input: "read_107"
      input: "read_108"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/concat/axis"
      attr {
        key: "N"
        value {
          i: 16
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10069
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/convert_gradient_to_tensor_HBc3xYw22Mw"
      op: "convert_gradient_to_tensor_HBc3xYw22Mw"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/concat"
      input: "^transformer/while/Identity"
      attr {
        key: "_disable_call_shape_inference"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 10069
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377\000\001\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/ExpandDims"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/MatMul"
      op: "MatMul"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/convert_gradient_to_tensor_HBc3xYw22Mw"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10069
              }
            }
          }
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape_1/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape_1/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape_1/shape/4"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10069
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape_1/shape"
      op: "Pack"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice_1"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape_1/shape/2"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape_1/shape/3"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape_1/shape/4"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape_1"
      op: "Reshape"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/MatMul"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
              dim {
                size: 1
              }
              dim {
                size: 10069
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Squeeze"
      op: "Squeeze"
      input: "transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10069
              }
            }
          }
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 1
            i: 2
            i: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_14"
      op: "Shape"
      input: "transformer/while/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_58/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_58/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_58/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_58"
      op: "StridedSlice"
      input: "transformer/while/Shape_14"
      input: "transformer/while/strided_slice_58/stack"
      input: "transformer/while/strided_slice_58/stack_1"
      input: "transformer/while/strided_slice_58/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_59/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_59/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_59/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_59"
      op: "StridedSlice"
      input: "transformer/while/Shape_14"
      input: "transformer/while/strided_slice_59/stack"
      input: "transformer/while/strided_slice_59/stack_1"
      input: "transformer/while/strided_slice_59/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_60/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_60/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_60/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_60"
      op: "StridedSlice"
      input: "transformer/while/Shape_14"
      input: "transformer/while/strided_slice_60/stack"
      input: "transformer/while/strided_slice_60/stack_1"
      input: "transformer/while/strided_slice_60/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_14/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_14/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_14/shape"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/Reshape_14/shape/1"
      input: "transformer/while/Reshape_14/shape/2"
      input: "transformer/while/strided_slice_59"
      input: "transformer/while/strided_slice_60"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_14"
      op: "Reshape"
      input: "transformer/while/concat"
      input: "transformer/while/Reshape_14/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_15"
      op: "Shape"
      input: "transformer/while/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_61/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_61/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_61/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_61"
      op: "StridedSlice"
      input: "transformer/while/Shape_15"
      input: "transformer/while/strided_slice_61/stack"
      input: "transformer/while/strided_slice_61/stack_1"
      input: "transformer/while/strided_slice_61/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_62/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_62/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_62/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_62"
      op: "StridedSlice"
      input: "transformer/while/Shape_15"
      input: "transformer/while/strided_slice_62/stack"
      input: "transformer/while/strided_slice_62/stack_1"
      input: "transformer/while/strided_slice_62/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_63/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_63/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_63/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_63"
      op: "StridedSlice"
      input: "transformer/while/Shape_15"
      input: "transformer/while/strided_slice_63/stack"
      input: "transformer/while/strided_slice_63/stack_1"
      input: "transformer/while/strided_slice_63/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_15/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_15/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_15/shape"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/Reshape_15/shape/1"
      input: "transformer/while/Reshape_15/shape/2"
      input: "transformer/while/strided_slice_62"
      input: "transformer/while/strided_slice_63"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_15"
      op: "Reshape"
      input: "transformer/while/concat_1"
      input: "transformer/while/Reshape_15/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_16"
      op: "Shape"
      input: "transformer/while/Reshape_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_64/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_64/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_64/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_64"
      op: "StridedSlice"
      input: "transformer/while/Shape_16"
      input: "transformer/while/strided_slice_64/stack"
      input: "transformer/while/strided_slice_64/stack_1"
      input: "transformer/while/strided_slice_64/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_65/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_65/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_65/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_65"
      op: "StridedSlice"
      input: "transformer/while/Shape_16"
      input: "transformer/while/strided_slice_65/stack"
      input: "transformer/while/strided_slice_65/stack_1"
      input: "transformer/while/strided_slice_65/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_66/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_66/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_66/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_66"
      op: "StridedSlice"
      input: "transformer/while/Shape_16"
      input: "transformer/while/strided_slice_66/stack"
      input: "transformer/while/strided_slice_66/stack_1"
      input: "transformer/while/strided_slice_66/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_67/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_67/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_67/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_67"
      op: "StridedSlice"
      input: "transformer/while/Shape_16"
      input: "transformer/while/strided_slice_67/stack"
      input: "transformer/while/strided_slice_67/stack_1"
      input: "transformer/while/strided_slice_67/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_16/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_16/shape"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/Reshape_16/shape/1"
      input: "transformer/while/strided_slice_65"
      input: "transformer/while/strided_slice_66"
      input: "transformer/while/strided_slice_67"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_16"
      op: "Reshape"
      input: "transformer/while/Reshape_3"
      input: "transformer/while/Reshape_16/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_17"
      op: "Shape"
      input: "transformer/while/Reshape_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_68/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_68/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_68/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_68"
      op: "StridedSlice"
      input: "transformer/while/Shape_17"
      input: "transformer/while/strided_slice_68/stack"
      input: "transformer/while/strided_slice_68/stack_1"
      input: "transformer/while/strided_slice_68/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_69/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_69/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_69/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_69"
      op: "StridedSlice"
      input: "transformer/while/Shape_17"
      input: "transformer/while/strided_slice_69/stack"
      input: "transformer/while/strided_slice_69/stack_1"
      input: "transformer/while/strided_slice_69/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_17/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_17/shape/3"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_17/shape"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/Reshape_17/shape/1"
      input: "transformer/while/strided_slice_69"
      input: "transformer/while/Reshape_17/shape/3"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_17"
      op: "Reshape"
      input: "transformer/while/Reshape_4"
      input: "transformer/while/Reshape_17/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_18"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_70/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_70/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_70/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_70"
      op: "StridedSlice"
      input: "transformer/while/Shape_18"
      input: "transformer/while/strided_slice_70/stack"
      input: "transformer/while/strided_slice_70/stack_1"
      input: "transformer/while/strided_slice_70/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_71/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_71/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_71/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_71"
      op: "StridedSlice"
      input: "transformer/while/Shape_18"
      input: "transformer/while/strided_slice_71/stack"
      input: "transformer/while/strided_slice_71/stack_1"
      input: "transformer/while/strided_slice_71/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_18/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_18/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_18/shape/4"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_18/shape"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/Reshape_18/shape/1"
      input: "transformer/while/Reshape_18/shape/2"
      input: "transformer/while/strided_slice_71"
      input: "transformer/while/Reshape_18/shape/4"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_18"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat"
      input: "transformer/while/Reshape_18/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_19"
      op: "Shape"
      input: "transformer/while/Reshape_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_72/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_72/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_72/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_72"
      op: "StridedSlice"
      input: "transformer/while/Shape_19"
      input: "transformer/while/strided_slice_72/stack"
      input: "transformer/while/strided_slice_72/stack_1"
      input: "transformer/while/strided_slice_72/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_73/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_73/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_73/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_73"
      op: "StridedSlice"
      input: "transformer/while/Shape_19"
      input: "transformer/while/strided_slice_73/stack"
      input: "transformer/while/strided_slice_73/stack_1"
      input: "transformer/while/strided_slice_73/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_74/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_74/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_74/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_74"
      op: "StridedSlice"
      input: "transformer/while/Shape_19"
      input: "transformer/while/strided_slice_74/stack"
      input: "transformer/while/strided_slice_74/stack_1"
      input: "transformer/while/strided_slice_74/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_19/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_19/shape/4"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_19/shape"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/Reshape_19/shape/1"
      input: "transformer/while/strided_slice_73"
      input: "transformer/while/strided_slice_74"
      input: "transformer/while/Reshape_19/shape/4"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_19"
      op: "Reshape"
      input: "transformer/while/Reshape_6"
      input: "transformer/while/Reshape_19/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_20"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_75/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_75/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_75/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_75"
      op: "StridedSlice"
      input: "transformer/while/Shape_20"
      input: "transformer/while/strided_slice_75/stack"
      input: "transformer/while/strided_slice_75/stack_1"
      input: "transformer/while/strided_slice_75/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_76/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_76/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_76/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_76"
      op: "StridedSlice"
      input: "transformer/while/Shape_20"
      input: "transformer/while/strided_slice_76/stack"
      input: "transformer/while/strided_slice_76/stack_1"
      input: "transformer/while/strided_slice_76/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_20/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_20/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_20/shape/4"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_20/shape"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/Reshape_20/shape/1"
      input: "transformer/while/Reshape_20/shape/2"
      input: "transformer/while/strided_slice_76"
      input: "transformer/while/Reshape_20/shape/4"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_20"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1"
      input: "transformer/while/Reshape_20/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_21"
      op: "Shape"
      input: "transformer/while/Reshape_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_77/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_77/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_77/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_77"
      op: "StridedSlice"
      input: "transformer/while/Shape_21"
      input: "transformer/while/strided_slice_77/stack"
      input: "transformer/while/strided_slice_77/stack_1"
      input: "transformer/while/strided_slice_77/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_78/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_78/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_78/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_78"
      op: "StridedSlice"
      input: "transformer/while/Shape_21"
      input: "transformer/while/strided_slice_78/stack"
      input: "transformer/while/strided_slice_78/stack_1"
      input: "transformer/while/strided_slice_78/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_79/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_79/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_79/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_79"
      op: "StridedSlice"
      input: "transformer/while/Shape_21"
      input: "transformer/while/strided_slice_79/stack"
      input: "transformer/while/strided_slice_79/stack_1"
      input: "transformer/while/strided_slice_79/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_21/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_21/shape/4"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_21/shape"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/Reshape_21/shape/1"
      input: "transformer/while/strided_slice_78"
      input: "transformer/while/strided_slice_79"
      input: "transformer/while/Reshape_21/shape/4"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_21"
      op: "Reshape"
      input: "transformer/while/Reshape_8"
      input: "transformer/while/Reshape_21/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_22"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_80/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_80/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_80/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_80"
      op: "StridedSlice"
      input: "transformer/while/Shape_22"
      input: "transformer/while/strided_slice_80/stack"
      input: "transformer/while/strided_slice_80/stack_1"
      input: "transformer/while/strided_slice_80/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_81/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_81/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_81/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_81"
      op: "StridedSlice"
      input: "transformer/while/Shape_22"
      input: "transformer/while/strided_slice_81/stack"
      input: "transformer/while/strided_slice_81/stack_1"
      input: "transformer/while/strided_slice_81/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_22/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_22/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_22/shape/4"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_22/shape"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/Reshape_22/shape/1"
      input: "transformer/while/Reshape_22/shape/2"
      input: "transformer/while/strided_slice_81"
      input: "transformer/while/Reshape_22/shape/4"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_22"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat"
      input: "transformer/while/Reshape_22/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_23"
      op: "Shape"
      input: "transformer/while/Reshape_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_82/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_82/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_82/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_82"
      op: "StridedSlice"
      input: "transformer/while/Shape_23"
      input: "transformer/while/strided_slice_82/stack"
      input: "transformer/while/strided_slice_82/stack_1"
      input: "transformer/while/strided_slice_82/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_83/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_83/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_83/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_83"
      op: "StridedSlice"
      input: "transformer/while/Shape_23"
      input: "transformer/while/strided_slice_83/stack"
      input: "transformer/while/strided_slice_83/stack_1"
      input: "transformer/while/strided_slice_83/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_84/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_84/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_84/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_84"
      op: "StridedSlice"
      input: "transformer/while/Shape_23"
      input: "transformer/while/strided_slice_84/stack"
      input: "transformer/while/strided_slice_84/stack_1"
      input: "transformer/while/strided_slice_84/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_23/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_23/shape/4"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_23/shape"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/Reshape_23/shape/1"
      input: "transformer/while/strided_slice_83"
      input: "transformer/while/strided_slice_84"
      input: "transformer/while/Reshape_23/shape/4"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_23"
      op: "Reshape"
      input: "transformer/while/Reshape_10"
      input: "transformer/while/Reshape_23/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_24"
      op: "Shape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_85/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_85/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_85/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_85"
      op: "StridedSlice"
      input: "transformer/while/Shape_24"
      input: "transformer/while/strided_slice_85/stack"
      input: "transformer/while/strided_slice_85/stack_1"
      input: "transformer/while/strided_slice_85/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_86/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_86/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_86/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_86"
      op: "StridedSlice"
      input: "transformer/while/Shape_24"
      input: "transformer/while/strided_slice_86/stack"
      input: "transformer/while/strided_slice_86/stack_1"
      input: "transformer/while/strided_slice_86/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_24/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_24/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_24/shape/4"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_24/shape"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/Reshape_24/shape/1"
      input: "transformer/while/Reshape_24/shape/2"
      input: "transformer/while/strided_slice_86"
      input: "transformer/while/Reshape_24/shape/4"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_24"
      op: "Reshape"
      input: "transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1"
      input: "transformer/while/Reshape_24/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Shape_25"
      op: "Shape"
      input: "transformer/while/Reshape_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_87/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_87/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_87/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_87"
      op: "StridedSlice"
      input: "transformer/while/Shape_25"
      input: "transformer/while/strided_slice_87/stack"
      input: "transformer/while/strided_slice_87/stack_1"
      input: "transformer/while/strided_slice_87/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_88/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_88/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_88/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_88"
      op: "StridedSlice"
      input: "transformer/while/Shape_25"
      input: "transformer/while/strided_slice_88/stack"
      input: "transformer/while/strided_slice_88/stack_1"
      input: "transformer/while/strided_slice_88/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_89/stack"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_89/stack_1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 3
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_89/stack_2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/strided_slice_89"
      op: "StridedSlice"
      input: "transformer/while/Shape_25"
      input: "transformer/while/strided_slice_89/stack"
      input: "transformer/while/strided_slice_89/stack_1"
      input: "transformer/while/strided_slice_89/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "transformer/while/Reshape_25/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_25/shape/4"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 64
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_25/shape"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/Reshape_25/shape/1"
      input: "transformer/while/strided_slice_88"
      input: "transformer/while/strided_slice_89"
      input: "transformer/while/Reshape_25/shape/4"
      attr {
        key: "N"
        value {
          i: 5
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 5
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_25"
      op: "Reshape"
      input: "transformer/while/Reshape_12"
      input: "transformer/while/Reshape_25/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_26/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_26/shape/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_26/shape"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/Reshape_26/shape/1"
      input: "transformer/while/Reshape_26/shape/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_26"
      op: "Reshape"
      input: "transformer/while/Squeeze"
      input: "transformer/while/Reshape_26/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/Max/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/Max"
      op: "Max"
      input: "transformer/while/Reshape_26"
      input: "transformer/while/ReduceLogSumExp/Max/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/IsFinite"
      op: "IsFinite"
      input: "transformer/while/ReduceLogSumExp/Max"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/zeros_like"
      op: "ZerosLike"
      input: "transformer/while/ReduceLogSumExp/Max"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/Select"
      op: "Select"
      input: "transformer/while/ReduceLogSumExp/IsFinite"
      input: "transformer/while/ReduceLogSumExp/Max"
      input: "transformer/while/ReduceLogSumExp/zeros_like"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/StopGradient"
      op: "StopGradient"
      input: "transformer/while/ReduceLogSumExp/Select"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/Sub"
      op: "Sub"
      input: "transformer/while/Reshape_26"
      input: "transformer/while/ReduceLogSumExp/StopGradient"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/Exp"
      op: "Exp"
      input: "transformer/while/ReduceLogSumExp/Sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/Sum/reduction_indices"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/Sum"
      op: "Sum"
      input: "transformer/while/ReduceLogSumExp/Exp"
      input: "transformer/while/ReduceLogSumExp/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/Log"
      op: "Log"
      input: "transformer/while/ReduceLogSumExp/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ReduceLogSumExp/Add"
      op: "Add"
      input: "transformer/while/ReduceLogSumExp/Log"
      input: "transformer/while/ReduceLogSumExp/StopGradient"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/sub"
      op: "Sub"
      input: "transformer/while/Reshape_26"
      input: "transformer/while/ReduceLogSumExp/Add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ExpandDims_2/dim"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/ExpandDims_2"
      op: "ExpandDims"
      input: "transformer/while/Identity_2"
      input: "transformer/while/ExpandDims_2/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_5"
      op: "Add"
      input: "transformer/while/sub"
      input: "transformer/while/ExpandDims_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_6/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/add_6"
      op: "Add"
      input: "transformer/while/Identity"
      input: "transformer/while/add_6/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ToFloat_1"
      op: "Cast"
      input: "transformer/while/add_6"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_7/x"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 5.0
          }
        }
      }
    }
    node {
      name: "transformer/while/add_7"
      op: "Add"
      input: "transformer/while/add_7/x"
      input: "transformer/while/ToFloat_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/truediv_2/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 6.0
          }
        }
      }
    }
    node {
      name: "transformer/while/truediv_2"
      op: "RealDiv"
      input: "transformer/while/add_7"
      input: "transformer/while/truediv_2/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Pow_1/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.6000000238418579
          }
        }
      }
    }
    node {
      name: "transformer/while/Pow_1"
      op: "Pow"
      input: "transformer/while/truediv_2"
      input: "transformer/while/Pow_1/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/truediv_3"
      op: "RealDiv"
      input: "transformer/while/add_5"
      input: "transformer/while/Pow_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_27/shape"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\377\377\377\377T\235\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_27"
      op: "Reshape"
      input: "transformer/while/truediv_3"
      input: "transformer/while/Reshape_27/shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 40276
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/TopKV2/k"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/TopKV2"
      op: "TopKV2"
      input: "transformer/while/Reshape_27"
      input: "transformer/while/TopKV2/k"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_14"
      op: "Mul"
      input: "transformer/while/TopKV2"
      input: "transformer/while/Pow_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/floordiv/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10069
          }
        }
      }
    }
    node {
      name: "transformer/while/floordiv"
      op: "FloorDiv"
      input: "transformer/while/TopKV2:1"
      input: "transformer/while/floordiv/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mod/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 10069
          }
        }
      }
    }
    node {
      name: "transformer/while/mod"
      op: "FloorMod"
      input: "transformer/while/TopKV2:1"
      input: "transformer/while/mod/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_15/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_15"
      op: "Mul"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/mul_15/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/range/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/range/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/range"
      op: "Range"
      input: "transformer/while/range/start"
      input: "transformer/while/mul_15"
      input: "transformer/while/range/delta"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/floordiv_1/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/floordiv_1"
      op: "FloorDiv"
      input: "transformer/while/range"
      input: "transformer/while/floordiv_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_28/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 8
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_28/shape"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/Reshape_28/shape/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_28"
      op: "Reshape"
      input: "transformer/while/floordiv_1"
      input: "transformer/while/Reshape_28/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/stack"
      op: "Pack"
      input: "transformer/while/Reshape_28"
      input: "transformer/while/floordiv"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 2
        }
      }
    }
    node {
      name: "transformer/while/GatherNd"
      op: "GatherNd"
      input: "transformer/while/Identity_1"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_1"
      op: "GatherNd"
      input: "transformer/while/Reshape_14"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_2"
      op: "GatherNd"
      input: "transformer/while/Reshape_15"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_3"
      op: "GatherNd"
      input: "transformer/while/Reshape_16"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_4"
      op: "GatherNd"
      input: "transformer/while/Reshape_17"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_5"
      op: "GatherNd"
      input: "transformer/while/Reshape_18"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_6"
      op: "GatherNd"
      input: "transformer/while/Reshape_19"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_7"
      op: "GatherNd"
      input: "transformer/while/Reshape_20"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_8"
      op: "GatherNd"
      input: "transformer/while/Reshape_21"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_9"
      op: "GatherNd"
      input: "transformer/while/Reshape_22"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_10"
      op: "GatherNd"
      input: "transformer/while/Reshape_23"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_11"
      op: "GatherNd"
      input: "transformer/while/Reshape_24"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/GatherNd_12"
      op: "GatherNd"
      input: "transformer/while/Reshape_25"
      input: "transformer/while/stack"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ExpandDims_3/dim"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/ExpandDims_3"
      op: "ExpandDims"
      input: "transformer/while/mod"
      input: "transformer/while/ExpandDims_3/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_2/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_2"
      op: "ConcatV2"
      input: "transformer/while/GatherNd"
      input: "transformer/while/ExpandDims_3"
      input: "transformer/while/concat_2/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Equal_1/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/Equal_1"
      op: "Equal"
      input: "transformer/while/mod"
      input: "transformer/while/Equal_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ToFloat_2"
      op: "Cast"
      input: "transformer/while/Equal_1"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_16/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -10000000.0
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_16"
      op: "Mul"
      input: "transformer/while/ToFloat_2"
      input: "transformer/while/mul_16/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_8"
      op: "Add"
      input: "transformer/while/TopKV2"
      input: "transformer/while/mul_16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/TopKV2_1/k"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/TopKV2_1"
      op: "TopKV2"
      input: "transformer/while/add_8"
      input: "transformer/while/TopKV2_1/k"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_17/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_17"
      op: "Mul"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/mul_17/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/range_1/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/range_1/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/range_1"
      op: "Range"
      input: "transformer/while/range_1/start"
      input: "transformer/while/mul_17"
      input: "transformer/while/range_1/delta"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/floordiv_2/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/floordiv_2"
      op: "FloorDiv"
      input: "transformer/while/range_1"
      input: "transformer/while/floordiv_2/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_29/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_29/shape"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/Reshape_29/shape/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_29"
      op: "Reshape"
      input: "transformer/while/floordiv_2"
      input: "transformer/while/Reshape_29/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/stack_1"
      op: "Pack"
      input: "transformer/while/Reshape_29"
      input: "transformer/while/TopKV2_1:1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 2
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_seq"
      op: "GatherNd"
      input: "transformer/while/concat_2"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_flags"
      op: "GatherNd"
      input: "transformer/while/Equal_1"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_scores"
      op: "GatherNd"
      input: "transformer/while/mul_14"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states"
      op: "GatherNd"
      input: "transformer/while/GatherNd_1"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states_1"
      op: "GatherNd"
      input: "transformer/while/GatherNd_2"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states_2"
      op: "GatherNd"
      input: "transformer/while/GatherNd_3"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states_3"
      op: "GatherNd"
      input: "transformer/while/GatherNd_4"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states_4"
      op: "GatherNd"
      input: "transformer/while/GatherNd_5"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states_5"
      op: "GatherNd"
      input: "transformer/while/GatherNd_6"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states_6"
      op: "GatherNd"
      input: "transformer/while/GatherNd_7"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states_7"
      op: "GatherNd"
      input: "transformer/while/GatherNd_8"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states_8"
      op: "GatherNd"
      input: "transformer/while/GatherNd_9"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states_9"
      op: "GatherNd"
      input: "transformer/while/GatherNd_10"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states_10"
      op: "GatherNd"
      input: "transformer/while/GatherNd_11"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_alive_topk_states_11"
      op: "GatherNd"
      input: "transformer/while/GatherNd_12"
      input: "transformer/while/stack_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/zeros/mul/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/zeros/mul"
      op: "Mul"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/zeros/mul/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/zeros/mul_1/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/zeros/mul_1"
      op: "Mul"
      input: "transformer/while/zeros/mul"
      input: "transformer/while/zeros/mul_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/zeros/Less/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1000
          }
        }
      }
    }
    node {
      name: "transformer/while/zeros/Less"
      op: "Less"
      input: "transformer/while/zeros/mul_1"
      input: "transformer/while/zeros/Less/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/zeros/packed/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/zeros/packed/2"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/zeros/packed"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/zeros/packed/1"
      input: "transformer/while/zeros/packed/2"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/zeros/Const"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/zeros"
      op: "Fill"
      input: "transformer/while/zeros/packed"
      input: "transformer/while/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_3/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_3"
      op: "ConcatV2"
      input: "transformer/while/Identity_3"
      input: "transformer/while/zeros"
      input: "transformer/while/concat_3/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/ToFloat_3"
      op: "Cast"
      input: "transformer/while/Equal_1"
      attr {
        key: "DstT"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/sub_1/x"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "transformer/while/sub_1"
      op: "Sub"
      input: "transformer/while/sub_1/x"
      input: "transformer/while/ToFloat_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_18/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: -10000000.0
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_18"
      op: "Mul"
      input: "transformer/while/sub_1"
      input: "transformer/while/mul_18/y"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_9"
      op: "Add"
      input: "transformer/while/TopKV2"
      input: "transformer/while/mul_18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 8
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_4/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_4"
      op: "ConcatV2"
      input: "transformer/while/concat_3"
      input: "transformer/while/concat_2"
      input: "transformer/while/concat_4/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 12
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_5/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_5"
      op: "ConcatV2"
      input: "transformer/while/Identity_4"
      input: "transformer/while/add_9"
      input: "transformer/while/concat_5/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 12
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_6/axis"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/concat_6"
      op: "ConcatV2"
      input: "transformer/while/Identity_5"
      input: "transformer/while/Equal_1"
      input: "transformer/while/concat_6/axis"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 12
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/TopKV2_2/k"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/TopKV2_2"
      op: "TopKV2"
      input: "transformer/while/concat_5"
      input: "transformer/while/TopKV2_2/k"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_19/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/mul_19"
      op: "Mul"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/mul_19/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/range_2/start"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "transformer/while/range_2/delta"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/range_2"
      op: "Range"
      input: "transformer/while/range_2/start"
      input: "transformer/while/mul_19"
      input: "transformer/while/range_2/delta"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/floordiv_3/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/floordiv_3"
      op: "FloorDiv"
      input: "transformer/while/range_2"
      input: "transformer/while/floordiv_3/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_30/shape/1"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_30/shape"
      op: "Pack"
      input: "transformer/while/mul/Enter"
      input: "transformer/while/Reshape_30/shape/1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Reshape_30"
      op: "Reshape"
      input: "transformer/while/floordiv_3"
      input: "transformer/while/Reshape_30/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/stack_2"
      op: "Pack"
      input: "transformer/while/Reshape_30"
      input: "transformer/while/TopKV2_2:1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 2
        }
      }
    }
    node {
      name: "transformer/while/grow_finished_topk_seq"
      op: "GatherNd"
      input: "transformer/while/concat_4"
      input: "transformer/while/stack_2"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_finished_topk_flags"
      op: "GatherNd"
      input: "transformer/while/concat_6"
      input: "transformer/while/stack_2"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/grow_finished_topk_scores"
      op: "GatherNd"
      input: "transformer/while/concat_5"
      input: "transformer/while/stack_2"
      attr {
        key: "Tindices"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/add_10/y"
      op: "Const"
      input: "^transformer/while/Identity"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/while/add_10"
      op: "Add"
      input: "transformer/while/Identity"
      input: "transformer/while/add_10/y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration"
      op: "NextIteration"
      input: "transformer/while/add_10"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_1"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_seq"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_2"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_scores"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_3"
      op: "NextIteration"
      input: "transformer/while/grow_finished_topk_seq"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_4"
      op: "NextIteration"
      input: "transformer/while/grow_finished_topk_scores"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_5"
      op: "NextIteration"
      input: "transformer/while/grow_finished_topk_flags"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_6"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_7"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_8"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_9"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_10"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_11"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states_5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_12"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_13"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_14"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_15"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_16"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/NextIteration_17"
      op: "NextIteration"
      input: "transformer/while/grow_alive_topk_states_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit"
      op: "Exit"
      input: "transformer/while/Switch"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_1"
      op: "Exit"
      input: "transformer/while/Switch_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_2"
      op: "Exit"
      input: "transformer/while/Switch_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_3"
      op: "Exit"
      input: "transformer/while/Switch_3"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_4"
      op: "Exit"
      input: "transformer/while/Switch_4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_5"
      op: "Exit"
      input: "transformer/while/Switch_5"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_6"
      op: "Exit"
      input: "transformer/while/Switch_6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_7"
      op: "Exit"
      input: "transformer/while/Switch_7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_8"
      op: "Exit"
      input: "transformer/while/Switch_8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_9"
      op: "Exit"
      input: "transformer/while/Switch_9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_10"
      op: "Exit"
      input: "transformer/while/Switch_10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_11"
      op: "Exit"
      input: "transformer/while/Switch_11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_12"
      op: "Exit"
      input: "transformer/while/Switch_12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_13"
      op: "Exit"
      input: "transformer/while/Switch_13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_14"
      op: "Exit"
      input: "transformer/while/Switch_14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_15"
      op: "Exit"
      input: "transformer/while/Switch_15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_16"
      op: "Exit"
      input: "transformer/while/Switch_16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/while/Exit_17"
      op: "Exit"
      input: "transformer/while/Switch_17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 64
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Any/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/Any"
      op: "Any"
      input: "transformer/while/Exit_5"
      input: "transformer/Any/reduction_indices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Select"
      op: "Select"
      input: "transformer/Any"
      input: "transformer/while/Exit_3"
      input: "transformer/while/Exit_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Any_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "transformer/Any_1"
      op: "Any"
      input: "transformer/while/Exit_5"
      input: "transformer/Any_1/reduction_indices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/Select_1"
      op: "Select"
      input: "transformer/Any_1"
      input: "transformer/while/Exit_4"
      input: "transformer/while/Exit_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_12/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_12/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_12/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_12"
      op: "StridedSlice"
      input: "transformer/Select"
      input: "transformer/strided_slice_12/stack"
      input: "transformer/strided_slice_12/stack_1"
      input: "transformer/strided_slice_12/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 5
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 2
        }
      }
    }
    node {
      name: "transformer/strided_slice_13/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_13/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_13/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\001\000\000\000"
          }
        }
      }
    }
    node {
      name: "transformer/strided_slice_13"
      op: "StridedSlice"
      input: "transformer/Select_1"
      input: "transformer/strided_slice_13/stack"
      input: "transformer/strided_slice_13/stack_1"
      input: "transformer/strided_slice_13/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 1
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 2
        }
      }
    }
    node {
      name: "Shape_1"
      op: "Shape"
      input: "transformer/strided_slice_12"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Shape_1"
      input: "strided_slice_1/stack"
      input: "strided_slice_1/stack_1"
      input: "strided_slice_1/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "Shape_1"
      input: "strided_slice_2/stack"
      input: "strided_slice_2/stack_1"
      input: "strided_slice_2/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "input_space_id"
      input: "ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "Tile/multiples"
      op: "Pack"
      input: "strided_slice_1"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "Tile"
      op: "Tile"
      input: "ExpandDims"
      input: "Tile/multiples"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "Shape_2"
      op: "Shape"
      input: "transformer/strided_slice_12"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "strided_slice_3/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "strided_slice_3"
      op: "StridedSlice"
      input: "Shape_2"
      input: "strided_slice_3/stack"
      input: "strided_slice_3/stack_1"
      input: "strided_slice_3/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "strided_slice_4/stack"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "strided_slice_4"
      op: "StridedSlice"
      input: "Shape_2"
      input: "strided_slice_4/stack"
      input: "strided_slice_4/stack_1"
      input: "strided_slice_4/stack_2"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "target_space_id"
      input: "ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "Tile_1/multiples"
      op: "Pack"
      input: "strided_slice_3"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "Tile_1"
      op: "Tile"
      input: "ExpandDims_1"
      input: "Tile_1/multiples"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "init"
      op: "NoOp"
    }
    node {
      name: "init_all_tables"
      op: "NoOp"
    }
    node {
      name: "init_1"
      op: "NoOp"
    }
    node {
      name: "group_deps"
      op: "NoOp"
      input: "^init"
      input: "^init_1"
      input: "^init_all_tables"
    }
    node {
      name: "save/filename/input"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/filename"
      op: "PlaceholderWithDefault"
      input: "save/filename/input"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
    }
    node {
      name: "save/Const"
      op: "PlaceholderWithDefault"
      input: "save/filename"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
    }
    node {
      name: "save/StringJoin/inputs_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_6db7467617924203a5490ac9983a4648/part"
          }
        }
      }
    }
    node {
      name: "save/StringJoin"
      op: "StringJoin"
      input: "save/Const"
      input: "save/StringJoin/inputs_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename/shard"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename"
      op: "ShardedFilename"
      input: "save/StringJoin"
      input: "save/ShardedFilename/shard"
      input: "save/num_shards"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/SaveV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 82
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 82
              }
            }
            string_val: "global_step"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/decoder/layer_0/ffn/conv1/bias"
            string_val: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
            string_val: "transformer/body/decoder/layer_0/ffn/conv2/bias"
            string_val: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
            string_val: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/decoder/layer_1/ffn/conv1/bias"
            string_val: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
            string_val: "transformer/body/decoder/layer_1/ffn/conv2/bias"
            string_val: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
            string_val: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_0/ffn/conv1/bias"
            string_val: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
            string_val: "transformer/body/encoder/layer_0/ffn/conv2/bias"
            string_val: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
            string_val: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/encoder/layer_1/ffn/conv1/bias"
            string_val: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
            string_val: "transformer/body/encoder/layer_1/ffn/conv2/bias"
            string_val: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
            string_val: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/target_space_embedding/kernel"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_0"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_1"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_10"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_11"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_12"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_13"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_14"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_15"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_2"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_3"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_4"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_5"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_6"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_7"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_8"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_9"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 82
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 82
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/SaveV2"
      op: "SaveV2"
      input: "save/ShardedFilename"
      input: "save/SaveV2/tensor_names"
      input: "save/SaveV2/shape_and_slices"
      input: "global_step"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_0/ffn/conv1/bias"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
      input: "transformer/body/decoder/layer_0/ffn/conv2/bias"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_1/ffn/conv1/bias"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
      input: "transformer/body/decoder/layer_1/ffn/conv2/bias"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_0/ffn/conv1/bias"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
      input: "transformer/body/encoder/layer_0/ffn/conv2/bias"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/encoder/layer_1/ffn/conv1/bias"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
      input: "transformer/body/encoder/layer_1/ffn/conv2/bias"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "transformer/body/target_space_embedding/kernel"
      input: "transformer/symbol_modality_10069_256/shared/weights_0"
      input: "transformer/symbol_modality_10069_256/shared/weights_1"
      input: "transformer/symbol_modality_10069_256/shared/weights_10"
      input: "transformer/symbol_modality_10069_256/shared/weights_11"
      input: "transformer/symbol_modality_10069_256/shared/weights_12"
      input: "transformer/symbol_modality_10069_256/shared/weights_13"
      input: "transformer/symbol_modality_10069_256/shared/weights_14"
      input: "transformer/symbol_modality_10069_256/shared/weights_15"
      input: "transformer/symbol_modality_10069_256/shared/weights_2"
      input: "transformer/symbol_modality_10069_256/shared/weights_3"
      input: "transformer/symbol_modality_10069_256/shared/weights_4"
      input: "transformer/symbol_modality_10069_256/shared/weights_5"
      input: "transformer/symbol_modality_10069_256/shared/weights_6"
      input: "transformer/symbol_modality_10069_256/shared/weights_7"
      input: "transformer/symbol_modality_10069_256/shared/weights_8"
      input: "transformer/symbol_modality_10069_256/shared/weights_9"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT64
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/control_dependency"
      op: "Identity"
      input: "save/ShardedFilename"
      input: "^save/SaveV2"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save/ShardedFilename"
      input: "^save/control_dependency"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save/Const"
      device: "/device:CPU:0"
    }
    node {
      name: "save/Identity"
      op: "Identity"
      input: "save/Const"
      input: "^save/MergeV2Checkpoints"
      input: "^save/control_dependency"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 82
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 82
              }
            }
            string_val: "global_step"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/decoder/layer_0/ffn/conv1/bias"
            string_val: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
            string_val: "transformer/body/decoder/layer_0/ffn/conv2/bias"
            string_val: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
            string_val: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/decoder/layer_1/ffn/conv1/bias"
            string_val: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
            string_val: "transformer/body/decoder/layer_1/ffn/conv2/bias"
            string_val: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
            string_val: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_0/ffn/conv1/bias"
            string_val: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
            string_val: "transformer/body/encoder/layer_0/ffn/conv2/bias"
            string_val: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
            string_val: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/encoder/layer_1/ffn/conv1/bias"
            string_val: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
            string_val: "transformer/body/encoder/layer_1/ffn/conv2/bias"
            string_val: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
            string_val: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
            string_val: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
            string_val: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
            string_val: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
            string_val: "transformer/body/target_space_embedding/kernel"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_0"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_1"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_10"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_11"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_12"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_13"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_14"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_15"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_2"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_3"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_4"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_5"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_6"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_7"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_8"
            string_val: "transformer/symbol_modality_10069_256/shared/weights_9"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 82
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 82
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2/tensor_names"
      input: "save/RestoreV2/shape_and_slices"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_INT64
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign"
      op: "Assign"
      input: "global_step"
      input: "save/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@global_step"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_1"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_2"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_3"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
      input: "save/RestoreV2:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_4"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
      input: "save/RestoreV2:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_5"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
      input: "save/RestoreV2:5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_6"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
      input: "save/RestoreV2:6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_7"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv1/bias"
      input: "save/RestoreV2:7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_8"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv1/kernel"
      input: "save/RestoreV2:8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_9"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv2/bias"
      input: "save/RestoreV2:9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_10"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/conv2/kernel"
      input: "save/RestoreV2:10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_11"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2:11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_12"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2:12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_13"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2:13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_14"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2:14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_15"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
      input: "save/RestoreV2:15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_16"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      input: "save/RestoreV2:16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_17"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
      input: "save/RestoreV2:17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_18"
      op: "Assign"
      input: "transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
      input: "save/RestoreV2:18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_19"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2:19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_20"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2:20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_21"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
      input: "save/RestoreV2:21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_22"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
      input: "save/RestoreV2:22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_23"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
      input: "save/RestoreV2:23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_24"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
      input: "save/RestoreV2:24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_25"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv1/bias"
      input: "save/RestoreV2:25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_26"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv1/kernel"
      input: "save/RestoreV2:26"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_27"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv2/bias"
      input: "save/RestoreV2:27"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_28"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/conv2/kernel"
      input: "save/RestoreV2:28"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_29"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2:29"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_30"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2:30"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_31"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2:31"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_32"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2:32"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_33"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
      input: "save/RestoreV2:33"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_34"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      input: "save/RestoreV2:34"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_35"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
      input: "save/RestoreV2:35"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_36"
      op: "Assign"
      input: "transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
      input: "save/RestoreV2:36"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_37"
      op: "Assign"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2:37"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_38"
      op: "Assign"
      input: "transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2:38"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_39"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv1/bias"
      input: "save/RestoreV2:39"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_40"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv1/kernel"
      input: "save/RestoreV2:40"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_41"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv2/bias"
      input: "save/RestoreV2:41"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_42"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/conv2/kernel"
      input: "save/RestoreV2:42"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_43"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2:43"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_44"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2:44"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_45"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2:45"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_46"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2:46"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_47"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
      input: "save/RestoreV2:47"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_48"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
      input: "save/RestoreV2:48"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_49"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
      input: "save/RestoreV2:49"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_50"
      op: "Assign"
      input: "transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
      input: "save/RestoreV2:50"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_51"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv1/bias"
      input: "save/RestoreV2:51"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_52"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv1/kernel"
      input: "save/RestoreV2:52"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv1/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 1024
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_53"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv2/bias"
      input: "save/RestoreV2:53"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_54"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/conv2/kernel"
      input: "save/RestoreV2:54"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/conv2/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1024
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_55"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2:55"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_56"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2:56"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_57"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2:57"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_58"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2:58"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_59"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
      input: "save/RestoreV2:59"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_60"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
      input: "save/RestoreV2:60"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_61"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
      input: "save/RestoreV2:61"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_62"
      op: "Assign"
      input: "transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
      input: "save/RestoreV2:62"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_63"
      op: "Assign"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
      input: "save/RestoreV2:63"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_64"
      op: "Assign"
      input: "transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
      input: "save/RestoreV2:64"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_65"
      op: "Assign"
      input: "transformer/body/target_space_embedding/kernel"
      input: "save/RestoreV2:65"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/body/target_space_embedding/kernel"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 32
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_66"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_0"
      input: "save/RestoreV2:66"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_0"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_67"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_1"
      input: "save/RestoreV2:67"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_68"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_10"
      input: "save/RestoreV2:68"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_10"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_69"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_11"
      input: "save/RestoreV2:69"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_11"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_70"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_12"
      input: "save/RestoreV2:70"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_12"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_71"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_13"
      input: "save/RestoreV2:71"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_13"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_72"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_14"
      input: "save/RestoreV2:72"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_14"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_73"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_15"
      input: "save/RestoreV2:73"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_15"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_74"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_2"
      input: "save/RestoreV2:74"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_75"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_3"
      input: "save/RestoreV2:75"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_3"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_76"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_4"
      input: "save/RestoreV2:76"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_4"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 630
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_77"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_5"
      input: "save/RestoreV2:77"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_5"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_78"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_6"
      input: "save/RestoreV2:78"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_6"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_79"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_7"
      input: "save/RestoreV2:79"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_7"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_80"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_8"
      input: "save/RestoreV2:80"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_8"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Assign_81"
      op: "Assign"
      input: "transformer/symbol_modality_10069_256/shared/weights_9"
      input: "save/RestoreV2:81"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@transformer/symbol_modality_10069_256/shared/weights_9"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 629
              }
              dim {
                size: 256
              }
            }
          }
        }
      }
    }
    node {
      name: "save/restore_shard"
      op: "NoOp"
      input: "^save/Assign"
      input: "^save/Assign_1"
      input: "^save/Assign_10"
      input: "^save/Assign_11"
      input: "^save/Assign_12"
      input: "^save/Assign_13"
      input: "^save/Assign_14"
      input: "^save/Assign_15"
      input: "^save/Assign_16"
      input: "^save/Assign_17"
      input: "^save/Assign_18"
      input: "^save/Assign_19"
      input: "^save/Assign_2"
      input: "^save/Assign_20"
      input: "^save/Assign_21"
      input: "^save/Assign_22"
      input: "^save/Assign_23"
      input: "^save/Assign_24"
      input: "^save/Assign_25"
      input: "^save/Assign_26"
      input: "^save/Assign_27"
      input: "^save/Assign_28"
      input: "^save/Assign_29"
      input: "^save/Assign_3"
      input: "^save/Assign_30"
      input: "^save/Assign_31"
      input: "^save/Assign_32"
      input: "^save/Assign_33"
      input: "^save/Assign_34"
      input: "^save/Assign_35"
      input: "^save/Assign_36"
      input: "^save/Assign_37"
      input: "^save/Assign_38"
      input: "^save/Assign_39"
      input: "^save/Assign_4"
      input: "^save/Assign_40"
      input: "^save/Assign_41"
      input: "^save/Assign_42"
      input: "^save/Assign_43"
      input: "^save/Assign_44"
      input: "^save/Assign_45"
      input: "^save/Assign_46"
      input: "^save/Assign_47"
      input: "^save/Assign_48"
      input: "^save/Assign_49"
      input: "^save/Assign_5"
      input: "^save/Assign_50"
      input: "^save/Assign_51"
      input: "^save/Assign_52"
      input: "^save/Assign_53"
      input: "^save/Assign_54"
      input: "^save/Assign_55"
      input: "^save/Assign_56"
      input: "^save/Assign_57"
      input: "^save/Assign_58"
      input: "^save/Assign_59"
      input: "^save/Assign_6"
      input: "^save/Assign_60"
      input: "^save/Assign_61"
      input: "^save/Assign_62"
      input: "^save/Assign_63"
      input: "^save/Assign_64"
      input: "^save/Assign_65"
      input: "^save/Assign_66"
      input: "^save/Assign_67"
      input: "^save/Assign_68"
      input: "^save/Assign_69"
      input: "^save/Assign_7"
      input: "^save/Assign_70"
      input: "^save/Assign_71"
      input: "^save/Assign_72"
      input: "^save/Assign_73"
      input: "^save/Assign_74"
      input: "^save/Assign_75"
      input: "^save/Assign_76"
      input: "^save/Assign_77"
      input: "^save/Assign_78"
      input: "^save/Assign_79"
      input: "^save/Assign_8"
      input: "^save/Assign_80"
      input: "^save/Assign_81"
      input: "^save/Assign_9"
    }
    node {
      name: "save/restore_all"
      op: "NoOp"
      input: "^save/restore_shard"
    }
    library {
      function {
        signature {
          name: "__inference_Dataset_map_TranslateUp2down.decode_example_29"
          input_arg {
            name: "args_0"
            type: DT_STRING
          }
          output_arg {
            name: "identity"
            type: DT_INT64
          }
          output_arg {
            name: "identity_1"
            type: DT_INT64
          }
          output_arg {
            name: "identity_2"
            type: DT_INT64
          }
        }
        node_def {
          name: "ParseSingleExample/key_batch_prediction_key"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT64
                tensor_shape {
                }
                int64_val: 0
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/Reshape/shape"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 1
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/Reshape"
          op: "Reshape"
          input: "ParseSingleExample/key_batch_prediction_key:output:0"
          input: "ParseSingleExample/Reshape/shape:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "ParseSingleExample/ParseSingleExample"
          op: "ParseSingleExample"
          input: "args_0"
          input: "ParseSingleExample/Reshape:output:0"
          attr {
            key: "Tdense"
            value {
              list {
                type: DT_INT64
              }
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                  dim {
                    size: 1
                  }
                }
                shape {
                  dim {
                    size: -1
                  }
                  dim {
                    size: 1
                  }
                }
                shape {
                  dim {
                    size: -1
                  }
                }
                shape {
                  dim {
                    size: -1
                  }
                }
                shape {
                  dim {
                    size: 1
                  }
                }
                shape {
                  dim {
                    size: 1
                  }
                }
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "dense_keys"
            value {
              list {
                s: "batch_prediction_key"
              }
            }
          }
          attr {
            key: "dense_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "num_sparse"
            value {
              i: 2
            }
          }
          attr {
            key: "sparse_keys"
            value {
              list {
                s: "inputs"
                s: "targets"
              }
            }
          }
          attr {
            key: "sparse_types"
            value {
              list {
                type: DT_INT64
                type: DT_INT64
              }
            }
          }
        }
        node_def {
          name: "Reshape/shape"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 1
              }
            }
          }
        }
        node_def {
          name: "Reshape"
          op: "Reshape"
          input: "ParseSingleExample/ParseSingleExample:dense_values:0"
          input: "Reshape/shape:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "SparseToDense/default_value"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT64
                tensor_shape {
                }
                int64_val: 0
              }
            }
          }
        }
        node_def {
          name: "SparseToDense"
          op: "SparseToDense"
          input: "ParseSingleExample/ParseSingleExample:sparse_indices:0"
          input: "ParseSingleExample/ParseSingleExample:sparse_shapes:0"
          input: "ParseSingleExample/ParseSingleExample:sparse_values:0"
          input: "SparseToDense/default_value:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "Tindices"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "SparseToDense_1/default_value"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT64
                tensor_shape {
                }
                int64_val: 0
              }
            }
          }
        }
        node_def {
          name: "SparseToDense_1"
          op: "SparseToDense"
          input: "ParseSingleExample/ParseSingleExample:sparse_indices:1"
          input: "ParseSingleExample/ParseSingleExample:sparse_shapes:1"
          input: "ParseSingleExample/ParseSingleExample:sparse_values:1"
          input: "SparseToDense_1/default_value:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "Tindices"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "Identity"
          op: "Identity"
          input: "Reshape:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "Identity_1"
          op: "Identity"
          input: "SparseToDense:dense:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "Identity_2"
          op: "Identity"
          input: "SparseToDense_1:dense:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                }
              }
            }
          }
        }
        ret {
          key: "identity"
          value: "Identity:output:0"
        }
        ret {
          key: "identity_1"
          value: "Identity_1:output:0"
        }
        ret {
          key: "identity_2"
          value: "Identity_2:output:0"
        }
        attr {
          key: "_input_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        arg_attr {
          key: 0
          value {
            attr {
              key: "_user_specified_name"
              value {
                s: "args_0"
              }
            }
          }
        }
      }
      function {
        signature {
          name: "convert_gradient_to_tensor_HBc3xYw22Mw"
          input_arg {
            name: "x_0"
            type: DT_FLOAT
          }
          output_arg {
            name: "x"
            type: DT_FLOAT
          }
          description: "Identity operation whose gradient is converted to a `Tensor`.\n\n  Currently, the gradient to `tf.concat` is particularly expensive to\n  compute if dy is an `IndexedSlices` (a lack of GPU implementation\n  forces the gradient operation onto CPU).  This situation occurs when\n  the output of the `tf.concat` is eventually passed to `tf.gather`.\n  It is sometimes faster to convert the gradient to a `Tensor`, so as\n  to get the cheaper gradient for `tf.concat`.  To do this, replace\n  `tf.concat(x)` with `convert_gradient_to_tensor(tf.concat(x))`.\n\n  Args:\n    x: A `Tensor`.\n\n  Returns:\n    The input `Tensor`.\n  "
        }
        ret {
          key: "x"
          value: "x_0"
        }
        attr {
          key: "_disable_call_shape_inference"
          value {
            b: true
          }
        }
        arg_attr {
          key: 0
          value {
          }
        }
      }
      function {
        signature {
          name: "__inference_Dataset_map_<lambda>_38"
          input_arg {
            name: "args_0"
            type: DT_INT64
          }
          input_arg {
            name: "args_1"
            type: DT_INT64
          }
          input_arg {
            name: "args_2"
            type: DT_INT64
          }
          output_arg {
            name: "identity"
            type: DT_INT64
          }
          output_arg {
            name: "identity_1"
            type: DT_INT64
          }
          output_arg {
            name: "identity_2"
            type: DT_INT64
          }
        }
        node_def {
          name: "Identity"
          op: "Identity"
          input: "args_0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "Identity_1"
          op: "Identity"
          input: "args_1"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "Identity_2"
          op: "Identity"
          input: "args_2"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                }
              }
            }
          }
        }
        ret {
          key: "identity"
          value: "Identity:output:0"
        }
        ret {
          key: "identity_1"
          value: "Identity_1:output:0"
        }
        ret {
          key: "identity_2"
          value: "Identity_2:output:0"
        }
        attr {
          key: "_input_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: -1
                }
              }
              shape {
                dim {
                  size: -1
                }
              }
            }
          }
        }
        arg_attr {
          key: 0
          value {
            attr {
              key: "_user_specified_name"
              value {
                s: "args_0"
              }
            }
          }
        }
        arg_attr {
          key: 1
          value {
            attr {
              key: "_user_specified_name"
              value {
                s: "args_1"
              }
            }
          }
        }
        arg_attr {
          key: 2
          value {
            attr {
              key: "_user_specified_name"
              value {
                s: "args_2"
              }
            }
          }
        }
      }
      function {
        signature {
          name: "__inference_Dataset_map_standardize_shapes_80"
          input_arg {
            name: "args_0"
            type: DT_INT32
          }
          input_arg {
            name: "args_1"
            type: DT_INT32
          }
          input_arg {
            name: "args_2"
            type: DT_INT32
          }
          output_arg {
            name: "identity"
            type: DT_INT32
          }
          output_arg {
            name: "identity_1"
            type: DT_INT32
          }
          output_arg {
            name: "identity_2"
            type: DT_INT32
          }
        }
        node_def {
          name: "ExpandDims/dim"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
        }
        node_def {
          name: "ExpandDims"
          op: "ExpandDims"
          input: "args_1"
          input: "ExpandDims/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                  dim {
                    size: -1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "ExpandDims_1/dim"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
        }
        node_def {
          name: "ExpandDims_1"
          op: "ExpandDims"
          input: "ExpandDims:output:0"
          input: "ExpandDims_1/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                  dim {
                    size: -1
                  }
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "ExpandDims_2/dim"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
        }
        node_def {
          name: "ExpandDims_2"
          op: "ExpandDims"
          input: "args_2"
          input: "ExpandDims_2/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                  dim {
                    size: -1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "ExpandDims_3/dim"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
        }
        node_def {
          name: "ExpandDims_3"
          op: "ExpandDims"
          input: "ExpandDims_2:output:0"
          input: "ExpandDims_3/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                  dim {
                    size: -1
                  }
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "Identity"
          op: "Identity"
          input: "args_0"
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "Identity_1"
          op: "Identity"
          input: "ExpandDims_1:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                  dim {
                    size: -1
                  }
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "Identity_2"
          op: "Identity"
          input: "ExpandDims_3:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                  dim {
                    size: -1
                  }
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
        }
        ret {
          key: "identity"
          value: "Identity:output:0"
        }
        ret {
          key: "identity_1"
          value: "Identity_1:output:0"
        }
        ret {
          key: "identity_2"
          value: "Identity_2:output:0"
        }
        attr {
          key: "_input_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: -1
                }
              }
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: -1
                }
              }
            }
          }
        }
        arg_attr {
          key: 0
          value {
            attr {
              key: "_user_specified_name"
              value {
                s: "args_0"
              }
            }
          }
        }
        arg_attr {
          key: 1
          value {
            attr {
              key: "_user_specified_name"
              value {
                s: "args_1"
              }
            }
          }
        }
        arg_attr {
          key: 2
          value {
            attr {
              key: "_user_specified_name"
              value {
                s: "args_2"
              }
            }
          }
        }
      }
      function {
        signature {
          name: "__inference_Dataset_map_cast_ints_to_int32_50"
          input_arg {
            name: "args_0"
            type: DT_INT64
          }
          input_arg {
            name: "args_1"
            type: DT_INT64
          }
          input_arg {
            name: "args_2"
            type: DT_INT64
          }
          output_arg {
            name: "identity"
            type: DT_INT32
          }
          output_arg {
            name: "identity_1"
            type: DT_INT32
          }
          output_arg {
            name: "identity_2"
            type: DT_INT32
          }
        }
        node_def {
          name: "ToInt32"
          op: "Cast"
          input: "args_0"
          attr {
            key: "DstT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "ToInt32_1"
          op: "Cast"
          input: "args_1"
          attr {
            key: "DstT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "ToInt32_2"
          op: "Cast"
          input: "args_2"
          attr {
            key: "DstT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "Identity"
          op: "Identity"
          input: "ToInt32:y:0"
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "Identity_1"
          op: "Identity"
          input: "ToInt32_1:y:0"
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                }
              }
            }
          }
        }
        node_def {
          name: "Identity_2"
          op: "Identity"
          input: "ToInt32_2:y:0"
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: -1
                  }
                }
              }
            }
          }
        }
        ret {
          key: "identity"
          value: "Identity:output:0"
        }
        ret {
          key: "identity_1"
          value: "Identity_1:output:0"
        }
        ret {
          key: "identity_2"
          value: "Identity_2:output:0"
        }
        attr {
          key: "_input_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: -1
                }
              }
              shape {
                dim {
                  size: -1
                }
              }
            }
          }
        }
        arg_attr {
          key: 0
          value {
            attr {
              key: "_user_specified_name"
              value {
                s: "args_0"
              }
            }
          }
        }
        arg_attr {
          key: 1
          value {
            attr {
              key: "_user_specified_name"
              value {
                s: "args_1"
              }
            }
          }
        }
        arg_attr {
          key: 2
          value {
            attr {
              key: "_user_specified_name"
              value {
                s: "args_2"
              }
            }
          }
        }
      }
    }
    versions {
      producer: 38
      min_consumer: 12
    }
  }
  saver_def {
    filename_tensor_name: "save/Const:0"
    save_tensor_name: "save/Identity:0"
    restore_op_name: "save/restore_all"
    max_to_keep: 5
    sharded: true
    keep_checkpoint_every_n_hours: 10000.0
    version: V2
  }
  collection_def {
    key: "global_step"
    value {
      bytes_list {
        value: "\n\rglobal_step:0\022\022global_step/Assign\032\022global_step/read:02\037global_step/Initializer/zeros:0H\003"
      }
    }
  }
  collection_def {
    key: "saved_model_main_op"
    value {
      node_list {
        value: "group_deps"
      }
    }
  }
  collection_def {
    key: "summaries"
    value {
      node_list {
        value: "transformer_hparams:0"
        value: "transformer_problem_hparams:0"
        value: "transformer/body/parallel_0/body/encoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention:0"
        value: "transformer/body/parallel_0/body/encoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention:0"
      }
    }
  }
  collection_def {
    key: "trainable_variables"
    value {
      bytes_list {
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_0:0\022=transformer/symbol_modality_10069_256/shared/weights_0/Assign\032=transformer/symbol_modality_10069_256/shared/weights_0/read:02Rtransformer/symbol_modality_10069_256/shared/weights_0/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_1:0\022=transformer/symbol_modality_10069_256/shared/weights_1/Assign\032=transformer/symbol_modality_10069_256/shared/weights_1/read:02Rtransformer/symbol_modality_10069_256/shared/weights_1/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_2:0\022=transformer/symbol_modality_10069_256/shared/weights_2/Assign\032=transformer/symbol_modality_10069_256/shared/weights_2/read:02Rtransformer/symbol_modality_10069_256/shared/weights_2/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_3:0\022=transformer/symbol_modality_10069_256/shared/weights_3/Assign\032=transformer/symbol_modality_10069_256/shared/weights_3/read:02Rtransformer/symbol_modality_10069_256/shared/weights_3/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_4:0\022=transformer/symbol_modality_10069_256/shared/weights_4/Assign\032=transformer/symbol_modality_10069_256/shared/weights_4/read:02Rtransformer/symbol_modality_10069_256/shared/weights_4/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_5:0\022=transformer/symbol_modality_10069_256/shared/weights_5/Assign\032=transformer/symbol_modality_10069_256/shared/weights_5/read:02Rtransformer/symbol_modality_10069_256/shared/weights_5/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_6:0\022=transformer/symbol_modality_10069_256/shared/weights_6/Assign\032=transformer/symbol_modality_10069_256/shared/weights_6/read:02Rtransformer/symbol_modality_10069_256/shared/weights_6/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_7:0\022=transformer/symbol_modality_10069_256/shared/weights_7/Assign\032=transformer/symbol_modality_10069_256/shared/weights_7/read:02Rtransformer/symbol_modality_10069_256/shared/weights_7/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_8:0\022=transformer/symbol_modality_10069_256/shared/weights_8/Assign\032=transformer/symbol_modality_10069_256/shared/weights_8/read:02Rtransformer/symbol_modality_10069_256/shared/weights_8/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_9:0\022=transformer/symbol_modality_10069_256/shared/weights_9/Assign\032=transformer/symbol_modality_10069_256/shared/weights_9/read:02Rtransformer/symbol_modality_10069_256/shared/weights_9/Initializer/random_normal:08\001"
        value: "\n9transformer/symbol_modality_10069_256/shared/weights_10:0\022>transformer/symbol_modality_10069_256/shared/weights_10/Assign\032>transformer/symbol_modality_10069_256/shared/weights_10/read:02Stransformer/symbol_modality_10069_256/shared/weights_10/Initializer/random_normal:08\001"
        value: "\n9transformer/symbol_modality_10069_256/shared/weights_11:0\022>transformer/symbol_modality_10069_256/shared/weights_11/Assign\032>transformer/symbol_modality_10069_256/shared/weights_11/read:02Stransformer/symbol_modality_10069_256/shared/weights_11/Initializer/random_normal:08\001"
        value: "\n9transformer/symbol_modality_10069_256/shared/weights_12:0\022>transformer/symbol_modality_10069_256/shared/weights_12/Assign\032>transformer/symbol_modality_10069_256/shared/weights_12/read:02Stransformer/symbol_modality_10069_256/shared/weights_12/Initializer/random_normal:08\001"
        value: "\n9transformer/symbol_modality_10069_256/shared/weights_13:0\022>transformer/symbol_modality_10069_256/shared/weights_13/Assign\032>transformer/symbol_modality_10069_256/shared/weights_13/read:02Stransformer/symbol_modality_10069_256/shared/weights_13/Initializer/random_normal:08\001"
        value: "\n9transformer/symbol_modality_10069_256/shared/weights_14:0\022>transformer/symbol_modality_10069_256/shared/weights_14/Assign\032>transformer/symbol_modality_10069_256/shared/weights_14/read:02Stransformer/symbol_modality_10069_256/shared/weights_14/Initializer/random_normal:08\001"
        value: "\n9transformer/symbol_modality_10069_256/shared/weights_15:0\022>transformer/symbol_modality_10069_256/shared/weights_15/Assign\032>transformer/symbol_modality_10069_256/shared/weights_15/read:02Stransformer/symbol_modality_10069_256/shared/weights_15/Initializer/random_normal:08\001"
        value: "\n0transformer/body/target_space_embedding/kernel:0\0225transformer/body/target_space_embedding/kernel/Assign\0325transformer/body/target_space_embedding/kernel/read:02Ktransformer/body/target_space_embedding/kernel/Initializer/random_uniform:08\001"
        value: "\nbtransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022gtransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032gtransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02stransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\natransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022ftransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032ftransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02stransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\nNtransformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel:0\022Stransformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Assign\032Stransformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/read:02itransformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform:08\001"
        value: "\nNtransformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel:0\022Stransformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Assign\032Stransformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/read:02itransformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform:08\001"
        value: "\nNtransformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel:0\022Stransformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Assign\032Stransformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/read:02itransformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform:08\001"
        value: "\n]transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel:0\022btransformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Assign\032btransformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/read:02xtransformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:08\001"
        value: "\nWtransformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\\transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032\\transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read:02htransformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\nVtransformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022[transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032[transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read:02htransformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\n3transformer/body/encoder/layer_0/ffn/conv1/kernel:0\0228transformer/body/encoder/layer_0/ffn/conv1/kernel/Assign\0328transformer/body/encoder/layer_0/ffn/conv1/kernel/read:02Ntransformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform:08\001"
        value: "\n1transformer/body/encoder/layer_0/ffn/conv1/bias:0\0226transformer/body/encoder/layer_0/ffn/conv1/bias/Assign\0326transformer/body/encoder/layer_0/ffn/conv1/bias/read:02Ctransformer/body/encoder/layer_0/ffn/conv1/bias/Initializer/zeros:08\001"
        value: "\n3transformer/body/encoder/layer_0/ffn/conv2/kernel:0\0228transformer/body/encoder/layer_0/ffn/conv2/kernel/Assign\0328transformer/body/encoder/layer_0/ffn/conv2/kernel/read:02Ntransformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform:08\001"
        value: "\n1transformer/body/encoder/layer_0/ffn/conv2/bias:0\0226transformer/body/encoder/layer_0/ffn/conv2/bias/Assign\0326transformer/body/encoder/layer_0/ffn/conv2/bias/read:02Ctransformer/body/encoder/layer_0/ffn/conv2/bias/Initializer/zeros:08\001"
        value: "\nbtransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022gtransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032gtransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02stransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\natransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022ftransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032ftransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02stransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\nNtransformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel:0\022Stransformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Assign\032Stransformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/read:02itransformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform:08\001"
        value: "\nNtransformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel:0\022Stransformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Assign\032Stransformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/read:02itransformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform:08\001"
        value: "\nNtransformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel:0\022Stransformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Assign\032Stransformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/read:02itransformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform:08\001"
        value: "\n]transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel:0\022btransformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Assign\032btransformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/read:02xtransformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:08\001"
        value: "\nWtransformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\\transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032\\transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read:02htransformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\nVtransformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022[transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032[transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read:02htransformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\n3transformer/body/encoder/layer_1/ffn/conv1/kernel:0\0228transformer/body/encoder/layer_1/ffn/conv1/kernel/Assign\0328transformer/body/encoder/layer_1/ffn/conv1/kernel/read:02Ntransformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform:08\001"
        value: "\n1transformer/body/encoder/layer_1/ffn/conv1/bias:0\0226transformer/body/encoder/layer_1/ffn/conv1/bias/Assign\0326transformer/body/encoder/layer_1/ffn/conv1/bias/read:02Ctransformer/body/encoder/layer_1/ffn/conv1/bias/Initializer/zeros:08\001"
        value: "\n3transformer/body/encoder/layer_1/ffn/conv2/kernel:0\0228transformer/body/encoder/layer_1/ffn/conv2/kernel/Assign\0328transformer/body/encoder/layer_1/ffn/conv2/kernel/read:02Ntransformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform:08\001"
        value: "\n1transformer/body/encoder/layer_1/ffn/conv2/bias:0\0226transformer/body/encoder/layer_1/ffn/conv2/bias/Assign\0326transformer/body/encoder/layer_1/ffn/conv2/bias/read:02Ctransformer/body/encoder/layer_1/ffn/conv2/bias/Initializer/zeros:08\001"
        value: "\nKtransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale:0\022Ptransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032Ptransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/read:02\\transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\nJtransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias:0\022Otransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032Otransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/read:02\\transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel:0\022Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Assign\032Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/read:02ktransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform:08\001"
        value: "\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel:0\022Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Assign\032Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/read:02ktransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform:08\001"
        value: "\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel:0\022Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Assign\032Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/read:02ktransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform:08\001"
        value: "\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel:0\022Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Assign\032Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/read:02ktransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform:08\001"
        value: "\nbtransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022gtransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032gtransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02stransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\natransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022ftransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032ftransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02stransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel:0\022Stransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Assign\032Stransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/read:02itransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform:08\001"
        value: "\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel:0\022Stransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Assign\032Stransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/read:02itransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform:08\001"
        value: "\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel:0\022Stransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Assign\032Stransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/read:02itransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform:08\001"
        value: "\n]transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel:0\022btransformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Assign\032btransformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/read:02xtransformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:08\001"
        value: "\ndtransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022itransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032itransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02utransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\nctransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022htransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032htransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02utransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel:0\022Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Assign\032Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/read:02ktransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform:08\001"
        value: "\n_transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel:0\022dtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Assign\032dtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/read:02ztransformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:08\001"
        value: "\nWtransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\\transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032\\transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read:02htransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\nVtransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022[transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032[transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read:02htransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\n3transformer/body/decoder/layer_0/ffn/conv1/kernel:0\0228transformer/body/decoder/layer_0/ffn/conv1/kernel/Assign\0328transformer/body/decoder/layer_0/ffn/conv1/kernel/read:02Ntransformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform:08\001"
        value: "\n1transformer/body/decoder/layer_0/ffn/conv1/bias:0\0226transformer/body/decoder/layer_0/ffn/conv1/bias/Assign\0326transformer/body/decoder/layer_0/ffn/conv1/bias/read:02Ctransformer/body/decoder/layer_0/ffn/conv1/bias/Initializer/zeros:08\001"
        value: "\n3transformer/body/decoder/layer_0/ffn/conv2/kernel:0\0228transformer/body/decoder/layer_0/ffn/conv2/kernel/Assign\0328transformer/body/decoder/layer_0/ffn/conv2/kernel/read:02Ntransformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform:08\001"
        value: "\n1transformer/body/decoder/layer_0/ffn/conv2/bias:0\0226transformer/body/decoder/layer_0/ffn/conv2/bias/Assign\0326transformer/body/decoder/layer_0/ffn/conv2/bias/read:02Ctransformer/body/decoder/layer_0/ffn/conv2/bias/Initializer/zeros:08\001"
        value: "\nbtransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022gtransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032gtransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02stransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\natransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022ftransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032ftransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02stransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel:0\022Stransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Assign\032Stransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/read:02itransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform:08\001"
        value: "\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel:0\022Stransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Assign\032Stransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/read:02itransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform:08\001"
        value: "\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel:0\022Stransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Assign\032Stransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/read:02itransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform:08\001"
        value: "\n]transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel:0\022btransformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Assign\032btransformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/read:02xtransformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:08\001"
        value: "\ndtransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022itransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032itransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02utransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\nctransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022htransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032htransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02utransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel:0\022Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Assign\032Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/read:02ktransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform:08\001"
        value: "\n_transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel:0\022dtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Assign\032dtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/read:02ztransformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:08\001"
        value: "\nWtransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\\transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032\\transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read:02htransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\nVtransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022[transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032[transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read:02htransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\n3transformer/body/decoder/layer_1/ffn/conv1/kernel:0\0228transformer/body/decoder/layer_1/ffn/conv1/kernel/Assign\0328transformer/body/decoder/layer_1/ffn/conv1/kernel/read:02Ntransformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform:08\001"
        value: "\n1transformer/body/decoder/layer_1/ffn/conv1/bias:0\0226transformer/body/decoder/layer_1/ffn/conv1/bias/Assign\0326transformer/body/decoder/layer_1/ffn/conv1/bias/read:02Ctransformer/body/decoder/layer_1/ffn/conv1/bias/Initializer/zeros:08\001"
        value: "\n3transformer/body/decoder/layer_1/ffn/conv2/kernel:0\0228transformer/body/decoder/layer_1/ffn/conv2/kernel/Assign\0328transformer/body/decoder/layer_1/ffn/conv2/kernel/read:02Ntransformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform:08\001"
        value: "\n1transformer/body/decoder/layer_1/ffn/conv2/bias:0\0226transformer/body/decoder/layer_1/ffn/conv2/bias/Assign\0326transformer/body/decoder/layer_1/ffn/conv2/bias/read:02Ctransformer/body/decoder/layer_1/ffn/conv2/bias/Initializer/zeros:08\001"
        value: "\nKtransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale:0\022Ptransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032Ptransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/read:02\\transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\nJtransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias:0\022Otransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032Otransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/read:02\\transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
      }
    }
  }
  collection_def {
    key: "variables"
    value {
      bytes_list {
        value: "\n\rglobal_step:0\022\022global_step/Assign\032\022global_step/read:02\037global_step/Initializer/zeros:0H\003"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_0:0\022=transformer/symbol_modality_10069_256/shared/weights_0/Assign\032=transformer/symbol_modality_10069_256/shared/weights_0/read:02Rtransformer/symbol_modality_10069_256/shared/weights_0/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_1:0\022=transformer/symbol_modality_10069_256/shared/weights_1/Assign\032=transformer/symbol_modality_10069_256/shared/weights_1/read:02Rtransformer/symbol_modality_10069_256/shared/weights_1/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_2:0\022=transformer/symbol_modality_10069_256/shared/weights_2/Assign\032=transformer/symbol_modality_10069_256/shared/weights_2/read:02Rtransformer/symbol_modality_10069_256/shared/weights_2/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_3:0\022=transformer/symbol_modality_10069_256/shared/weights_3/Assign\032=transformer/symbol_modality_10069_256/shared/weights_3/read:02Rtransformer/symbol_modality_10069_256/shared/weights_3/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_4:0\022=transformer/symbol_modality_10069_256/shared/weights_4/Assign\032=transformer/symbol_modality_10069_256/shared/weights_4/read:02Rtransformer/symbol_modality_10069_256/shared/weights_4/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_5:0\022=transformer/symbol_modality_10069_256/shared/weights_5/Assign\032=transformer/symbol_modality_10069_256/shared/weights_5/read:02Rtransformer/symbol_modality_10069_256/shared/weights_5/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_6:0\022=transformer/symbol_modality_10069_256/shared/weights_6/Assign\032=transformer/symbol_modality_10069_256/shared/weights_6/read:02Rtransformer/symbol_modality_10069_256/shared/weights_6/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_7:0\022=transformer/symbol_modality_10069_256/shared/weights_7/Assign\032=transformer/symbol_modality_10069_256/shared/weights_7/read:02Rtransformer/symbol_modality_10069_256/shared/weights_7/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_8:0\022=transformer/symbol_modality_10069_256/shared/weights_8/Assign\032=transformer/symbol_modality_10069_256/shared/weights_8/read:02Rtransformer/symbol_modality_10069_256/shared/weights_8/Initializer/random_normal:08\001"
        value: "\n8transformer/symbol_modality_10069_256/shared/weights_9:0\022=transformer/symbol_modality_10069_256/shared/weights_9/Assign\032=transformer/symbol_modality_10069_256/shared/weights_9/read:02Rtransformer/symbol_modality_10069_256/shared/weights_9/Initializer/random_normal:08\001"
        value: "\n9transformer/symbol_modality_10069_256/shared/weights_10:0\022>transformer/symbol_modality_10069_256/shared/weights_10/Assign\032>transformer/symbol_modality_10069_256/shared/weights_10/read:02Stransformer/symbol_modality_10069_256/shared/weights_10/Initializer/random_normal:08\001"
        value: "\n9transformer/symbol_modality_10069_256/shared/weights_11:0\022>transformer/symbol_modality_10069_256/shared/weights_11/Assign\032>transformer/symbol_modality_10069_256/shared/weights_11/read:02Stransformer/symbol_modality_10069_256/shared/weights_11/Initializer/random_normal:08\001"
        value: "\n9transformer/symbol_modality_10069_256/shared/weights_12:0\022>transformer/symbol_modality_10069_256/shared/weights_12/Assign\032>transformer/symbol_modality_10069_256/shared/weights_12/read:02Stransformer/symbol_modality_10069_256/shared/weights_12/Initializer/random_normal:08\001"
        value: "\n9transformer/symbol_modality_10069_256/shared/weights_13:0\022>transformer/symbol_modality_10069_256/shared/weights_13/Assign\032>transformer/symbol_modality_10069_256/shared/weights_13/read:02Stransformer/symbol_modality_10069_256/shared/weights_13/Initializer/random_normal:08\001"
        value: "\n9transformer/symbol_modality_10069_256/shared/weights_14:0\022>transformer/symbol_modality_10069_256/shared/weights_14/Assign\032>transformer/symbol_modality_10069_256/shared/weights_14/read:02Stransformer/symbol_modality_10069_256/shared/weights_14/Initializer/random_normal:08\001"
        value: "\n9transformer/symbol_modality_10069_256/shared/weights_15:0\022>transformer/symbol_modality_10069_256/shared/weights_15/Assign\032>transformer/symbol_modality_10069_256/shared/weights_15/read:02Stransformer/symbol_modality_10069_256/shared/weights_15/Initializer/random_normal:08\001"
        value: "\n0transformer/body/target_space_embedding/kernel:0\0225transformer/body/target_space_embedding/kernel/Assign\0325transformer/body/target_space_embedding/kernel/read:02Ktransformer/body/target_space_embedding/kernel/Initializer/random_uniform:08\001"
        value: "\nbtransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022gtransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032gtransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02stransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\natransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022ftransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032ftransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02stransformer/body/encoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\nNtransformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel:0\022Stransformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Assign\032Stransformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/read:02itransformer/body/encoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform:08\001"
        value: "\nNtransformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel:0\022Stransformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Assign\032Stransformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/read:02itransformer/body/encoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform:08\001"
        value: "\nNtransformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel:0\022Stransformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Assign\032Stransformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/read:02itransformer/body/encoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform:08\001"
        value: "\n]transformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel:0\022btransformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Assign\032btransformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/read:02xtransformer/body/encoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:08\001"
        value: "\nWtransformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\\transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032\\transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read:02htransformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\nVtransformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022[transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032[transformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read:02htransformer/body/encoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\n3transformer/body/encoder/layer_0/ffn/conv1/kernel:0\0228transformer/body/encoder/layer_0/ffn/conv1/kernel/Assign\0328transformer/body/encoder/layer_0/ffn/conv1/kernel/read:02Ntransformer/body/encoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform:08\001"
        value: "\n1transformer/body/encoder/layer_0/ffn/conv1/bias:0\0226transformer/body/encoder/layer_0/ffn/conv1/bias/Assign\0326transformer/body/encoder/layer_0/ffn/conv1/bias/read:02Ctransformer/body/encoder/layer_0/ffn/conv1/bias/Initializer/zeros:08\001"
        value: "\n3transformer/body/encoder/layer_0/ffn/conv2/kernel:0\0228transformer/body/encoder/layer_0/ffn/conv2/kernel/Assign\0328transformer/body/encoder/layer_0/ffn/conv2/kernel/read:02Ntransformer/body/encoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform:08\001"
        value: "\n1transformer/body/encoder/layer_0/ffn/conv2/bias:0\0226transformer/body/encoder/layer_0/ffn/conv2/bias/Assign\0326transformer/body/encoder/layer_0/ffn/conv2/bias/read:02Ctransformer/body/encoder/layer_0/ffn/conv2/bias/Initializer/zeros:08\001"
        value: "\nbtransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022gtransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032gtransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02stransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\natransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022ftransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032ftransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02stransformer/body/encoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\nNtransformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel:0\022Stransformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Assign\032Stransformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/read:02itransformer/body/encoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform:08\001"
        value: "\nNtransformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel:0\022Stransformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Assign\032Stransformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/read:02itransformer/body/encoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform:08\001"
        value: "\nNtransformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel:0\022Stransformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Assign\032Stransformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/read:02itransformer/body/encoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform:08\001"
        value: "\n]transformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel:0\022btransformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Assign\032btransformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/read:02xtransformer/body/encoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:08\001"
        value: "\nWtransformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\\transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032\\transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read:02htransformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\nVtransformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022[transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032[transformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read:02htransformer/body/encoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\n3transformer/body/encoder/layer_1/ffn/conv1/kernel:0\0228transformer/body/encoder/layer_1/ffn/conv1/kernel/Assign\0328transformer/body/encoder/layer_1/ffn/conv1/kernel/read:02Ntransformer/body/encoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform:08\001"
        value: "\n1transformer/body/encoder/layer_1/ffn/conv1/bias:0\0226transformer/body/encoder/layer_1/ffn/conv1/bias/Assign\0326transformer/body/encoder/layer_1/ffn/conv1/bias/read:02Ctransformer/body/encoder/layer_1/ffn/conv1/bias/Initializer/zeros:08\001"
        value: "\n3transformer/body/encoder/layer_1/ffn/conv2/kernel:0\0228transformer/body/encoder/layer_1/ffn/conv2/kernel/Assign\0328transformer/body/encoder/layer_1/ffn/conv2/kernel/read:02Ntransformer/body/encoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform:08\001"
        value: "\n1transformer/body/encoder/layer_1/ffn/conv2/bias:0\0226transformer/body/encoder/layer_1/ffn/conv2/bias/Assign\0326transformer/body/encoder/layer_1/ffn/conv2/bias/read:02Ctransformer/body/encoder/layer_1/ffn/conv2/bias/Initializer/zeros:08\001"
        value: "\nKtransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale:0\022Ptransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032Ptransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/read:02\\transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\nJtransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias:0\022Otransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032Otransformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/read:02\\transformer/body/encoder/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel:0\022Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Assign\032Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/read:02ktransformer/body/decoder/layer_0/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform:08\001"
        value: "\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel:0\022Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Assign\032Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/read:02ktransformer/body/decoder/layer_0/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform:08\001"
        value: "\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel:0\022Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Assign\032Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/read:02ktransformer/body/decoder/layer_1/encdec_attention/multihead_attention/k/kernel/Initializer/random_uniform:08\001"
        value: "\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel:0\022Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Assign\032Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/read:02ktransformer/body/decoder/layer_1/encdec_attention/multihead_attention/v/kernel/Initializer/random_uniform:08\001"
        value: "\nbtransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022gtransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032gtransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02stransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\natransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022ftransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032ftransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02stransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel:0\022Stransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Assign\032Stransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/read:02itransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel/Initializer/random_uniform:08\001"
        value: "\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel:0\022Stransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Assign\032Stransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/read:02itransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel/Initializer/random_uniform:08\001"
        value: "\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel:0\022Stransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Assign\032Stransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/read:02itransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel/Initializer/random_uniform:08\001"
        value: "\n]transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel:0\022btransformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Assign\032btransformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/read:02xtransformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:08\001"
        value: "\ndtransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022itransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032itransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02utransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\nctransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022htransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032htransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02utransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel:0\022Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Assign\032Utransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/read:02ktransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform:08\001"
        value: "\n_transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel:0\022dtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Assign\032dtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/read:02ztransformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:08\001"
        value: "\nWtransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\\transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032\\transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read:02htransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\nVtransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022[transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032[transformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read:02htransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\n3transformer/body/decoder/layer_0/ffn/conv1/kernel:0\0228transformer/body/decoder/layer_0/ffn/conv1/kernel/Assign\0328transformer/body/decoder/layer_0/ffn/conv1/kernel/read:02Ntransformer/body/decoder/layer_0/ffn/conv1/kernel/Initializer/random_uniform:08\001"
        value: "\n1transformer/body/decoder/layer_0/ffn/conv1/bias:0\0226transformer/body/decoder/layer_0/ffn/conv1/bias/Assign\0326transformer/body/decoder/layer_0/ffn/conv1/bias/read:02Ctransformer/body/decoder/layer_0/ffn/conv1/bias/Initializer/zeros:08\001"
        value: "\n3transformer/body/decoder/layer_0/ffn/conv2/kernel:0\0228transformer/body/decoder/layer_0/ffn/conv2/kernel/Assign\0328transformer/body/decoder/layer_0/ffn/conv2/kernel/read:02Ntransformer/body/decoder/layer_0/ffn/conv2/kernel/Initializer/random_uniform:08\001"
        value: "\n1transformer/body/decoder/layer_0/ffn/conv2/bias:0\0226transformer/body/decoder/layer_0/ffn/conv2/bias/Assign\0326transformer/body/decoder/layer_0/ffn/conv2/bias/read:02Ctransformer/body/decoder/layer_0/ffn/conv2/bias/Initializer/zeros:08\001"
        value: "\nbtransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022gtransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032gtransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02stransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\natransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022ftransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032ftransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02stransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel:0\022Stransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Assign\032Stransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/read:02itransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel/Initializer/random_uniform:08\001"
        value: "\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel:0\022Stransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Assign\032Stransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/read:02itransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel/Initializer/random_uniform:08\001"
        value: "\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel:0\022Stransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Assign\032Stransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/read:02itransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel/Initializer/random_uniform:08\001"
        value: "\n]transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel:0\022btransformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Assign\032btransformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/read:02xtransformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:08\001"
        value: "\ndtransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022itransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032itransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/read:02utransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\nctransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022htransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032htransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/read:02utransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel:0\022Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Assign\032Utransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/read:02ktransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel/Initializer/random_uniform:08\001"
        value: "\n_transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel:0\022dtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Assign\032dtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/read:02ztransformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel/Initializer/random_uniform:08\001"
        value: "\nWtransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\\transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032\\transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/read:02htransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\nVtransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022[transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032[transformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/read:02htransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
        value: "\n3transformer/body/decoder/layer_1/ffn/conv1/kernel:0\0228transformer/body/decoder/layer_1/ffn/conv1/kernel/Assign\0328transformer/body/decoder/layer_1/ffn/conv1/kernel/read:02Ntransformer/body/decoder/layer_1/ffn/conv1/kernel/Initializer/random_uniform:08\001"
        value: "\n1transformer/body/decoder/layer_1/ffn/conv1/bias:0\0226transformer/body/decoder/layer_1/ffn/conv1/bias/Assign\0326transformer/body/decoder/layer_1/ffn/conv1/bias/read:02Ctransformer/body/decoder/layer_1/ffn/conv1/bias/Initializer/zeros:08\001"
        value: "\n3transformer/body/decoder/layer_1/ffn/conv2/kernel:0\0228transformer/body/decoder/layer_1/ffn/conv2/kernel/Assign\0328transformer/body/decoder/layer_1/ffn/conv2/kernel/read:02Ntransformer/body/decoder/layer_1/ffn/conv2/kernel/Initializer/random_uniform:08\001"
        value: "\n1transformer/body/decoder/layer_1/ffn/conv2/bias:0\0226transformer/body/decoder/layer_1/ffn/conv2/bias/Assign\0326transformer/body/decoder/layer_1/ffn/conv2/bias/read:02Ctransformer/body/decoder/layer_1/ffn/conv2/bias/Initializer/zeros:08\001"
        value: "\nKtransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale:0\022Ptransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/Assign\032Ptransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/read:02\\transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale/Initializer/ones:08\001"
        value: "\nJtransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias:0\022Otransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/Assign\032Otransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/read:02\\transformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias/Initializer/zeros:08\001"
      }
    }
  }
  collection_def {
    key: "while_context"
    value {
      bytes_list {
        value: "\n\037transformer/while/while_context\020\001*\034transformer/while/LoopCond:02\031transformer/while/Merge:0:\034transformer/while/Identity:0B\030transformer/while/Exit:0B\032transformer/while/Exit_1:0B\032transformer/while/Exit_2:0B\032transformer/while/Exit_3:0B\032transformer/while/Exit_4:0B\032transformer/while/Exit_5:0B\032transformer/while/Exit_6:0B\032transformer/while/Exit_7:0B\032transformer/while/Exit_8:0B\032transformer/while/Exit_9:0B\033transformer/while/Exit_10:0B\033transformer/while/Exit_11:0B\033transformer/while/Exit_12:0B\033transformer/while/Exit_13:0B\033transformer/while/Exit_14:0B\033transformer/while/Exit_15:0B\033transformer/while/Exit_16:0B\033transformer/while/Exit_17:0J\370\256\010\n\nread_100:0\n\nread_101:0\n\nread_102:0\n\nread_103:0\n\nread_104:0\n\nread_105:0\n\nread_106:0\n\nread_107:0\n\nread_108:0\n\022read_43/RefEnter:0\n\tread_43:0\n\022read_44/RefEnter:0\n\tread_44:0\n\022read_45/RefEnter:0\n\tread_45:0\n\022read_46/RefEnter:0\n\tread_46:0\n\022read_47/RefEnter:0\n\tread_47:0\n\022read_48/RefEnter:0\n\tread_48:0\n\022read_49/RefEnter:0\n\tread_49:0\n\022read_50/RefEnter:0\n\tread_50:0\n\022read_51/RefEnter:0\n\tread_51:0\n\022read_52/RefEnter:0\n\tread_52:0\n\022read_53/RefEnter:0\n\tread_53:0\n\022read_54/RefEnter:0\n\tread_54:0\n\022read_55/RefEnter:0\n\tread_55:0\n\022read_56/RefEnter:0\n\tread_56:0\n\022read_57/RefEnter:0\n\tread_57:0\n\022read_58/RefEnter:0\n\tread_58:0\n\022read_59/RefEnter:0\n\tread_59:0\n\022read_60/RefEnter:0\n\tread_60:0\n\022read_61/RefEnter:0\n\tread_61:0\n\022read_62/RefEnter:0\n\tread_62:0\n\022read_63/RefEnter:0\n\tread_63:0\n\022read_64/RefEnter:0\n\tread_64:0\n\022read_65/RefEnter:0\n\tread_65:0\n\022read_66/RefEnter:0\n\tread_66:0\n\022read_67/RefEnter:0\n\tread_67:0\n\022read_68/RefEnter:0\n\tread_68:0\n\022read_69/RefEnter:0\n\tread_69:0\n\022read_70/RefEnter:0\n\tread_70:0\n\022read_71/RefEnter:0\n\tread_71:0\n\022read_72/RefEnter:0\n\tread_72:0\n\022read_73/RefEnter:0\n\tread_73:0\n\022read_74/RefEnter:0\n\tread_74:0\n\022read_75/RefEnter:0\n\tread_75:0\n\022read_76/RefEnter:0\n\tread_76:0\n\022read_77/RefEnter:0\n\tread_77:0\n\022read_78/RefEnter:0\n\tread_78:0\n\022read_79/RefEnter:0\n\tread_79:0\n\022read_80/RefEnter:0\n\tread_80:0\n\022read_81/RefEnter:0\n\tread_81:0\n\022read_82/RefEnter:0\n\tread_82:0\n\022read_83/RefEnter:0\n\tread_83:0\n\022read_84/RefEnter:0\n\tread_84:0\n\022read_85/RefEnter:0\n\tread_85:0\n\022read_86/RefEnter:0\n\tread_86:0\n\022read_87/RefEnter:0\n\tread_87:0\n\022read_88/RefEnter:0\n\tread_88:0\n\022read_89/RefEnter:0\n\tread_89:0\n\022read_90/RefEnter:0\n\tread_90:0\n\022read_91/RefEnter:0\n\tread_91:0\n\022read_92/RefEnter:0\n\tread_92:0\n\tread_93:0\n\tread_94:0\n\tread_95:0\n\tread_96:0\n\tread_97:0\n\tread_98:0\n\tread_99:0\n\021transformer/add:0\nDtransformer/attention_bias_lower_triangle/attention_bias_local/mul:0\nctransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\ndtransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\n_transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel:0\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel:0\n1transformer/body/decoder/layer_0/ffn/conv1/bias:0\n3transformer/body/decoder/layer_0/ffn/conv1/kernel:0\n1transformer/body/decoder/layer_0/ffn/conv2/bias:0\n3transformer/body/decoder/layer_0/ffn/conv2/kernel:0\nVtransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\nWtransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\natransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\nbtransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel:0\n]transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel:0\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel:0\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel:0\nctransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\ndtransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\n_transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel:0\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel:0\n1transformer/body/decoder/layer_1/ffn/conv1/bias:0\n3transformer/body/decoder/layer_1/ffn/conv1/kernel:0\n1transformer/body/decoder/layer_1/ffn/conv2/bias:0\n3transformer/body/decoder/layer_1/ffn/conv2/kernel:0\nVtransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\nWtransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\natransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\nbtransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel:0\n]transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel:0\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel:0\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel:0\nJtransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias:0\nKtransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale:0\n*transformer/get_timing_signal_1d/Reshape:0\n\036transformer/strided_slice_10:0\n8transformer/symbol_modality_10069_256/shared/weights_0:0\n9transformer/symbol_modality_10069_256/shared/weights_10:0\n9transformer/symbol_modality_10069_256/shared/weights_11:0\n9transformer/symbol_modality_10069_256/shared/weights_12:0\n9transformer/symbol_modality_10069_256/shared/weights_13:0\n9transformer/symbol_modality_10069_256/shared/weights_14:0\n9transformer/symbol_modality_10069_256/shared/weights_15:0\n8transformer/symbol_modality_10069_256/shared/weights_1:0\n8transformer/symbol_modality_10069_256/shared/weights_2:0\n8transformer/symbol_modality_10069_256/shared/weights_3:0\n8transformer/symbol_modality_10069_256/shared/weights_4:0\n8transformer/symbol_modality_10069_256/shared/weights_5:0\n8transformer/symbol_modality_10069_256/shared/weights_6:0\n8transformer/symbol_modality_10069_256/shared/weights_7:0\n8transformer/symbol_modality_10069_256/shared/weights_8:0\n8transformer/symbol_modality_10069_256/shared/weights_9:0\n\027transformer/while/All:0\n\031transformer/while/Const:0\n\033transformer/while/Const_1:0\n\031transformer/while/Enter:0\n\034transformer/while/Enter_10:0\n\034transformer/while/Enter_11:0\n\034transformer/while/Enter_12:0\n\034transformer/while/Enter_13:0\n\034transformer/while/Enter_14:0\n\034transformer/while/Enter_15:0\n\034transformer/while/Enter_16:0\n\034transformer/while/Enter_17:0\n\033transformer/while/Enter_1:0\n\033transformer/while/Enter_2:0\n\033transformer/while/Enter_3:0\n\033transformer/while/Enter_4:0\n\033transformer/while/Enter_5:0\n\033transformer/while/Enter_6:0\n\033transformer/while/Enter_7:0\n\033transformer/while/Enter_8:0\n\033transformer/while/Enter_9:0\n\033transformer/while/Equal/y:0\n\031transformer/while/Equal:0\n\035transformer/while/Equal_1/y:0\n\033transformer/while/Equal_1:0\n\030transformer/while/Exit:0\n\033transformer/while/Exit_10:0\n\033transformer/while/Exit_11:0\n\033transformer/while/Exit_12:0\n\033transformer/while/Exit_13:0\n\033transformer/while/Exit_14:0\n\033transformer/while/Exit_15:0\n\033transformer/while/Exit_16:0\n\033transformer/while/Exit_17:0\n\032transformer/while/Exit_1:0\n\032transformer/while/Exit_2:0\n\032transformer/while/Exit_3:0\n\032transformer/while/Exit_4:0\n\032transformer/while/Exit_5:0\n\032transformer/while/Exit_6:0\n\032transformer/while/Exit_7:0\n\032transformer/while/Exit_8:0\n\032transformer/while/Exit_9:0\n\"transformer/while/ExpandDims/dim:0\n\036transformer/while/ExpandDims:0\n$transformer/while/ExpandDims_1/dim:0\n transformer/while/ExpandDims_1:0\n$transformer/while/ExpandDims_2/dim:0\n transformer/while/ExpandDims_2:0\n$transformer/while/ExpandDims_3/dim:0\n transformer/while/ExpandDims_3:0\n\034transformer/while/GatherNd:0\n\037transformer/while/GatherNd_10:0\n\037transformer/while/GatherNd_11:0\n\037transformer/while/GatherNd_12:0\n\036transformer/while/GatherNd_1:0\n\036transformer/while/GatherNd_2:0\n\036transformer/while/GatherNd_3:0\n\036transformer/while/GatherNd_4:0\n\036transformer/while/GatherNd_5:0\n\036transformer/while/GatherNd_6:0\n\036transformer/while/GatherNd_7:0\n\036transformer/while/GatherNd_8:0\n\036transformer/while/GatherNd_9:0\n\033transformer/while/Greater:0\n\034transformer/while/Identity:0\n\037transformer/while/Identity_10:0\n\037transformer/while/Identity_11:0\n\037transformer/while/Identity_12:0\n\037transformer/while/Identity_13:0\n\037transformer/while/Identity_14:0\n\037transformer/while/Identity_15:0\n\037transformer/while/Identity_16:0\n\037transformer/while/Identity_17:0\n\036transformer/while/Identity_1:0\n\036transformer/while/Identity_2:0\n\036transformer/while/Identity_3:0\n\036transformer/while/Identity_4:0\n\036transformer/while/Identity_5:0\n\036transformer/while/Identity_6:0\n\036transformer/while/Identity_7:0\n\036transformer/while/Identity_8:0\n\036transformer/while/Identity_9:0\n\030transformer/while/Less:0\n\036transformer/while/LogicalAnd:0\n\036transformer/while/LogicalNot:0\n\034transformer/while/LoopCond:0\n)transformer/while/Max/reduction_indices:0\n\027transformer/while/Max:0\n\031transformer/while/Merge:0\n\031transformer/while/Merge:1\n\034transformer/while/Merge_10:0\n\034transformer/while/Merge_10:1\n\034transformer/while/Merge_11:0\n\034transformer/while/Merge_11:1\n\034transformer/while/Merge_12:0\n\034transformer/while/Merge_12:1\n\034transformer/while/Merge_13:0\n\034transformer/while/Merge_13:1\n\034transformer/while/Merge_14:0\n\034transformer/while/Merge_14:1\n\034transformer/while/Merge_15:0\n\034transformer/while/Merge_15:1\n\034transformer/while/Merge_16:0\n\034transformer/while/Merge_16:1\n\034transformer/while/Merge_17:0\n\034transformer/while/Merge_17:1\n\033transformer/while/Merge_1:0\n\033transformer/while/Merge_1:1\n\033transformer/while/Merge_2:0\n\033transformer/while/Merge_2:1\n\033transformer/while/Merge_3:0\n\033transformer/while/Merge_3:1\n\033transformer/while/Merge_4:0\n\033transformer/while/Merge_4:1\n\033transformer/while/Merge_5:0\n\033transformer/while/Merge_5:1\n\033transformer/while/Merge_6:0\n\033transformer/while/Merge_6:1\n\033transformer/while/Merge_7:0\n\033transformer/while/Merge_7:1\n\033transformer/while/Merge_8:0\n\033transformer/while/Merge_8:1\n\033transformer/while/Merge_9:0\n\033transformer/while/Merge_9:1\n!transformer/while/NextIteration:0\n$transformer/while/NextIteration_10:0\n$transformer/while/NextIteration_11:0\n$transformer/while/NextIteration_12:0\n$transformer/while/NextIteration_13:0\n$transformer/while/NextIteration_14:0\n$transformer/while/NextIteration_15:0\n$transformer/while/NextIteration_16:0\n$transformer/while/NextIteration_17:0\n#transformer/while/NextIteration_1:0\n#transformer/while/NextIteration_2:0\n#transformer/while/NextIteration_3:0\n#transformer/while/NextIteration_4:0\n#transformer/while/NextIteration_5:0\n#transformer/while/NextIteration_6:0\n#transformer/while/NextIteration_7:0\n#transformer/while/NextIteration_8:0\n#transformer/while/NextIteration_9:0\n\031transformer/while/Pow/y:0\n\027transformer/while/Pow:0\n\033transformer/while/Pow_1/y:0\n\031transformer/while/Pow_1:0\n\'transformer/while/ReduceLogSumExp/Add:0\n\'transformer/while/ReduceLogSumExp/Exp:0\n,transformer/while/ReduceLogSumExp/IsFinite:0\n\'transformer/while/ReduceLogSumExp/Log:0\n9transformer/while/ReduceLogSumExp/Max/reduction_indices:0\n\'transformer/while/ReduceLogSumExp/Max:0\n*transformer/while/ReduceLogSumExp/Select:0\n0transformer/while/ReduceLogSumExp/StopGradient:0\n\'transformer/while/ReduceLogSumExp/Sub:0\n9transformer/while/ReduceLogSumExp/Sum/reduction_indices:0\n\'transformer/while/ReduceLogSumExp/Sum:0\n.transformer/while/ReduceLogSumExp/zeros_like:0\n#transformer/while/Reshape/shape/1:0\n!transformer/while/Reshape/shape:0\n\033transformer/while/Reshape:0\n#transformer/while/Reshape_1/shape:0\n&transformer/while/Reshape_10/shape/3:0\n$transformer/while/Reshape_10/shape:0\n\036transformer/while/Reshape_10:0\n&transformer/while/Reshape_11/shape/3:0\n$transformer/while/Reshape_11/shape:0\n\036transformer/while/Reshape_11:0\n&transformer/while/Reshape_12/shape/3:0\n$transformer/while/Reshape_12/shape:0\n\036transformer/while/Reshape_12:0\n&transformer/while/Reshape_13/shape/2:0\n$transformer/while/Reshape_13/shape:0\n\036transformer/while/Reshape_13:0\n&transformer/while/Reshape_14/shape/1:0\n&transformer/while/Reshape_14/shape/2:0\n$transformer/while/Reshape_14/shape:0\n\036transformer/while/Reshape_14:0\n&transformer/while/Reshape_15/shape/1:0\n&transformer/while/Reshape_15/shape/2:0\n$transformer/while/Reshape_15/shape:0\n\036transformer/while/Reshape_15:0\n&transformer/while/Reshape_16/shape/1:0\n$transformer/while/Reshape_16/shape:0\n\036transformer/while/Reshape_16:0\n&transformer/while/Reshape_17/shape/1:0\n&transformer/while/Reshape_17/shape/3:0\n$transformer/while/Reshape_17/shape:0\n\036transformer/while/Reshape_17:0\n&transformer/while/Reshape_18/shape/1:0\n&transformer/while/Reshape_18/shape/2:0\n&transformer/while/Reshape_18/shape/4:0\n$transformer/while/Reshape_18/shape:0\n\036transformer/while/Reshape_18:0\n&transformer/while/Reshape_19/shape/1:0\n&transformer/while/Reshape_19/shape/4:0\n$transformer/while/Reshape_19/shape:0\n\036transformer/while/Reshape_19:0\n\035transformer/while/Reshape_1:0\n#transformer/while/Reshape_2/shape:0\n&transformer/while/Reshape_20/shape/1:0\n&transformer/while/Reshape_20/shape/2:0\n&transformer/while/Reshape_20/shape/4:0\n$transformer/while/Reshape_20/shape:0\n\036transformer/while/Reshape_20:0\n&transformer/while/Reshape_21/shape/1:0\n&transformer/while/Reshape_21/shape/4:0\n$transformer/while/Reshape_21/shape:0\n\036transformer/while/Reshape_21:0\n&transformer/while/Reshape_22/shape/1:0\n&transformer/while/Reshape_22/shape/2:0\n&transformer/while/Reshape_22/shape/4:0\n$transformer/while/Reshape_22/shape:0\n\036transformer/while/Reshape_22:0\n&transformer/while/Reshape_23/shape/1:0\n&transformer/while/Reshape_23/shape/4:0\n$transformer/while/Reshape_23/shape:0\n\036transformer/while/Reshape_23:0\n&transformer/while/Reshape_24/shape/1:0\n&transformer/while/Reshape_24/shape/2:0\n&transformer/while/Reshape_24/shape/4:0\n$transformer/while/Reshape_24/shape:0\n\036transformer/while/Reshape_24:0\n&transformer/while/Reshape_25/shape/1:0\n&transformer/while/Reshape_25/shape/4:0\n$transformer/while/Reshape_25/shape:0\n\036transformer/while/Reshape_25:0\n&transformer/while/Reshape_26/shape/1:0\n&transformer/while/Reshape_26/shape/2:0\n$transformer/while/Reshape_26/shape:0\n\036transformer/while/Reshape_26:0\n$transformer/while/Reshape_27/shape:0\n\036transformer/while/Reshape_27:0\n&transformer/while/Reshape_28/shape/1:0\n$transformer/while/Reshape_28/shape:0\n\036transformer/while/Reshape_28:0\n&transformer/while/Reshape_29/shape/1:0\n$transformer/while/Reshape_29/shape:0\n\036transformer/while/Reshape_29:0\n\035transformer/while/Reshape_2:0\n#transformer/while/Reshape_3/shape:0\n&transformer/while/Reshape_30/shape/1:0\n$transformer/while/Reshape_30/shape:0\n\036transformer/while/Reshape_30:0\n\035transformer/while/Reshape_3:0\n%transformer/while/Reshape_4/shape/2:0\n#transformer/while/Reshape_4/shape:0\n\035transformer/while/Reshape_4:0\n%transformer/while/Reshape_5/shape/3:0\n#transformer/while/Reshape_5/shape:0\n\035transformer/while/Reshape_5:0\n%transformer/while/Reshape_6/shape/3:0\n#transformer/while/Reshape_6/shape:0\n\035transformer/while/Reshape_6:0\n%transformer/while/Reshape_7/shape/3:0\n#transformer/while/Reshape_7/shape:0\n\035transformer/while/Reshape_7:0\n%transformer/while/Reshape_8/shape/3:0\n#transformer/while/Reshape_8/shape:0\n\035transformer/while/Reshape_8:0\n%transformer/while/Reshape_9/shape/3:0\n#transformer/while/Reshape_9/shape:0\n\035transformer/while/Reshape_9:0\n\031transformer/while/Shape:0\n\034transformer/while/Shape_10:0\n\034transformer/while/Shape_11:0\n\034transformer/while/Shape_12:0\n\034transformer/while/Shape_13:0\n\034transformer/while/Shape_14:0\n\034transformer/while/Shape_15:0\n\034transformer/while/Shape_16:0\n\034transformer/while/Shape_17:0\n\034transformer/while/Shape_18:0\n\034transformer/while/Shape_19:0\n\033transformer/while/Shape_1:0\n\034transformer/while/Shape_20:0\n\034transformer/while/Shape_21:0\n\034transformer/while/Shape_22:0\n\034transformer/while/Shape_23:0\n\034transformer/while/Shape_24:0\n\034transformer/while/Shape_25:0\n\033transformer/while/Shape_2:0\n\033transformer/while/Shape_3:0\n\033transformer/while/Shape_4:0\n\033transformer/while/Shape_5:0\n\033transformer/while/Shape_6:0\n\033transformer/while/Shape_7:0\n\033transformer/while/Shape_8:0\n\033transformer/while/Shape_9:0\n\033transformer/while/Squeeze:0\n\032transformer/while/Switch:0\n\032transformer/while/Switch:1\n\035transformer/while/Switch_10:0\n\035transformer/while/Switch_10:1\n\035transformer/while/Switch_11:0\n\035transformer/while/Switch_11:1\n\035transformer/while/Switch_12:0\n\035transformer/while/Switch_12:1\n\035transformer/while/Switch_13:0\n\035transformer/while/Switch_13:1\n\035transformer/while/Switch_14:0\n\035transformer/while/Switch_14:1\n\035transformer/while/Switch_15:0\n\035transformer/while/Switch_15:1\n\035transformer/while/Switch_16:0\n\035transformer/while/Switch_16:1\n\035transformer/while/Switch_17:0\n\035transformer/while/Switch_17:1\n\034transformer/while/Switch_1:0\n\034transformer/while/Switch_1:1\n\034transformer/while/Switch_2:0\n\034transformer/while/Switch_2:1\n\034transformer/while/Switch_3:0\n\034transformer/while/Switch_3:1\n\034transformer/while/Switch_4:0\n\034transformer/while/Switch_4:1\n\034transformer/while/Switch_5:0\n\034transformer/while/Switch_5:1\n\034transformer/while/Switch_6:0\n\034transformer/while/Switch_6:1\n\034transformer/while/Switch_7:0\n\034transformer/while/Switch_7:1\n\034transformer/while/Switch_8:0\n\034transformer/while/Switch_8:1\n\034transformer/while/Switch_9:0\n\034transformer/while/Switch_9:1\n!transformer/while/ToFloat/Enter:0\n\033transformer/while/ToFloat:0\n\035transformer/while/ToFloat_1:0\n\035transformer/while/ToFloat_2:0\n\035transformer/while/ToFloat_3:0\n\034transformer/while/TopKV2/k:0\n\032transformer/while/TopKV2:0\n\032transformer/while/TopKV2:1\n\036transformer/while/TopKV2_1/k:0\n\034transformer/while/TopKV2_1:0\n\034transformer/while/TopKV2_1:1\n\036transformer/while/TopKV2_2/k:0\n\034transformer/while/TopKV2_2:0\n\034transformer/while/TopKV2_2:1\n\031transformer/while/add/x:0\n\027transformer/while/add:0\n\033transformer/while/add_1/y:0\n\034transformer/while/add_10/y:0\n\032transformer/while/add_10:0\n\031transformer/while/add_1:0\n\031transformer/while/add_2:0\n\033transformer/while/add_3/y:0\n\031transformer/while/add_3:0\n\033transformer/while/add_4/y:0\n\031transformer/while/add_4:0\n\031transformer/while/add_5:0\n\033transformer/while/add_6/y:0\n\031transformer/while/add_6:0\n\033transformer/while/add_7/x:0\n\031transformer/while/add_7:0\n\031transformer/while/add_8:0\n\031transformer/while/add_9:0\n7transformer/while/body/parallel_0/body/ExpandDims/dim:0\n3transformer/while/body/parallel_0/body/ExpandDims:0\n_transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_postprocess/add:0\ndtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/Shape:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Const:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Mean_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/Rsqrt:0\n{transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/SquaredDifference:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/add:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/add_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/mul:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/mul_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/sub:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack:0\nttransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack_1:0\nttransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice/stack_2:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice:0\nttransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack:0\nvtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1/stack_2:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/layer_prepostprocess/strided_slice_1:0\n\227\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2:0\n\225\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape:0\n\217\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape:0\n\215\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape:0\n\233\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2:0\n\225\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack:0\n\237\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1:0\n\237\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2:0\n\227\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1:0\nztransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/transpose/perm:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/combine_heads/transpose:0\nztransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/MatMul:0\n|transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/MatMul_1:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/add:0\n\205\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/dot_product_attention/attention_weights:0\nctransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/mul/y:0\natransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/mul:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const_1:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Const_2:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2/axis:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2:0\n\210\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2_1/axis:0\n\203\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2_1:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/MatMul:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Prod:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Prod_1:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape:0\n\210\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/Shape:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/axes:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat/axis:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1/axis:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/free:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/stack:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose:0\n\211\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/Tensordot:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const_1:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Const_2:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GatherV2/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GatherV2:0\nytransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GatherV2_1/axis:0\nttransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/GatherV2_1:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/MatMul:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Prod:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Prod_1:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape:0\nytransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape_1/shape:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Reshape_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/Shape:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/axes:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_1/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/concat_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/free:0\notransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/stack:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose:0\nztransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose_1/perm:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot/transpose_1:0\nitransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/q/Tensordot:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/transpose/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/encdec_attention/multihead_attention/split_heads/transpose:0\n]transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_postprocess/add:0\nbtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/Shape:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Const:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Mean_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/Rsqrt:0\nytransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/SquaredDifference:0\nktransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/add_1:0\nktransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/mul_1:0\nktransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/sub:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_1:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice/stack_2:0\njtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack:0\nttransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_1:0\nttransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1/stack_2:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/layer_prepostprocess/strided_slice_1:0\n\225\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2:0\n\223\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape:0\n\215\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape:0\n\213\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape:0\n\231\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack:0\n\233\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1:0\n\233\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2:0\n\223\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice:0\n\233\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2:0\n\225\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/transpose/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/combine_heads/transpose:0\ngtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat/axis:0\nbtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat:0\nitransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1/axis:0\ndtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/concat_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul:0\nztransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/MatMul_1:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/add:0\n\203\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/dot_product_attention/attention_weights:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Const_2:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2_1/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/GatherV2_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/MatMul:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Prod_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Reshape_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/Shape:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/axes:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat/axis:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/concat_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/free:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/stack:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot/transpose_1:0\ngtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/k/Tensordot:0\natransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/mul/y:0\n_transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/mul:0\n|transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_1:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Const_2:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2/axis:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1/axis:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/MatMul:0\n{transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Prod_1:0\n~transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1:0\n|transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/Shape:0\n{transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/axes:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat/axis:0\n}transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis:0\n\177transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/concat_1:0\n{transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/free:0\n|transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/stack:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose:0\n\207\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot/transpose_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/output_transform/Tensordot:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Const_2:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2_1/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/GatherV2_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/MatMul:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Prod_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Reshape_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/Shape:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/axes:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat/axis:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/concat_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/free:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/stack:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot/transpose_1:0\ngtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/q/Tensordot:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3:0\n\212\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/Shape:0\n\220\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2:0\n\212\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/transpose/perm:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads/transpose:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_1/transpose:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/split_heads_2/transpose:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Const_2:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2_1/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/GatherV2_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/MatMul:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Prod_1:0\notransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Reshape_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/Shape:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/axes:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat/axis:0\nntransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat:0\nutransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/concat_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/free:0\nmtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/stack:0\nqtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose:0\nxtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot/transpose_1:0\ngtransformer/while/body/parallel_0/body/decoder/layer_0/self_attention/multihead_attention/v/Tensordot:0\nLtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/BiasAdd:0\nItransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Relu:0\nTtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Const:0\nVtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Const_1:0\nVtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Const_2:0\n\\transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/GatherV2/axis:0\nWtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/GatherV2:0\n^transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/GatherV2_1/axis:0\nYtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/GatherV2_1:0\nUtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/MatMul:0\nStransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Prod:0\nUtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Prod_1:0\nVtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Reshape:0\n^transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Reshape_1/shape:0\nXtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Reshape_1:0\nTtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/Shape:0\nStransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/axes:0\nZtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/concat/axis:0\nUtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/concat:0\n\\transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/concat_1/axis:0\nWtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/concat_1:0\nStransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/free:0\nTtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/stack:0\nXtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/transpose:0\n_transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/transpose_1/perm:0\nZtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot/transpose_1:0\nNtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv1/Tensordot:0\nLtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/BiasAdd:0\nTtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Const:0\nVtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Const_1:0\nVtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Const_2:0\n\\transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/GatherV2/axis:0\nWtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/GatherV2:0\n^transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/GatherV2_1/axis:0\nYtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/GatherV2_1:0\nUtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/MatMul:0\nStransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Prod:0\nUtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Prod_1:0\nVtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Reshape:0\n^transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Reshape_1/shape:0\nXtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Reshape_1:0\nTtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/Shape:0\nStransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/axes:0\nZtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/concat/axis:0\nUtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/concat:0\n\\transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/concat_1/axis:0\nWtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/concat_1:0\nStransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/free:0\nTtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/stack:0\nXtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/transpose:0\n_transformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/transpose_1/perm:0\nZtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot/transpose_1:0\nNtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/conv2/Tensordot:0\nTtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_postprocess/add:0\nYtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/Shape:0\ndtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Const:0\nutransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices:0\nctransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Mean:0\nwtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices:0\netransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Mean_1:0\ndtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/Rsqrt:0\nptransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/SquaredDifference:0\nbtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/add:0\ndtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/add_1:0\nbtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/mul:0\ndtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/mul_1:0\nbtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/layer_norm/sub:0\ngtransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice/stack:0\nitransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice/stack_1:0\nitransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice/stack_2:0\natransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice:0\nitransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice_1/stack:0\nktransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice_1/stack_1:0\nktransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice_1/stack_2:0\nctransformer/while/body/parallel_0/body/decoder/layer_0_1/ffn/layer_prepostprocess/strided_slice_1:0\n_transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_postprocess/add:0\ndtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/Shape:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Const:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Mean_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/Rsqrt:0\n{transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/SquaredDifference:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/add:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/add_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/mul:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/mul_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/sub:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack:0\nttransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack_1:0\nttransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice/stack_2:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice:0\nttransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack:0\nvtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1/stack_2:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/layer_prepostprocess/strided_slice_1:0\n\227\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2:0\n\225\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape:0\n\217\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape:0\n\215\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape:0\n\233\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2:0\n\225\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack:0\n\237\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1:0\n\237\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2:0\n\227\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1:0\nztransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/transpose/perm:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/combine_heads/transpose:0\nztransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/MatMul:0\n|transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/MatMul_1:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/add:0\n\205\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/dot_product_attention/attention_weights:0\nctransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/mul/y:0\natransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/mul:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const_1:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Const_2:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2/axis:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2:0\n\210\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2_1/axis:0\n\203\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/GatherV2_1:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/MatMul:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Prod:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Prod_1:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape:0\n\210\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Reshape_1:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/Shape:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/axes:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat/axis:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1/axis:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/concat_1:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/free:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/stack:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose:0\n\211\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot/transpose_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/Tensordot:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const_1:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Const_2:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GatherV2/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GatherV2:0\nytransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GatherV2_1/axis:0\nttransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/GatherV2_1:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/MatMul:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Prod:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Prod_1:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape:0\nytransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape_1/shape:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Reshape_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/Shape:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/axes:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_1/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/concat_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/free:0\notransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/stack:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose:0\nztransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose_1/perm:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot/transpose_1:0\nitransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/q/Tensordot:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Reshape:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/Shape:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/transpose/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/encdec_attention/multihead_attention/split_heads/transpose:0\n]transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_postprocess/add:0\nbtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/Shape:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Const:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean/reduction_indices:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1/reduction_indices:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Mean_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/Rsqrt:0\nytransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/SquaredDifference:0\nktransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/add_1:0\nktransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/mul_1:0\nktransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/sub:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_1:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice/stack_2:0\njtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack:0\nttransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_1:0\nttransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1/stack_2:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/layer_prepostprocess/strided_slice_1:0\n\225\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape/2:0\n\223\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape/shape:0\n\215\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Reshape:0\n\213\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/Shape:0\n\231\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack:0\n\233\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_1:0\n\233\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice/stack_2:0\n\223\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice:0\n\233\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_1:0\n\235\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1/stack_2:0\n\225\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/combine_last_two_dimensions/strided_slice_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/transpose/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/combine_heads/transpose:0\ngtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat/axis:0\nbtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat:0\nitransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1/axis:0\ndtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/concat_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul:0\nztransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/MatMul_1:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/add:0\n\203\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/dot_product_attention/attention_weights:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Const_2:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2_1/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/GatherV2_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/MatMul:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Prod_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1/shape:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Reshape_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/Shape:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/axes:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat/axis:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/concat_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/free:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/stack:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot/transpose_1:0\ngtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/k/Tensordot:0\natransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/mul/y:0\n_transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/mul:0\n|transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_1:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Const_2:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2/axis:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1/axis:0\n\201\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/GatherV2_1:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/MatMul:0\n{transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Prod_1:0\n~transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1/shape:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Reshape_1:0\n|transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/Shape:0\n{transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/axes:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat/axis:0\n}transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1/axis:0\n\177transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/concat_1:0\n{transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/free:0\n|transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/stack:0\n\200\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose:0\n\207\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1/perm:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot/transpose_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/output_transform/Tensordot:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Const_2:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2_1/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/GatherV2_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/MatMul:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Prod_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1/shape:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Reshape_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/Shape:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/axes:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat/axis:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/concat_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/free:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/stack:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot/transpose_1:0\ngtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/q/Tensordot:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape/3:0\n\212\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape/shape:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Reshape:0\n\202\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/Shape:0\n\220\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_1:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice/stack_2:0\n\212\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_1:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1/stack_2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/split_last_dimension/strided_slice_1:0\nvtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/transpose/perm:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads/transpose:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape/3:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape/shape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Reshape:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/Shape:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_1:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice/stack_2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_1:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1/stack_2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/split_last_dimension/strided_slice_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_1/transpose:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape/3:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape/shape:0\n\206\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Reshape:0\n\204\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/Shape:0\n\222\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_1:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice/stack_2:0\n\214\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice:0\n\224\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_1:0\n\226\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1/stack_2:0\n\216\001transformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/split_last_dimension/strided_slice_1:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/split_heads_2/transpose:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Const_2:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2_1/axis:0\nrtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/GatherV2_1:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/MatMul:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Prod_1:0\notransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1/shape:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Reshape_1:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/Shape:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/axes:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat/axis:0\nntransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat:0\nutransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1/axis:0\nptransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/concat_1:0\nltransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/free:0\nmtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/stack:0\nqtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose:0\nxtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1/perm:0\nstransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot/transpose_1:0\ngtransformer/while/body/parallel_0/body/decoder/layer_1/self_attention/multihead_attention/v/Tensordot:0\nLtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/BiasAdd:0\nItransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Relu:0\nTtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Const:0\nVtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Const_1:0\nVtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Const_2:0\n\\transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/GatherV2/axis:0\nWtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/GatherV2:0\n^transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/GatherV2_1/axis:0\nYtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/GatherV2_1:0\nUtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/MatMul:0\nStransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Prod:0\nUtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Prod_1:0\nVtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Reshape:0\n^transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Reshape_1/shape:0\nXtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Reshape_1:0\nTtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/Shape:0\nStransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/axes:0\nZtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/concat/axis:0\nUtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/concat:0\n\\transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/concat_1/axis:0\nWtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/concat_1:0\nStransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/free:0\nTtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/stack:0\nXtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/transpose:0\n_transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/transpose_1/perm:0\nZtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot/transpose_1:0\nNtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv1/Tensordot:0\nLtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/BiasAdd:0\nTtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Const:0\nVtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Const_1:0\nVtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Const_2:0\n\\transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/GatherV2/axis:0\nWtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/GatherV2:0\n^transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/GatherV2_1/axis:0\nYtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/GatherV2_1:0\nUtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/MatMul:0\nStransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Prod:0\nUtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Prod_1:0\nVtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Reshape:0\n^transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Reshape_1/shape:0\nXtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Reshape_1:0\nTtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/Shape:0\nStransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/axes:0\nZtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/concat/axis:0\nUtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/concat:0\n\\transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/concat_1/axis:0\nWtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/concat_1:0\nStransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/free:0\nTtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/stack:0\nXtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/transpose:0\n_transformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/transpose_1/perm:0\nZtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot/transpose_1:0\nNtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/conv2/Tensordot:0\nTtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_postprocess/add:0\nYtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/Shape:0\ndtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Const:0\nutransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Mean/reduction_indices:0\nctransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Mean:0\nwtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Mean_1/reduction_indices:0\netransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Mean_1:0\ndtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/Rsqrt:0\nptransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/SquaredDifference:0\nbtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/add:0\ndtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/add_1:0\nbtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/mul:0\ndtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/mul_1:0\nbtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/layer_norm/sub:0\ngtransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice/stack:0\nitransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice/stack_1:0\nitransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice/stack_2:0\natransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice:0\nitransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice_1/stack:0\nktransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice_1/stack_1:0\nktransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice_1/stack_2:0\nctransformer/while/body/parallel_0/body/decoder/layer_1_1/ffn/layer_prepostprocess/strided_slice_1:0\nKtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/Shape:0\nVtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Const:0\ngtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean/reduction_indices:0\nUtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean:0\nitransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean_1/reduction_indices:0\nWtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Mean_1:0\nVtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/Rsqrt:0\nbtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/SquaredDifference:0\nTtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/add:0\nVtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/add_1:0\nTtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/mul:0\nVtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/mul_1:0\nTtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/layer_norm/sub:0\nYtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack:0\n[transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack_1:0\n[transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice/stack_2:0\nStransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice:0\n[transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack:0\n]transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack_1:0\n]transformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1/stack_2:0\nUtransformer/while/body/parallel_0/body/decoder/layer_prepostprocess/strided_slice_1:0\n\037transformer/while/concat/axis:0\n\032transformer/while/concat:0\n!transformer/while/concat_1/axis:0\n\034transformer/while/concat_1:0\n!transformer/while/concat_2/axis:0\n\034transformer/while/concat_2:0\n!transformer/while/concat_3/axis:0\n\034transformer/while/concat_3:0\n!transformer/while/concat_4/axis:0\n\034transformer/while/concat_4:0\n!transformer/while/concat_5/axis:0\n\034transformer/while/concat_5:0\n!transformer/while/concat_6/axis:0\n\034transformer/while/concat_6:0\n\036transformer/while/cond/Merge:0\n\036transformer/while/cond/Merge:1\n\037transformer/while/cond/Switch:0\n\037transformer/while/cond/Switch:1\n!transformer/while/cond/Switch_1:0\n!transformer/while/cond/Switch_1:1\n transformer/while/cond/pred_id:0\n!transformer/while/cond/switch_f:0\n!transformer/while/cond/switch_t:0\n*transformer/while/cond/zeros_like/Switch:1\n#transformer/while/cond/zeros_like:0\n\036transformer/while/floordiv/y:0\n\034transformer/while/floordiv:0\n transformer/while/floordiv_1/y:0\n\036transformer/while/floordiv_1:0\n transformer/while/floordiv_2/y:0\n\036transformer/while/floordiv_2:0\n transformer/while/floordiv_3/y:0\n\036transformer/while/floordiv_3:0\n)transformer/while/grow_alive_topk_flags:0\n*transformer/while/grow_alive_topk_scores:0\n\'transformer/while/grow_alive_topk_seq:0\n*transformer/while/grow_alive_topk_states:0\n-transformer/while/grow_alive_topk_states_10:0\n-transformer/while/grow_alive_topk_states_11:0\n,transformer/while/grow_alive_topk_states_1:0\n,transformer/while/grow_alive_topk_states_2:0\n,transformer/while/grow_alive_topk_states_3:0\n,transformer/while/grow_alive_topk_states_4:0\n,transformer/while/grow_alive_topk_states_5:0\n,transformer/while/grow_alive_topk_states_6:0\n,transformer/while/grow_alive_topk_states_7:0\n,transformer/while/grow_alive_topk_states_8:0\n,transformer/while/grow_alive_topk_states_9:0\n,transformer/while/grow_finished_topk_flags:0\n-transformer/while/grow_finished_topk_scores:0\n*transformer/while/grow_finished_topk_seq:0\n\031transformer/while/mod/y:0\n\027transformer/while/mod:0\n\035transformer/while/mul/Enter:0\n\031transformer/while/mul/y:0\n\027transformer/while/mul:0\n\032transformer/while/mul_10:0\n\032transformer/while/mul_11:0\n\032transformer/while/mul_12:0\n\034transformer/while/mul_13/y:0\n\032transformer/while/mul_13:0\n\032transformer/while/mul_14:0\n\034transformer/while/mul_15/y:0\n\032transformer/while/mul_15:0\n\034transformer/while/mul_16/y:0\n\032transformer/while/mul_16:0\n\034transformer/while/mul_17/y:0\n\032transformer/while/mul_17:0\n\034transformer/while/mul_18/y:0\n\032transformer/while/mul_18:0\n\034transformer/while/mul_19/y:0\n\032transformer/while/mul_19:0\n\031transformer/while/mul_1:0\n\031transformer/while/mul_2:0\n\031transformer/while/mul_3:0\n\031transformer/while/mul_4:0\n\031transformer/while/mul_5:0\n\031transformer/while/mul_6:0\n\031transformer/while/mul_7:0\n\031transformer/while/mul_8:0\n\031transformer/while/mul_9:0\n3transformer/while/parallel_0/transformer/Identity:0\n\037transformer/while/range/delta:0\n\037transformer/while/range/start:0\n\031transformer/while/range:0\n!transformer/while/range_1/delta:0\n!transformer/while/range_1/start:0\n\033transformer/while/range_1:0\n!transformer/while/range_2/delta:0\n!transformer/while/range_2/start:0\n\033transformer/while/range_2:0\n#transformer/while/split/split_dim:0\n\031transformer/while/split:0\n\031transformer/while/stack:0\n\033transformer/while/stack_1:0\n\033transformer/while/stack_2:0\n\'transformer/while/strided_slice/stack:0\n)transformer/while/strided_slice/stack_1:0\n)transformer/while/strided_slice/stack_2:0\n!transformer/while/strided_slice:0\n)transformer/while/strided_slice_1/stack:0\n+transformer/while/strided_slice_1/stack_1:0\n+transformer/while/strided_slice_1/stack_2:0\n*transformer/while/strided_slice_10/stack:0\n,transformer/while/strided_slice_10/stack_1:0\n,transformer/while/strided_slice_10/stack_2:0\n$transformer/while/strided_slice_10:0\n*transformer/while/strided_slice_11/stack:0\n,transformer/while/strided_slice_11/stack_1:0\n,transformer/while/strided_slice_11/stack_2:0\n$transformer/while/strided_slice_11:0\n*transformer/while/strided_slice_12/stack:0\n,transformer/while/strided_slice_12/stack_1:0\n,transformer/while/strided_slice_12/stack_2:0\n$transformer/while/strided_slice_12:0\n*transformer/while/strided_slice_13/stack:0\n,transformer/while/strided_slice_13/stack_1:0\n,transformer/while/strided_slice_13/stack_2:0\n$transformer/while/strided_slice_13:0\n*transformer/while/strided_slice_14/stack:0\n,transformer/while/strided_slice_14/stack_1:0\n,transformer/while/strided_slice_14/stack_2:0\n$transformer/while/strided_slice_14:0\n*transformer/while/strided_slice_15/stack:0\n,transformer/while/strided_slice_15/stack_1:0\n,transformer/while/strided_slice_15/stack_2:0\n$transformer/while/strided_slice_15:0\n*transformer/while/strided_slice_16/stack:0\n,transformer/while/strided_slice_16/stack_1:0\n,transformer/while/strided_slice_16/stack_2:0\n$transformer/while/strided_slice_16:0\n*transformer/while/strided_slice_17/stack:0\n,transformer/while/strided_slice_17/stack_1:0\n,transformer/while/strided_slice_17/stack_2:0\n$transformer/while/strided_slice_17:0\n*transformer/while/strided_slice_18/stack:0\n,transformer/while/strided_slice_18/stack_1:0\n,transformer/while/strided_slice_18/stack_2:0\n$transformer/while/strided_slice_18:0\n*transformer/while/strided_slice_19/stack:0\n,transformer/while/strided_slice_19/stack_1:0\n,transformer/while/strided_slice_19/stack_2:0\n$transformer/while/strided_slice_19:0\n#transformer/while/strided_slice_1:0\n)transformer/while/strided_slice_2/stack:0\n+transformer/while/strided_slice_2/stack_1:0\n+transformer/while/strided_slice_2/stack_2:0\n*transformer/while/strided_slice_20/stack:0\n,transformer/while/strided_slice_20/stack_1:0\n,transformer/while/strided_slice_20/stack_2:0\n$transformer/while/strided_slice_20:0\n*transformer/while/strided_slice_21/stack:0\n,transformer/while/strided_slice_21/stack_1:0\n,transformer/while/strided_slice_21/stack_2:0\n$transformer/while/strided_slice_21:0\n*transformer/while/strided_slice_22/stack:0\n,transformer/while/strided_slice_22/stack_1:0\n,transformer/while/strided_slice_22/stack_2:0\n$transformer/while/strided_slice_22:0\n*transformer/while/strided_slice_23/stack:0\n,transformer/while/strided_slice_23/stack_1:0\n,transformer/while/strided_slice_23/stack_2:0\n$transformer/while/strided_slice_23:0\n*transformer/while/strided_slice_24/stack:0\n,transformer/while/strided_slice_24/stack_1:0\n,transformer/while/strided_slice_24/stack_2:0\n$transformer/while/strided_slice_24:0\n*transformer/while/strided_slice_25/stack:0\n,transformer/while/strided_slice_25/stack_1:0\n,transformer/while/strided_slice_25/stack_2:0\n$transformer/while/strided_slice_25:0\n*transformer/while/strided_slice_26/stack:0\n,transformer/while/strided_slice_26/stack_1:0\n,transformer/while/strided_slice_26/stack_2:0\n$transformer/while/strided_slice_26:0\n*transformer/while/strided_slice_27/stack:0\n,transformer/while/strided_slice_27/stack_1:0\n,transformer/while/strided_slice_27/stack_2:0\n$transformer/while/strided_slice_27:0\n*transformer/while/strided_slice_28/stack:0\n,transformer/while/strided_slice_28/stack_1:0\n,transformer/while/strided_slice_28/stack_2:0\n$transformer/while/strided_slice_28:0\n*transformer/while/strided_slice_29/stack:0\n,transformer/while/strided_slice_29/stack_1:0\n,transformer/while/strided_slice_29/stack_2:0\n$transformer/while/strided_slice_29:0\n#transformer/while/strided_slice_2:0\n)transformer/while/strided_slice_3/stack:0\n+transformer/while/strided_slice_3/stack_1:0\n+transformer/while/strided_slice_3/stack_2:0\n*transformer/while/strided_slice_30/stack:0\n,transformer/while/strided_slice_30/stack_1:0\n,transformer/while/strided_slice_30/stack_2:0\n$transformer/while/strided_slice_30:0\n*transformer/while/strided_slice_31/stack:0\n,transformer/while/strided_slice_31/stack_1:0\n,transformer/while/strided_slice_31/stack_2:0\n$transformer/while/strided_slice_31:0\n*transformer/while/strided_slice_32/stack:0\n,transformer/while/strided_slice_32/stack_1:0\n,transformer/while/strided_slice_32/stack_2:0\n$transformer/while/strided_slice_32:0\n*transformer/while/strided_slice_33/stack:0\n,transformer/while/strided_slice_33/stack_1:0\n,transformer/while/strided_slice_33/stack_2:0\n$transformer/while/strided_slice_33:0\n*transformer/while/strided_slice_34/stack:0\n,transformer/while/strided_slice_34/stack_1:0\n,transformer/while/strided_slice_34/stack_2:0\n$transformer/while/strided_slice_34:0\n*transformer/while/strided_slice_35/stack:0\n,transformer/while/strided_slice_35/stack_1:0\n,transformer/while/strided_slice_35/stack_2:0\n$transformer/while/strided_slice_35:0\n*transformer/while/strided_slice_36/stack:0\n,transformer/while/strided_slice_36/stack_1:0\n,transformer/while/strided_slice_36/stack_2:0\n$transformer/while/strided_slice_36:0\n*transformer/while/strided_slice_37/stack:0\n,transformer/while/strided_slice_37/stack_1:0\n,transformer/while/strided_slice_37/stack_2:0\n$transformer/while/strided_slice_37:0\n*transformer/while/strided_slice_38/stack:0\n,transformer/while/strided_slice_38/stack_1:0\n,transformer/while/strided_slice_38/stack_2:0\n$transformer/while/strided_slice_38:0\n*transformer/while/strided_slice_39/stack:0\n,transformer/while/strided_slice_39/stack_1:0\n,transformer/while/strided_slice_39/stack_2:0\n$transformer/while/strided_slice_39:0\n#transformer/while/strided_slice_3:0\n)transformer/while/strided_slice_4/stack:0\n+transformer/while/strided_slice_4/stack_1:0\n+transformer/while/strided_slice_4/stack_2:0\n*transformer/while/strided_slice_40/stack:0\n,transformer/while/strided_slice_40/stack_1:0\n,transformer/while/strided_slice_40/stack_2:0\n$transformer/while/strided_slice_40:0\n*transformer/while/strided_slice_41/stack:0\n,transformer/while/strided_slice_41/stack_1:0\n,transformer/while/strided_slice_41/stack_2:0\n$transformer/while/strided_slice_41:0\n*transformer/while/strided_slice_42/stack:0\n,transformer/while/strided_slice_42/stack_1:0\n,transformer/while/strided_slice_42/stack_2:0\n$transformer/while/strided_slice_42:0\n*transformer/while/strided_slice_43/stack:0\n,transformer/while/strided_slice_43/stack_1:0\n,transformer/while/strided_slice_43/stack_2:0\n$transformer/while/strided_slice_43:0\n*transformer/while/strided_slice_44/stack:0\n,transformer/while/strided_slice_44/stack_1:0\n,transformer/while/strided_slice_44/stack_2:0\n$transformer/while/strided_slice_44:0\n*transformer/while/strided_slice_45/stack:0\n,transformer/while/strided_slice_45/stack_1:0\n,transformer/while/strided_slice_45/stack_2:0\n$transformer/while/strided_slice_45:0\n*transformer/while/strided_slice_46/stack:0\n,transformer/while/strided_slice_46/stack_1:0\n,transformer/while/strided_slice_46/stack_2:0\n$transformer/while/strided_slice_46:0\n*transformer/while/strided_slice_47/stack:0\n,transformer/while/strided_slice_47/stack_1:0\n,transformer/while/strided_slice_47/stack_2:0\n$transformer/while/strided_slice_47:0\n*transformer/while/strided_slice_48/stack:0\n,transformer/while/strided_slice_48/stack_1:0\n,transformer/while/strided_slice_48/stack_2:0\n$transformer/while/strided_slice_48:0\n*transformer/while/strided_slice_49/stack:0\n,transformer/while/strided_slice_49/stack_1:0\n,transformer/while/strided_slice_49/stack_2:0\n$transformer/while/strided_slice_49:0\n#transformer/while/strided_slice_4:0\n)transformer/while/strided_slice_5/stack:0\n+transformer/while/strided_slice_5/stack_1:0\n+transformer/while/strided_slice_5/stack_2:0\n*transformer/while/strided_slice_50/stack:0\n,transformer/while/strided_slice_50/stack_1:0\n,transformer/while/strided_slice_50/stack_2:0\n$transformer/while/strided_slice_50:0\n*transformer/while/strided_slice_51/stack:0\n,transformer/while/strided_slice_51/stack_1:0\n,transformer/while/strided_slice_51/stack_2:0\n$transformer/while/strided_slice_51:0\n*transformer/while/strided_slice_52/stack:0\n,transformer/while/strided_slice_52/stack_1:0\n,transformer/while/strided_slice_52/stack_2:0\n$transformer/while/strided_slice_52:0\n*transformer/while/strided_slice_53/stack:0\n,transformer/while/strided_slice_53/stack_1:0\n,transformer/while/strided_slice_53/stack_2:0\n$transformer/while/strided_slice_53:0\n*transformer/while/strided_slice_54/stack:0\n,transformer/while/strided_slice_54/stack_1:0\n,transformer/while/strided_slice_54/stack_2:0\n$transformer/while/strided_slice_54:0\n*transformer/while/strided_slice_55/stack:0\n,transformer/while/strided_slice_55/stack_1:0\n,transformer/while/strided_slice_55/stack_2:0\n$transformer/while/strided_slice_55:0\n*transformer/while/strided_slice_56/Enter:0\n,transformer/while/strided_slice_56/stack/0:0\n*transformer/while/strided_slice_56/stack:0\n.transformer/while/strided_slice_56/stack_1/0:0\n,transformer/while/strided_slice_56/stack_1:0\n,transformer/while/strided_slice_56/stack_2:0\n$transformer/while/strided_slice_56:0\n*transformer/while/strided_slice_57/Enter:0\n,transformer/while/strided_slice_57/stack/0:0\n,transformer/while/strided_slice_57/stack/1:0\n,transformer/while/strided_slice_57/stack/3:0\n*transformer/while/strided_slice_57/stack:0\n.transformer/while/strided_slice_57/stack_1/0:0\n.transformer/while/strided_slice_57/stack_1/1:0\n,transformer/while/strided_slice_57/stack_1:0\n,transformer/while/strided_slice_57/stack_2:0\n$transformer/while/strided_slice_57:0\n*transformer/while/strided_slice_58/stack:0\n,transformer/while/strided_slice_58/stack_1:0\n,transformer/while/strided_slice_58/stack_2:0\n$transformer/while/strided_slice_58:0\n*transformer/while/strided_slice_59/stack:0\n,transformer/while/strided_slice_59/stack_1:0\n,transformer/while/strided_slice_59/stack_2:0\n$transformer/while/strided_slice_59:0\n#transformer/while/strided_slice_5:0\n)transformer/while/strided_slice_6/stack:0\n+transformer/while/strided_slice_6/stack_1:0\n+transformer/while/strided_slice_6/stack_2:0\n*transformer/while/strided_slice_60/stack:0\n,transformer/while/strided_slice_60/stack_1:0\n,transformer/while/strided_slice_60/stack_2:0\n$transformer/while/strided_slice_60:0\n*transformer/while/strided_slice_61/stack:0\n,transformer/while/strided_slice_61/stack_1:0\n,transformer/while/strided_slice_61/stack_2:0\n$transformer/while/strided_slice_61:0\n*transformer/while/strided_slice_62/stack:0\n,transformer/while/strided_slice_62/stack_1:0\n,transformer/while/strided_slice_62/stack_2:0\n$transformer/while/strided_slice_62:0\n*transformer/while/strided_slice_63/stack:0\n,transformer/while/strided_slice_63/stack_1:0\n,transformer/while/strided_slice_63/stack_2:0\n$transformer/while/strided_slice_63:0\n*transformer/while/strided_slice_64/stack:0\n,transformer/while/strided_slice_64/stack_1:0\n,transformer/while/strided_slice_64/stack_2:0\n$transformer/while/strided_slice_64:0\n*transformer/while/strided_slice_65/stack:0\n,transformer/while/strided_slice_65/stack_1:0\n,transformer/while/strided_slice_65/stack_2:0\n$transformer/while/strided_slice_65:0\n*transformer/while/strided_slice_66/stack:0\n,transformer/while/strided_slice_66/stack_1:0\n,transformer/while/strided_slice_66/stack_2:0\n$transformer/while/strided_slice_66:0\n*transformer/while/strided_slice_67/stack:0\n,transformer/while/strided_slice_67/stack_1:0\n,transformer/while/strided_slice_67/stack_2:0\n$transformer/while/strided_slice_67:0\n*transformer/while/strided_slice_68/stack:0\n,transformer/while/strided_slice_68/stack_1:0\n,transformer/while/strided_slice_68/stack_2:0\n$transformer/while/strided_slice_68:0\n*transformer/while/strided_slice_69/stack:0\n,transformer/while/strided_slice_69/stack_1:0\n,transformer/while/strided_slice_69/stack_2:0\n$transformer/while/strided_slice_69:0\n#transformer/while/strided_slice_6:0\n)transformer/while/strided_slice_7/stack:0\n+transformer/while/strided_slice_7/stack_1:0\n+transformer/while/strided_slice_7/stack_2:0\n*transformer/while/strided_slice_70/stack:0\n,transformer/while/strided_slice_70/stack_1:0\n,transformer/while/strided_slice_70/stack_2:0\n$transformer/while/strided_slice_70:0\n*transformer/while/strided_slice_71/stack:0\n,transformer/while/strided_slice_71/stack_1:0\n,transformer/while/strided_slice_71/stack_2:0\n$transformer/while/strided_slice_71:0\n*transformer/while/strided_slice_72/stack:0\n,transformer/while/strided_slice_72/stack_1:0\n,transformer/while/strided_slice_72/stack_2:0\n$transformer/while/strided_slice_72:0\n*transformer/while/strided_slice_73/stack:0\n,transformer/while/strided_slice_73/stack_1:0\n,transformer/while/strided_slice_73/stack_2:0\n$transformer/while/strided_slice_73:0\n*transformer/while/strided_slice_74/stack:0\n,transformer/while/strided_slice_74/stack_1:0\n,transformer/while/strided_slice_74/stack_2:0\n$transformer/while/strided_slice_74:0\n*transformer/while/strided_slice_75/stack:0\n,transformer/while/strided_slice_75/stack_1:0\n,transformer/while/strided_slice_75/stack_2:0\n$transformer/while/strided_slice_75:0\n*transformer/while/strided_slice_76/stack:0\n,transformer/while/strided_slice_76/stack_1:0\n,transformer/while/strided_slice_76/stack_2:0\n$transformer/while/strided_slice_76:0\n*transformer/while/strided_slice_77/stack:0\n,transformer/while/strided_slice_77/stack_1:0\n,transformer/while/strided_slice_77/stack_2:0\n$transformer/while/strided_slice_77:0\n*transformer/while/strided_slice_78/stack:0\n,transformer/while/strided_slice_78/stack_1:0\n,transformer/while/strided_slice_78/stack_2:0\n$transformer/while/strided_slice_78:0\n*transformer/while/strided_slice_79/stack:0\n,transformer/while/strided_slice_79/stack_1:0\n,transformer/while/strided_slice_79/stack_2:0\n$transformer/while/strided_slice_79:0\n#transformer/while/strided_slice_7:0\n)transformer/while/strided_slice_8/stack:0\n+transformer/while/strided_slice_8/stack_1:0\n+transformer/while/strided_slice_8/stack_2:0\n*transformer/while/strided_slice_80/stack:0\n,transformer/while/strided_slice_80/stack_1:0\n,transformer/while/strided_slice_80/stack_2:0\n$transformer/while/strided_slice_80:0\n*transformer/while/strided_slice_81/stack:0\n,transformer/while/strided_slice_81/stack_1:0\n,transformer/while/strided_slice_81/stack_2:0\n$transformer/while/strided_slice_81:0\n*transformer/while/strided_slice_82/stack:0\n,transformer/while/strided_slice_82/stack_1:0\n,transformer/while/strided_slice_82/stack_2:0\n$transformer/while/strided_slice_82:0\n*transformer/while/strided_slice_83/stack:0\n,transformer/while/strided_slice_83/stack_1:0\n,transformer/while/strided_slice_83/stack_2:0\n$transformer/while/strided_slice_83:0\n*transformer/while/strided_slice_84/stack:0\n,transformer/while/strided_slice_84/stack_1:0\n,transformer/while/strided_slice_84/stack_2:0\n$transformer/while/strided_slice_84:0\n*transformer/while/strided_slice_85/stack:0\n,transformer/while/strided_slice_85/stack_1:0\n,transformer/while/strided_slice_85/stack_2:0\n$transformer/while/strided_slice_85:0\n*transformer/while/strided_slice_86/stack:0\n,transformer/while/strided_slice_86/stack_1:0\n,transformer/while/strided_slice_86/stack_2:0\n$transformer/while/strided_slice_86:0\n*transformer/while/strided_slice_87/stack:0\n,transformer/while/strided_slice_87/stack_1:0\n,transformer/while/strided_slice_87/stack_2:0\n$transformer/while/strided_slice_87:0\n*transformer/while/strided_slice_88/stack:0\n,transformer/while/strided_slice_88/stack_1:0\n,transformer/while/strided_slice_88/stack_2:0\n$transformer/while/strided_slice_88:0\n*transformer/while/strided_slice_89/stack:0\n,transformer/while/strided_slice_89/stack_1:0\n,transformer/while/strided_slice_89/stack_2:0\n$transformer/while/strided_slice_89:0\n#transformer/while/strided_slice_8:0\n)transformer/while/strided_slice_9/stack:0\n+transformer/while/strided_slice_9/stack_1:0\n+transformer/while/strided_slice_9/stack_2:0\n#transformer/while/strided_slice_9:0\n\027transformer/while/sub:0\n\033transformer/while/sub_1/x:0\n\031transformer/while/sub_1:0\n^transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/Cast:0\nhtransformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/ExpandDims/dim:0\ndtransformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/ExpandDims:0\ngtransformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/GatherV2/axis:0\nbtransformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/GatherV2:0\ndtransformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/NotEqual/y:0\nbtransformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/NotEqual:0\natransformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/Squeeze:0\netransformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/concat/axis:0\n`transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/concat:0\n\200\001transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/convert_gradient_to_tensor_HBc3xYw22Mw:0\n_transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul/y:0\n]transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul:0\n_transformer/while/symbol_modality_10069_256/parallel_0/symbol_modality_10069_256/shared/mul_1:0\nbtransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/MatMul:0\nitransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape/shape:0\nctransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape:0\nmtransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape_1/shape/2:0\nmtransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape_1/shape/3:0\nmtransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape_1/shape/4:0\nktransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape_1/shape:0\netransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Reshape_1:0\natransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/Shape:0\ngtransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/concat/axis:0\nbtransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/concat:0\n\202\001transformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/convert_gradient_to_tensor_HBc3xYw22Mw:0\notransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice/stack:0\nqtransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice/stack_1:0\nqtransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice/stack_2:0\nitransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice:0\nqtransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice_1/stack:0\nstransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice_1/stack_1:0\nstransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice_1/stack_2:0\nktransformer/while/symbol_modality_10069_256_1/parallel_0/symbol_modality_10069_256/shared/strided_slice_1:0\n\035transformer/while/truediv/y:0\n\033transformer/while/truediv:0\n\035transformer/while/truediv_1:0\n\037transformer/while/truediv_2/y:0\n\035transformer/while/truediv_2:0\n\035transformer/while/truediv_3:0\n\037transformer/while/zeros/Const:0\n transformer/while/zeros/Less/y:0\n\036transformer/while/zeros/Less:0\n\037transformer/while/zeros/mul/y:0\n\035transformer/while/zeros/mul:0\n!transformer/while/zeros/mul_1/y:0\n\037transformer/while/zeros/mul_1:0\n\"transformer/while/zeros/packed/1:0\n\"transformer/while/zeros/packed/2:0\n transformer/while/zeros/packed:0\n\031transformer/while/zeros:0\022d\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/k/kernel:0\022\022read_78/RefEnter:0\022I\n3transformer/body/decoder/layer_0/ffn/conv2/kernel:0\022\022read_73/RefEnter:0\022O\n9transformer/symbol_modality_10069_256/shared/weights_11:0\022\022read_54/RefEnter:0\022f\nPtransformer/body/decoder/layer_0/encdec_attention/multihead_attention/q/kernel:0\022\022read_67/RefEnter:0\022a\nKtransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\022read_91/RefEnter:0\022N\n8transformer/symbol_modality_10069_256/shared/weights_7:0\022\022read_50/RefEnter:0\022N\n8transformer/symbol_modality_10069_256/shared/weights_2:0\022\022read_45/RefEnter:0\022G\n1transformer/body/decoder/layer_0/ffn/conv2/bias:0\022\022read_74/RefEnter:0\022u\n_transformer/body/decoder/layer_1/encdec_attention/multihead_attention/output_transform/kernel:0\022\022read_84/RefEnter:0\022d\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/k/kernel:0\022\022read_62/RefEnter:0\022I\n3transformer/body/decoder/layer_0/ffn/conv1/kernel:0\022\022read_71/RefEnter:0\022O\n9transformer/symbol_modality_10069_256/shared/weights_12:0\022\022read_55/RefEnter:0\022l\nVtransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022\022read_70/RefEnter:0\022r\nDtransformer/attention_bias_lower_triangle/attention_bias_local/mul:0\022*transformer/while/strided_slice_57/Enter:0\022N\n8transformer/symbol_modality_10069_256/shared/weights_8:0\022\022read_51/RefEnter:0\022N\n8transformer/symbol_modality_10069_256/shared/weights_3:0\022\022read_46/RefEnter:0\022G\n1transformer/body/decoder/layer_1/ffn/conv1/bias:0\022\022read_88/RefEnter:0\022y\nctransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022\022read_82/RefEnter:0\022O\n9transformer/symbol_modality_10069_256/shared/weights_13:0\022\022read_56/RefEnter:0\022y\nctransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022\022read_66/RefEnter:0\022x\nbtransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\022read_59/RefEnter:0\022m\nWtransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\022read_85/RefEnter:0\022z\ndtransformer/body/decoder/layer_1/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\022read_81/RefEnter:0\022X\n*transformer/get_timing_signal_1d/Reshape:0\022*transformer/while/strided_slice_56/Enter:0\022N\n8transformer/symbol_modality_10069_256/shared/weights_9:0\022\022read_52/RefEnter:0\022I\n3transformer/body/decoder/layer_1/ffn/conv2/kernel:0\022\022read_89/RefEnter:0\022N\n8transformer/symbol_modality_10069_256/shared/weights_4:0\022\022read_47/RefEnter:0\022f\nPtransformer/body/decoder/layer_1/encdec_attention/multihead_attention/q/kernel:0\022\022read_83/RefEnter:0\022u\n_transformer/body/decoder/layer_0/encdec_attention/multihead_attention/output_transform/kernel:0\022\022read_68/RefEnter:0\022z\ndtransformer/body/decoder/layer_0/encdec_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\022read_65/RefEnter:0\022m\nWtransformer/body/decoder/layer_0/ffn/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\022read_69/RefEnter:0\022s\n]transformer/body/decoder/layer_1/self_attention/multihead_attention/output_transform/kernel:0\022\022read_80/RefEnter:0\022O\n9transformer/symbol_modality_10069_256/shared/weights_14:0\022\022read_57/RefEnter:0\022x\nbtransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_scale:0\022\022read_75/RefEnter:0\022d\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/v/kernel:0\022\022read_79/RefEnter:0\022G\n1transformer/body/decoder/layer_1/ffn/conv2/bias:0\022\022read_90/RefEnter:0\022I\n3transformer/body/decoder/layer_1/ffn/conv1/kernel:0\022\022read_87/RefEnter:0\022N\n8transformer/symbol_modality_10069_256/shared/weights_5:0\022\022read_48/RefEnter:0\022`\nJtransformer/body/decoder/layer_prepostprocess/layer_norm/layer_norm_bias:0\022\022read_92/RefEnter:0\022N\n8transformer/symbol_modality_10069_256/shared/weights_0:0\022\022read_43/RefEnter:0\022d\nNtransformer/body/decoder/layer_1/self_attention/multihead_attention/q/kernel:0\022\022read_77/RefEnter:0\022l\nVtransformer/body/decoder/layer_1/ffn/layer_prepostprocess/layer_norm/layer_norm_bias:0\022\022read_86/RefEnter:0\022w\natransformer/body/decoder/layer_0/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022\022read_60/RefEnter:0\022G\n1transformer/body/decoder/layer_0/ffn/conv1/bias:0\022\022read_72/RefEnter:0\022O\n9transformer/symbol_modality_10069_256/shared/weights_15:0\022\022read_58/RefEnter:0\0226\n\021transformer/add:0\022!transformer/while/ToFloat/Enter:0\022?\n\036transformer/strided_slice_10:0\022\035transformer/while/mul/Enter:0\022O\n9transformer/symbol_modality_10069_256/shared/weights_10:0\022\022read_53/RefEnter:0\022w\natransformer/body/decoder/layer_1/self_attention/layer_prepostprocess/layer_norm/layer_norm_bias:0\022\022read_76/RefEnter:0\022d\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/v/kernel:0\022\022read_63/RefEnter:0\022N\n8transformer/symbol_modality_10069_256/shared/weights_6:0\022\022read_49/RefEnter:0\022d\nNtransformer/body/decoder/layer_0/self_attention/multihead_attention/q/kernel:0\022\022read_61/RefEnter:0\022N\n8transformer/symbol_modality_10069_256/shared/weights_1:0\022\022read_44/RefEnter:0\022s\n]transformer/body/decoder/layer_0/self_attention/multihead_attention/output_transform/kernel:0\022\022read_64/RefEnter:0R\031transformer/while/Enter:0R\033transformer/while/Enter_1:0R\033transformer/while/Enter_2:0R\033transformer/while/Enter_3:0R\033transformer/while/Enter_4:0R\033transformer/while/Enter_5:0R\033transformer/while/Enter_6:0R\033transformer/while/Enter_7:0R\033transformer/while/Enter_8:0R\033transformer/while/Enter_9:0R\034transformer/while/Enter_10:0R\034transformer/while/Enter_11:0R\034transformer/while/Enter_12:0R\034transformer/while/Enter_13:0R\034transformer/while/Enter_14:0R\034transformer/while/Enter_15:0R\034transformer/while/Enter_16:0R\034transformer/while/Enter_17:0b\271\003\n\266\003\n transformer/while/cond/cond_text\022 transformer/while/cond/pred_id:0\032!transformer/while/cond/switch_t:0 \001*\312\002\n\036transformer/while/Reshape_13:0\n transformer/while/cond/pred_id:0\n!transformer/while/cond/switch_t:0\n*transformer/while/cond/zeros_like/Switch:1\n#transformer/while/cond/zeros_like:0\022D\n transformer/while/cond/pred_id:0\022 transformer/while/cond/pred_id:0\022L\n\036transformer/while/Reshape_13:0\022*transformer/while/cond/zeros_like/Switch:1b\245\003\n\242\003\n\"transformer/while/cond/cond_text_1\022 transformer/while/cond/pred_id:0\032!transformer/while/cond/switch_f:0*\266\002\n\036transformer/while/Reshape_13:0\n!transformer/while/cond/Switch_1:0\n!transformer/while/cond/Switch_1:1\n transformer/while/cond/pred_id:0\n!transformer/while/cond/switch_f:0\022D\n transformer/while/cond/pred_id:0\022 transformer/while/cond/pred_id:0\022C\n\036transformer/while/Reshape_13:0\022!transformer/while/cond/Switch_1:0"
      }
    }
  }
  signature_def {
    key: "serving_default"
    value {
      inputs {
        key: "input"
        value {
          name: "serialized_example:0"
          dtype: DT_STRING
          tensor_shape {
            dim {
              size: -1
            }
          }
        }
      }
      outputs {
        key: "batch_prediction_key"
        value {
          name: "DatasetToSingleElement:0"
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
      outputs {
        key: "outputs"
        value {
          name: "transformer/strided_slice_12:0"
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: -1
            }
            dim {
              size: -1
            }
          }
        }
      }
      outputs {
        key: "scores"
        value {
          name: "transformer/strided_slice_13:0"
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: -1
            }
          }
        }
      }
      method_name: "tensorflow/serving/predict"
    }
  }
}
